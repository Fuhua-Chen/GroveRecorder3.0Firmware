<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\NuOneExEnc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\NuOneExEnc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue May 03 18:06:07 2016
<BR><P>
<H3>Maximum Stack Usage =        284 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Default_KeyHandler &rArr; Playback_KeypadHandler &rArr; App_StartPlay &rArr; NuOneExApp_DecodeStartPlayByAddr &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[27]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[12]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ACMP_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[10]">ALC_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1c]">CAPS_IRQHandler</a> from interrupthandler.o(i.CAPS_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[12]">Default_Handler</a> from startup_isd9100.o(.text) referenced 13 times from startup_isd9100.o(RESET)
 <LI><a href="#[24]">Default_KeyHandler</a> from inputkeyactions.o(i.Default_KeyHandler) referenced 18 times from configio.o(.constdata)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[f]">GPAB_IRQHandler</a> from interrupthandler.o(i.GPAB_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1b]">I2S_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1a]">PDMA_IRQHandler</a> from interrupthandler.o(i.PDMA_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[11]">PWM0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from interrupthandler.o(i.RTC_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[25]">Reset_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[22]">SPIFlash_ReadDataCallback</a> from appcallback.o(i.SPIFlash_ReadDataCallback) referenced from appcallback.o(.constdata)
 <LI><a href="#[8]">SVC_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[18]">TALARM_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from interrupthandler.o(i.TMR0_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from interrupthandler.o(i.TMR1_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[15]">UART0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[23]">UserEvent_ProcessCallback</a> from appcallback.o(i.UserEvent_ProcessCallback) referenced from appcallback.o(.constdata)
 <LI><a href="#[c]">WDT_IRQHandler</a> from interrupthandler.o(i.WDT_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from startup_isd9100.o(.text)
 <LI><a href="#[21]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[20]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[43]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[100]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[101]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[104]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[105]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[106]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[107]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[108]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[109]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[29]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[111]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[30]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[32]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[112]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[34]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; App_ProcessPlay &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[113]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[37]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[114]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[39]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_dct_type_iv_s_point_transforms_2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rmlt_coefs_to_samples
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_isd9100.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ALC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TALARM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_isd9100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
</UL>

<P><STRONG><a name="[2e]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[41]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[45]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[44]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_SetInBufRecord
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetOutputBuf
</UL>

<P><STRONG><a name="[116]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeInitiate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeInitiate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_SetInBufRecord
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetOutputBuf
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_SetSampleRate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_ChangeSR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_ChangeSR
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetWorkingFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetVarClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetPGAGaindB
</UL>

<P><STRONG><a name="[11a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[11d]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[11e]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[11f]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[120]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3c]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3f]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[31]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[36]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[121]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[122]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[123]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>ADC_EnableInt</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, adc.o(i.ADC_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
</UL>

<P><STRONG><a name="[6a]"></a>ADC_EnableMICBias</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADC_EnableMICBias))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
</UL>

<P><STRONG><a name="[62]"></a>ADC_GetIntFlag</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, adc.o(i.ADC_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
</UL>

<P><STRONG><a name="[6b]"></a>ADC_Open</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc.o(i.ADC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
</UL>

<P><STRONG><a name="[53]"></a>ADC_SetAMUX</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, adc.o(i.ADC_SetAMUX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetAMUX
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetGPIOChannel
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
</UL>

<P><STRONG><a name="[52]"></a>ADC_SetGPIOChannel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.ADC_SetGPIOChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_SetGPIOChannel &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetAMUX
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
</UL>

<P><STRONG><a name="[55]"></a>ADC_SetPGAGaindB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(i.ADC_SetPGAGaindB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_SetPGAGaindB &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
</UL>

<P><STRONG><a name="[57]"></a>App_Initiate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, appfunctions.o(i.App_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Initiate &rArr; Playback_Initiate
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Initiate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>App_ProcessPlay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, appfunctions.o(i.App_ProcessPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = App_ProcessPlay &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>App_ProcessRec</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, appfunctions.o(i.App_ProcessRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = App_ProcessRec &rArr; NuOneExApp_EncodeProcess &rArr; NuOneEx_EncodeProcess &rArr; NuOneXCodec_EncodeProcess &rArr; f_encoder &rArr; f_vector_huffman
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_WriteEncodeData
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>App_ReadVR</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, appfunctions.o(i.App_ReadVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = App_ReadVR &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetGPIOChannel
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetIntFlag
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableInt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableLDO
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
</UL>

<P><STRONG><a name="[60]"></a>App_ReadVRInit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, appfunctions.o(i.App_ReadVRInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_ReadVRInit &rArr; ADC_SetPGAGaindB &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHIRCFreq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetPGAGaindB
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetAMUX
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableMICBias
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
</UL>

<P><STRONG><a name="[6d]"></a>App_StartPlay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, appfunctions.o(i.App_StartPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = App_StartPlay &rArr; NuOneExApp_DecodeStartPlayByAddr &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeStartPlayByAddr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
</UL>

<P><STRONG><a name="[71]"></a>App_StartRec</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, appfunctions.o(i.App_StartRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = App_StartRec &rArr; SPIFlahUtil_StartWriteEncodeData &rArr; SPIFlashUtil_4KPagePartialWriteInitiate &rArr; SPIFlash_Erase &rArr; SPIFlash_EraseStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlahUtil_StartWriteEncodeData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_StartRec
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeStart
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_KeypadHandler
</UL>

<P><STRONG><a name="[76]"></a>App_StopPlay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, appfunctions.o(i.App_StopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = App_StopPlay &rArr; Playback_StopPlay &rArr; Playback_VolumeFadeOut &rArr; Playback_AdjustVolumeDBStep
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>App_StopRec</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, appfunctions.o(i.App_StopRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = App_StopRec &rArr; SPIFlashUtil_EndWriteEncodeData &rArr; SPIFlash_Write &rArr; SPIFlash_WriteStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_EndWriteEncodeData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_StopRec
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_KeypadHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>BIQ_Reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, biq.o(i.BIQ_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>

<P><STRONG><a name="[7e]"></a>BIQ_SetCoeff</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, biq.o(i.BIQ_SetCoeff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIQ_SetCoeff
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>

<P><STRONG><a name="[9c]"></a>BufCtrl_WriteWithCount</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, bufctrl.o(i.BufCtrl_WriteWithCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BufCtrl_WriteWithCount
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeProcess
</UL>

<P><STRONG><a name="[1c]"></a>CAPS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, interrupthandler.o(i.CAPS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CLK_EnableLDO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, clk.o(i.CLK_EnableLDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableLDO
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Unlock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>

<P><STRONG><a name="[81]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Unlock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
</UL>

<P><STRONG><a name="[82]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetVarClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
</UL>

<P><STRONG><a name="[6c]"></a>CLK_GetHIRCFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(i.CLK_GetHIRCFreq))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
</UL>

<P><STRONG><a name="[84]"></a>CLK_SetHCLK</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Unlock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
</UL>

<P><STRONG><a name="[8c]"></a>CLK_SetModuleClock</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[63]"></a>CLK_SysTickDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, clk.o(i.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
</UL>

<P><STRONG><a name="[e2]"></a>DPWM_Open</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dpwm.o(i.DPWM_Open))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
</UL>

<P><STRONG><a name="[85]"></a>DPWM_SetSampleRate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dpwm.o(i.DPWM_SetSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_ChangeSR
</UL>

<P><STRONG><a name="[24]"></a>Default_KeyHandler</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, inputkeyactions.o(i.Default_KeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = Default_KeyHandler &rArr; Playback_KeypadHandler &rArr; App_StartPlay &rArr; NuOneExApp_DecodeStartPlayByAddr &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_KeypadHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopRec
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessRec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPlay
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configio.o(.constdata)
</UL>
<P><STRONG><a name="[f]"></a>GPAB_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, interrupthandler.o(i.GPAB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetGPIOChannel
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Initiate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[89]"></a>InputKey_Change</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, configio.o(i.InputKey_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InputKey_Change &rArr; Keypad_InitTgr
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_InitTgr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[8b]"></a>InputKey_Initiate</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, configio.o(i.InputKey_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = InputKey_Initiate &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetWorkingFreq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_InitKeypad
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Change
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>Keypad_InitKeypad</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keypad.o(i.Keypad_InitKeypad))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[8a]"></a>Keypad_InitTgr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, keypad.o(i.Keypad_InitTgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Keypad_InitTgr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Change
</UL>

<P><STRONG><a name="[92]"></a>Keypad_ScanTgr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, keypad.o(i.Keypad_ScanTgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keypad_ScanTgr &rArr; Keypad_TgrMapHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_TgrMapHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgrPort
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>Keypad_ScanTgrPort</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, keypad.o(i.Keypad_ScanTgrPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Keypad_ScanTgrPort
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgr
</UL>

<P><STRONG><a name="[e8]"></a>Keypad_TgrDecDebounceCounter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, keypad.o(i.Keypad_TgrDecDebounceCounter))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>Keypad_TgrMapHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, keypad.o(i.Keypad_TgrMapHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keypad_TgrMapHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgr
</UL>

<P><STRONG><a name="[95]"></a>MIC_ChangeSR</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, micspk.o(i.MIC_ChangeSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MIC_ChangeSR
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Add
</UL>

<P><STRONG><a name="[67]"></a>MIC_Open</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, micspk.o(i.MIC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MIC_Open &rArr; PdmaCtrl_Open &rArr; PDMA_SetTransferMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetPGAGaindB
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetAMUX
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EnableMICBias
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>MIC_Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, micspk.o(i.MIC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_StartRec
</UL>

<P><STRONG><a name="[c6]"></a>MIC_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, micspk.o(i.MIC_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_StopRec
</UL>

<P><STRONG><a name="[6e]"></a>NuOneExApp_DecodeInitiate</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nuoneexapp_decode.o(i.NuOneExApp_DecodeInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NuOneExApp_DecodeInitiate
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
</UL>

<P><STRONG><a name="[5b]"></a>NuOneExApp_DecodeProcess</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, nuoneexapp_decode.o(i.NuOneExApp_DecodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_UpdateOutputBuf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_NeedUpdateOutputBuf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_DecodeProcess
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_DecodeIsEnd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufCtrl_WriteWithCount
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeStartPlayByAddr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPlay
</UL>

<P><STRONG><a name="[6f]"></a>NuOneExApp_DecodeStartPlayByAddr</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, nuoneexapp_decode.o(i.NuOneExApp_DecodeStartPlayByAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = NuOneExApp_DecodeStartPlayByAddr &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeProcess
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetOutputBuf
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_DecodeInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
</UL>

<P><STRONG><a name="[7a]"></a>NuOneExApp_EncodeEnd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nuoneexapp_encode.o(i.NuOneExApp_EncodeEnd))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopRec
</UL>

<P><STRONG><a name="[72]"></a>NuOneExApp_EncodeInitiate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nuoneexapp_encode.o(i.NuOneExApp_EncodeInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NuOneExApp_EncodeInitiate
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRec
</UL>

<P><STRONG><a name="[5e]"></a>NuOneExApp_EncodeProcess</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nuoneexapp_encode.o(i.NuOneExApp_EncodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = NuOneExApp_EncodeProcess &rArr; NuOneEx_EncodeProcess &rArr; NuOneXCodec_EncodeProcess &rArr; f_encoder &rArr; f_vector_huffman
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_EncodeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessRec
</UL>

<P><STRONG><a name="[73]"></a>NuOneExApp_EncodeStart</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nuoneexapp_encode.o(i.NuOneExApp_EncodeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NuOneExApp_EncodeStart &rArr; Record_Add &rArr; MIC_ChangeSR
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_SetInBufRecord
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Add
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_EncodeInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRec
</UL>

<P><STRONG><a name="[9d]"></a>NuOneEx_DecodeInitiate</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nuoneex.o(i.NuOneEx_DecodeInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NuOneEx_DecodeInitiate &rArr; NuOneXCodec_DecodeInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_DecodeInitial
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeStartPlayByAddr
</UL>

<P><STRONG><a name="[99]"></a>NuOneEx_DecodeIsEnd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nuoneex.o(i.NuOneEx_DecodeIsEnd))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeProcess
</UL>

<P><STRONG><a name="[9a]"></a>NuOneEx_DecodeProcess</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, nuoneex.o(i.NuOneEx_DecodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_DecodeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeProcess
</UL>

<P><STRONG><a name="[a1]"></a>NuOneEx_EncodeInitiate</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nuoneex.o(i.NuOneEx_EncodeInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NuOneEx_EncodeInitiate
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_EncodeInitial
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeStart
</UL>

<P><STRONG><a name="[a0]"></a>NuOneEx_EncodeProcess</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nuoneex.o(i.NuOneEx_EncodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NuOneEx_EncodeProcess &rArr; NuOneXCodec_EncodeProcess &rArr; f_encoder &rArr; f_vector_huffman
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_EncodeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeProcess
</UL>

<P><STRONG><a name="[a4]"></a>NuOneXCodec_DecodeInitial</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, nuonedecode.o(i.NuOneXCodec_DecodeInitial))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NuOneXCodec_DecodeInitial
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_DecodeInitiate
</UL>

<P><STRONG><a name="[a5]"></a>NuOneXCodec_DecodeProcess</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nuonedecode.o(i.NuOneXCodec_DecodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rmlt_coefs_to_samples
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_DecodeProcess
</UL>

<P><STRONG><a name="[a6]"></a>NuOneXCodec_EncodeInitial</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nuoneencode.o(i.NuOneXCodec_EncodeInitial))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_EncodeInitiate
</UL>

<P><STRONG><a name="[a7]"></a>NuOneXCodec_EncodeProcess</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nuoneencode.o(i.NuOneXCodec_EncodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NuOneXCodec_EncodeProcess &rArr; f_encoder &rArr; f_vector_huffman
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_samples_to_rmlt_coefs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneEx_EncodeProcess
</UL>

<P><STRONG><a name="[ac]"></a>OutputPin_Initiate</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, configio.o(i.OutputPin_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OutputPin_Initiate &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>OutputPin_Set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, configio.o(i.OutputPin_Set))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRec
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Initiate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopRec
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
</UL>

<P><STRONG><a name="[ba]"></a>PDMA_DisableInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pdma.o(i.PDMA_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[b7]"></a>PDMA_EnableInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pdma.o(i.PDMA_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[1a]"></a>PDMA_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, interrupthandler.o(i.PDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PDMA_IRQHandler &rArr; Playback_Process &rArr; PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>PDMA_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdma.o(i.PDMA_Open))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[b4]"></a>PDMA_SetTransferAddr</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, pdma.o(i.PDMA_SetTransferAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PDMA_SetTransferAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[b5]"></a>PDMA_SetTransferCnt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, pdma.o(i.PDMA_SetTransferCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[b6]"></a>PDMA_SetTransferDirection</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pdma.o(i.PDMA_SetTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_SetTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[af]"></a>PDMA_SetTransferMode</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, pdma.o(i.PDMA_SetTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PDMA_SetTransferMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[b9]"></a>PDMA_Trigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pdma.o(i.PDMA_Trigger))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
</UL>

<P><STRONG><a name="[b1]"></a>PdmaCtrl_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pdmactrl.o(i.PdmaCtrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PdmaCtrl_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>PdmaCtrl_Open</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pdmactrl.o(i.PdmaCtrl_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PdmaCtrl_Open &rArr; PDMA_SetTransferMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferDirection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferAddr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
</UL>

<P><STRONG><a name="[b8]"></a>PdmaCtrl_Start</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pdmactrl.o(i.PdmaCtrl_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Trigger
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_Process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_StartRec
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
</UL>

<P><STRONG><a name="[bd]"></a>PdmaCtrl_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pdmactrl.o(i.PdmaCtrl_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Record_StopRec
</UL>

<P><STRONG><a name="[9f]"></a>Playback_Add</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, playback.o(i.Playback_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Playback_Add &rArr; SPK_ChangeSR &rArr; DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_ChangeSR
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeStartPlayByAddr
</UL>

<P><STRONG><a name="[c1]"></a>Playback_AdjustVolumeDBStep</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, playback.o(i.Playback_AdjustVolumeDBStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Playback_AdjustVolumeDBStep
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_VolumeFadeOut
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetVolumeDB
</UL>

<P><STRONG><a name="[58]"></a>Playback_Initiate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, playback.o(i.Playback_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Playback_Initiate
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ResetChannelVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
</UL>

<P><STRONG><a name="[bf]"></a>Playback_IsTargetVolume</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, playback.o(i.Playback_IsTargetVolume))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ProcessVolume
</UL>

<P><STRONG><a name="[86]"></a>Playback_KeypadHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, inputkeyactions.o(i.Playback_KeypadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = Playback_KeypadHandler &rArr; App_StartPlay &rArr; NuOneExApp_DecodeStartPlayByAddr &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
</UL>

<P><STRONG><a name="[98]"></a>Playback_NeedUpdateOutputBuf</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, playback.o(i.Playback_NeedUpdateOutputBuf))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeProcess
</UL>

<P><STRONG><a name="[ad]"></a>Playback_Process</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, playback.o(i.Playback_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Playback_Process &rArr; PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ProcessVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>Playback_ProcessVolume</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, playback.o(i.Playback_ProcessVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Playback_ProcessVolume
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_IsTargetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
</UL>

<P><STRONG><a name="[bc]"></a>Playback_ResetChannelVolume</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, playback.o(i.Playback_ResetChannelVolume))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Initiate
</UL>

<P><STRONG><a name="[9e]"></a>Playback_SetOutputBuf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, playback.o(i.Playback_SetOutputBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Playback_SetOutputBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeStartPlayByAddr
</UL>

<P><STRONG><a name="[c0]"></a>Playback_SetVolumeDB</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, playback.o(i.Playback_SetVolumeDB))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Playback_SetVolumeDB &rArr; Playback_AdjustVolumeDBStep
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_AdjustVolumeDBStep
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
</UL>

<P><STRONG><a name="[70]"></a>Playback_StartPlay</STRONG> (Thumb, 634 bytes, Stack size 8 bytes, playback.o(i.Playback_StartPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Playback_StartPlay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetVolumeDB
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ResetChannelVolume
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Start
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
</UL>

<P><STRONG><a name="[77]"></a>Playback_StopPlay</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, playback.o(i.Playback_StopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Playback_StopPlay &rArr; Playback_VolumeFadeOut &rArr; Playback_AdjustVolumeDBStep
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_VolumeFadeOut
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ResetChannelVolume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[9b]"></a>Playback_UpdateOutputBuf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, playback.o(i.Playback_UpdateOutputBuf))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_DecodeProcess
</UL>

<P><STRONG><a name="[c3]"></a>Playback_VolumeFadeOut</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, playback.o(i.Playback_VolumeFadeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Playback_VolumeFadeOut &rArr; Playback_AdjustVolumeDBStep
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_AdjustVolumeDBStep
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
</UL>

<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupthandler.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>Record_Add</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, record.o(i.Record_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Record_Add &rArr; MIC_ChangeSR
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_ChangeSR
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeStart
</UL>

<P><STRONG><a name="[87]"></a>Record_KeypadHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, inputkeyactions.o(i.Record_KeypadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Record_KeypadHandler &rArr; App_StartRec &rArr; SPIFlahUtil_StartWriteEncodeData &rArr; SPIFlashUtil_4KPagePartialWriteInitiate &rArr; SPIFlash_Erase &rArr; SPIFlash_EraseStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRec
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopRec
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
</UL>

<P><STRONG><a name="[ae]"></a>Record_Process</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, record.o(i.Record_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Record_Process &rArr; PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>Record_SetInBufRecord</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, record.o(i.Record_SetInBufRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Record_SetInBufRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneExApp_EncodeStart
</UL>

<P><STRONG><a name="[75]"></a>Record_StartRec</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, record.o(i.Record_StartRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Record_StartRec &rArr; PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRec
</UL>

<P><STRONG><a name="[79]"></a>Record_StopRec</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, record.o(i.Record_StopRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Record_StopRec
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopRec
</UL>

<P><STRONG><a name="[74]"></a>SPIFlahUtil_StartWriteEncodeData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spiflashutil.o(i.SPIFlahUtil_StartWriteEncodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPIFlahUtil_StartWriteEncodeData &rArr; SPIFlashUtil_4KPagePartialWriteInitiate &rArr; SPIFlash_Erase &rArr; SPIFlash_EraseStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriteWithWait
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriteInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartRec
</UL>

<P><STRONG><a name="[c7]"></a>SPIFlashUtil_4KPagePartialWriteInitiate</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, spiflashutil.o(i.SPIFlashUtil_4KPagePartialWriteInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SPIFlashUtil_4KPagePartialWriteInitiate &rArr; SPIFlash_Erase &rArr; SPIFlash_EraseStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlahUtil_StartWriteEncodeData
</UL>

<P><STRONG><a name="[ca]"></a>SPIFlashUtil_4KPagePartialWriteStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spiflashutil.o(i.SPIFlashUtil_4KPagePartialWriteStart))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_WriteEncodeData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriteWithWait
</UL>

<P><STRONG><a name="[c8]"></a>SPIFlashUtil_4KPagePartialWriteWithWait</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spiflashutil.o(i.SPIFlashUtil_4KPagePartialWriteWithWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPIFlashUtil_4KPagePartialWriteWithWait &rArr; SPIFlashUtil_4KPagePartialWriting &rArr; SPIFlash_WriteStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriteStart
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlahUtil_StartWriteEncodeData
</UL>

<P><STRONG><a name="[cb]"></a>SPIFlashUtil_4KPagePartialWriting</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, spiflashutil.o(i.SPIFlashUtil_4KPagePartialWriting))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPIFlashUtil_4KPagePartialWriting &rArr; SPIFlash_WriteStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WriteStart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WriteEnd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WriteData
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_EraseStart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_CheckBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_WriteEncodeData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_EndWriteEncodeData
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriteWithWait
</UL>

<P><STRONG><a name="[7b]"></a>SPIFlashUtil_EndWriteEncodeData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spiflashutil.o(i.SPIFlashUtil_EndWriteEncodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SPIFlashUtil_EndWriteEncodeData &rArr; SPIFlash_Write &rArr; SPIFlash_WriteStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopRec
</UL>

<P><STRONG><a name="[5d]"></a>SPIFlashUtil_WriteEncodeData</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spiflashutil.o(i.SPIFlashUtil_WriteEncodeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIFlashUtil_WriteEncodeData &rArr; SPIFlashUtil_4KPagePartialWriting &rArr; SPIFlash_WriteStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriteStart
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessRec
</UL>

<P><STRONG><a name="[cc]"></a>SPIFlash_CheckBusy</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, spiflash.o(i.SPIFlash_CheckBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIFlash_CheckBusy &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadStatusReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
</UL>

<P><STRONG><a name="[d4]"></a>SPIFlash_ChipWriteEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spiflash.o(i.SPIFlash_ChipWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WaitReady
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WriteStart
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_EraseStart
</UL>

<P><STRONG><a name="[c9]"></a>SPIFlash_Erase</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, spiflash.o(i.SPIFlash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPIFlash_Erase &rArr; SPIFlash_EraseStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_EraseStart
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriteInitiate
</UL>

<P><STRONG><a name="[cd]"></a>SPIFlash_EraseStart</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, spiflash.o(i.SPIFlash_EraseStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIFlash_EraseStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ChipWriteEnable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Erase
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
</UL>

<P><STRONG><a name="[d7]"></a>SPIFlash_GetChipInfo</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, spiflash.o(i.SPIFlash_GetChipInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIFlash_GetChipInfo &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[d8]"></a>SPIFlash_Initiate</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.SPIFlash_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPIFlash_Initiate &rArr; SPIFlash_Open &rArr; SPI_Open &rArr; SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_PowerDown
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Open
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_GetChipInfo
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>SPIFlash_Open</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, spiflash.o(i.SPIFlash_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIFlash_Open &rArr; SPI_Open &rArr; SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[da]"></a>SPIFlash_PowerDown</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spiflash.o(i.SPIFlash_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIFlash_PowerDown &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[d1]"></a>SPIFlash_Read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spiflash.o(i.SPIFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIFlash_Read &rArr; SPIFlash_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadStart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadEnd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadDataCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_EndWriteEncodeData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[dd]"></a>SPIFlash_ReadData</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, spiflash.o(i.SPIFlash_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIFlash_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>

<P><STRONG><a name="[22]"></a>SPIFlash_ReadDataCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, appcallback.o(i.SPIFlash_ReadDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPIFlash_ReadDataCallback &rArr; SPIFlash_Read &rArr; SPIFlash_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appcallback.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>SPIFlash_ReadEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spiflash.o(i.SPIFlash_ReadEnd))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>

<P><STRONG><a name="[dc]"></a>SPIFlash_ReadStart</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, spiflash.o(i.SPIFlash_ReadStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIFlash_ReadStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>

<P><STRONG><a name="[d3]"></a>SPIFlash_ReadStatusReg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spiflash.o(i.SPIFlash_ReadStatusReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_CheckBusy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WaitReady
</UL>

<P><STRONG><a name="[d5]"></a>SPIFlash_SendRecOneData</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, spiflash.o(i.SPIFlash_SendRecOneData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_PowerDown
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_GetChipInfo
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ChipWriteEnable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_EraseStart
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadStatusReg
</UL>

<P><STRONG><a name="[d6]"></a>SPIFlash_WaitReady</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spiflash.o(i.SPIFlash_WaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadStatusReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ChipWriteEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Write
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Erase
</UL>

<P><STRONG><a name="[d2]"></a>SPIFlash_Write</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, spiflash.o(i.SPIFlash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPIFlash_Write &rArr; SPIFlash_WriteStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WriteStart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WriteEnd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WriteData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_EndWriteEncodeData
</UL>

<P><STRONG><a name="[cf]"></a>SPIFlash_WriteData</STRONG> (Thumb, 262 bytes, Stack size 20 bytes, spiflash.o(i.SPIFlash_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIFlash_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
</UL>

<P><STRONG><a name="[d0]"></a>SPIFlash_WriteEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spiflash.o(i.SPIFlash_WriteEnd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
</UL>

<P><STRONG><a name="[ce]"></a>SPIFlash_WriteStart</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, spiflash.o(i.SPIFlash_WriteStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIFlash_WriteStart &rArr; SPIFlash_ChipWriteEnable &rArr; SPIFlash_WaitReady &rArr; SPIFlash_ReadStatusReg &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ChipWriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashUtil_4KPagePartialWriting
</UL>

<P><STRONG><a name="[df]"></a>SPI_GetBusClock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spi.o(i.SPI_GetBusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_GetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[db]"></a>SPI_Open</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, spi.o(i.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_Open &rArr; SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetVarClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Open
</UL>

<P><STRONG><a name="[e1]"></a>SPI_SetBusClock</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spi.o(i.SPI_SetBusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[e0]"></a>SPI_SetVarClock</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, spi.o(i.SPI_SetVarClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[bb]"></a>SPK_ChangeSR</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, micspk.o(i.SPK_ChangeSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPK_ChangeSR &rArr; DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_SetSampleRate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[66]"></a>SPK_Open</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, micspk.o(i.SPK_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPK_Open &rArr; PdmaCtrl_Open &rArr; PDMA_SetTransferMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_Open
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVR
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>SPK_Start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, micspk.o(i.SPK_Start))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
</UL>

<P><STRONG><a name="[c4]"></a>SPK_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, micspk.o(i.SPK_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
</UL>

<P><STRONG><a name="[80]"></a>SYS_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.SYS_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableLDO
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>

<P><STRONG><a name="[69]"></a>SYS_ResetModule</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ReadVRInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[7f]"></a>SYS_Unlock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(i.SYS_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableLDO
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>

<P><STRONG><a name="[e3]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[e4]"></a>SendChar_ToUART</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[e5]"></a>SysClk_InitiateRC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sysclk.o(i.SysClk_InitiateRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysClk_InitiateRC &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system_isd9100.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_SetSampleRate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[e6]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetWorkingFreq
</UL>

<P><STRONG><a name="[8e]"></a>TIMER_GetWorkingFreq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.TIMER_GetWorkingFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetWorkingFreq &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[8d]"></a>TIMER_Open</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, interrupthandler.o(i.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interrupthandler.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_TgrDecDebounceCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UserEvent_ProcessCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appcallback.o(i.UserEvent_ProcessCallback))
<BR>[Address Reference Count : 1]<UL><LI> appcallback.o(.constdata)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupthandler.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pdma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
</UL>

<P><STRONG><a name="[42]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[88]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, inputkeyactions.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
</UL>

<P><STRONG><a name="[eb]"></a>f_categorize</STRONG> (Thumb, 634 bytes, Stack size 72 bytes, nuonecodec.o(i.f_categorize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = f_categorize
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_encoder
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>

<P><STRONG><a name="[e9]"></a>f_dct_type_iv_s_point_transforms_2</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, nuonedecode.o(i.f_dct_type_iv_s_point_transforms_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_dct_type_iv_s_point_transforms_2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rmlt_coefs_to_samples
</UL>

<P><STRONG><a name="[f1]"></a>f_dct_type_iv_s_rotation_butterflies</STRONG> (Thumb, 324 bytes, Stack size 96 bytes, nuonedecode.o(i.f_dct_type_iv_s_rotation_butterflies))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_dct_type_iv_s_rotation_butterflies
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rmlt_coefs_to_samples
</UL>

<P><STRONG><a name="[f0]"></a>f_dct_type_iv_s_sum_diff_butterflies</STRONG> (Thumb, 208 bytes, Stack size 52 bytes, nuonedecode.o(i.f_dct_type_iv_s_sum_diff_butterflies))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = f_dct_type_iv_s_sum_diff_butterflies
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rmlt_coefs_to_samples
</UL>

<P><STRONG><a name="[ed]"></a>f_look_up_category_5_6</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, nuonedecode.o(i.f_look_up_category_5_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_look_up_category_5_6
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>

<P><STRONG><a name="[ee]"></a>f_look_up_category_7</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, nuonedecode.o(i.f_look_up_category_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_look_up_category_7
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>

<P><STRONG><a name="[ec]"></a>f_look_up_category_less_than_7</STRONG> (Thumb, 548 bytes, Stack size 76 bytes, nuonedecode.o(i.f_look_up_category_less_than_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = f_look_up_category_less_than_7
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>

<P><STRONG><a name="[4e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[20]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = main &rArr; App_ProcessPlay &rArr; NuOneExApp_DecodeProcess &rArr; NuOneEx_DecodeProcess &rArr; NuOneXCodec_DecodeProcess &rArr; f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Initiate
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableLDO
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopRec
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessRec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPlay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[12]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>BIQFilter_Setting</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, micspk.o(i.BIQFilter_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIQFilter_Setting &rArr; BIQ_SetCoeff
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQ_SetCoeff
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQ_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIC_Open
</UL>

<P><STRONG><a name="[b2]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdmactrl.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
</UL>

<P><STRONG><a name="[a8]"></a>f_decoder</STRONG> (Thumb, 702 bytes, Stack size 80 bytes, nuonedecode.o(i.f_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = f_decoder &rArr; f_look_up_category_less_than_7
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_categorize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_look_up_category_less_than_7
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_look_up_category_7
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_look_up_category_5_6
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_get_n_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_DecodeProcess
</UL>

<P><STRONG><a name="[ea]"></a>f_get_n_bit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nuonedecode.o(i.f_get_n_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = f_get_n_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>

<P><STRONG><a name="[a9]"></a>f_rmlt_coefs_to_samples</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, nuonedecode.o(i.f_rmlt_coefs_to_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = f_rmlt_coefs_to_samples &rArr; f_dct_type_iv_s_rotation_butterflies
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_dct_type_iv_s_sum_diff_butterflies
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_dct_type_iv_s_rotation_butterflies
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_dct_type_iv_s_point_transforms_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_DecodeProcess
</UL>

<P><STRONG><a name="[ab]"></a>f_encoder</STRONG> (Thumb, 1372 bytes, Stack size 80 bytes, nuoneencode.o(i.f_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = f_encoder &rArr; f_vector_huffman
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_vector_huffman
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_categorize
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_EncodeProcess
</UL>

<P><STRONG><a name="[aa]"></a>f_samples_to_rmlt_coefs</STRONG> (Thumb, 1020 bytes, Stack size 112 bytes, nuoneencode.o(i.f_samples_to_rmlt_coefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = f_samples_to_rmlt_coefs
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuOneXCodec_EncodeProcess
</UL>

<P><STRONG><a name="[ef]"></a>f_vector_huffman</STRONG> (Thumb, 344 bytes, Stack size 96 bytes, nuoneencode.o(i.f_vector_huffman))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f_vector_huffman
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_encoder
</UL>

<P><STRONG><a name="[21]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[4b]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[3d]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3e]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
