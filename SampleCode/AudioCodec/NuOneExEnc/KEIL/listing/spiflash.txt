; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\spiflash.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\spiflash.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\spiflash.crf ..\..\..\..\Library\Storage\src\SPIFlash.c]
                          THUMB

                          AREA ||i.SPIFlash_BurstRead||, CODE, READONLY, ALIGN=1

                  SPIFlash_BurstRead PROC
;;;577    void
;;;578    SPIFlash_BurstRead(
000000  b570              PUSH     {r4-r6,lr}
;;;579    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;580    	UINT32 u32ByteAddr,
;;;581    	PUINT8 pau8Data,
;;;582    	UINT32 u32DataLen
;;;583    )
;;;584    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  4604              MOV      r4,r0
;;;585    	SPIFlash_ReadStart( psSpiFlashHandler, u32ByteAddr );
000008  f7fffffe          BL       SPIFlash_ReadStart
;;;586    	SPIFlash_ReadDataAlign(psSpiFlashHandler, pau8Data, u32DataLen);
00000c  462a              MOV      r2,r5
00000e  4631              MOV      r1,r6
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SPIFlash_ReadDataAlign
;;;587    	SPIFlash_ReadEnd(psSpiFlashHandler);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       SPIFlash_ReadEnd
;;;588    }
00001c  bd70              POP      {r4-r6,pc}
;;;589    
                          ENDP


                          AREA ||i.SPIFlash_CheckBusy||, CODE, READONLY, ALIGN=1

                  SPIFlash_CheckBusy PROC
;;;83     BOOL
;;;84     SPIFlash_CheckBusy(
000000  b500              PUSH     {lr}
;;;85     	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;86     )
;;;87     {
;;;88     	return (SPIFlash_ReadStatusReg(psSpiFlashHandler, eSTATUS_REG1)& SPIFLASH_BUSY);
000002  2100              MOVS     r1,#0
000004  f7fffffe          BL       SPIFlash_ReadStatusReg
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
;;;89     }
00000c  bd00              POP      {pc}
;;;90     
                          ENDP


                          AREA ||i.SPIFlash_ChipWriteEnable||, CODE, READONLY, ALIGN=1

                  SPIFlash_ChipWriteEnable PROC
;;;275    void
;;;276    SPIFlash_ChipWriteEnable(
000000  b510              PUSH     {r4,lr}
;;;277    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;278    	BOOL bEnableWrite
;;;279    )
;;;280    {
000002  4604              MOV      r4,r0
;;;281    	UINT8 u8Cmd;
;;;282    
;;;283    	if ( bEnableWrite == TRUE )
000004  2901              CMP      r1,#1
000006  d007              BEQ      |L3.24|
;;;284    		u8Cmd = SPIFLASH_WRITE_ENABLE;
;;;285    	else
;;;286    		u8Cmd = SPIFLASH_WRITE_DISABLE;
000008  2104              MOVS     r1,#4
                  |L3.10|
;;;287    	
;;;288    	SPIFlash_SendRecOneData(psSpiFlashHandler, u8Cmd, 8);
00000a  2208              MOVS     r2,#8
00000c  f7fffffe          BL       SPIFlash_SendRecOneData
;;;289    	SPIFlash_WaitReady(psSpiFlashHandler);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SPIFlash_WaitReady
;;;290    }
000016  bd10              POP      {r4,pc}
                  |L3.24|
000018  2106              MOVS     r1,#6                 ;284
00001a  e7f6              B        |L3.10|
;;;291    
                          ENDP


                          AREA ||i.SPIFlash_Erase||, CODE, READONLY, ALIGN=1

                  SPIFlash_Erase PROC
;;;328    void
;;;329    SPIFlash_Erase(
000000  b5f0              PUSH     {r4-r7,lr}
;;;330    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;331    	UINT32 u32CmdAddr,
;;;332    	UINT32 u32AddIncreament,
;;;333    	UINT16 u16EraseCount
;;;334    )
;;;335    {
000002  461c              MOV      r4,r3
000004  4616              MOV      r6,r2
000006  460d              MOV      r5,r1
000008  4607              MOV      r7,r0
;;;336    	while(u16EraseCount--)
;;;337    	{
;;;338    		SPIFlash_EraseStart(psSpiFlashHandler,u32CmdAddr);
;;;339    		u32CmdAddr += u32AddIncreament;
;;;340    
;;;341    		// Wait erase complete
;;;342    		SPIFlash_WaitReady(psSpiFlashHandler);
00000a  e007              B        |L4.28|
                  |L4.12|
00000c  4629              MOV      r1,r5                 ;338
00000e  4638              MOV      r0,r7                 ;338
000010  f7fffffe          BL       SPIFlash_EraseStart
000014  19ad              ADDS     r5,r5,r6              ;339
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       SPIFlash_WaitReady
                  |L4.28|
00001c  4620              MOV      r0,r4                 ;336
00001e  1e64              SUBS     r4,r4,#1              ;336
000020  b2a4              UXTH     r4,r4                 ;336
000022  2800              CMP      r0,#0                 ;336
000024  d1f2              BNE      |L4.12|
;;;343    	}
;;;344    }
000026  bdf0              POP      {r4-r7,pc}
;;;345    
                          ENDP


                          AREA ||i.SPIFlash_EraseChip||, CODE, READONLY, ALIGN=1

                  SPIFlash_EraseChip PROC
;;;346    void
;;;347    SPIFlash_EraseChip(
000000  b510              PUSH     {r4,lr}
;;;348    	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;349    )
;;;350    {
000002  4604              MOV      r4,r0
;;;351    	SPIFlash_EraseChipStart(psSpiFlashHandler);
000004  f7fffffe          BL       SPIFlash_EraseChipStart
;;;352    	// Wait erase complete
;;;353    	SPIFlash_WaitReady(psSpiFlashHandler);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPIFlash_WaitReady
;;;354    }
00000e  bd10              POP      {r4,pc}
;;;355    
                          ENDP


                          AREA ||i.SPIFlash_EraseChipStart||, CODE, READONLY, ALIGN=1

                  SPIFlash_EraseChipStart PROC
;;;709    void
;;;710    SPIFlash_EraseChipStart(
000000  b510              PUSH     {r4,lr}
;;;711    	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;712    )
;;;713    {
000002  4604              MOV      r4,r0
;;;714    	SPIFlash_ChipWriteEnable(psSpiFlashHandler, TRUE);
000004  2101              MOVS     r1,#1
000006  f7fffffe          BL       SPIFlash_ChipWriteEnable
;;;715    	SPIFlash_SendRecOneData(psSpiFlashHandler,SPIFLASH_CHIP_ERASE,8);
00000a  2208              MOVS     r2,#8
00000c  21c7              MOVS     r1,#0xc7
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPIFlash_SendRecOneData
;;;716    }
000014  bd10              POP      {r4,pc}
;;;717    
                          ENDP


                          AREA ||i.SPIFlash_EraseStart||, CODE, READONLY, ALIGN=1

                  SPIFlash_EraseStart PROC
;;;699    void
;;;700    SPIFlash_EraseStart(
000000  b530              PUSH     {r4,r5,lr}
;;;701    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;702    	UINT32 u32CmdAddr
;;;703    )
;;;704    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;705    	SPIFlash_ChipWriteEnable(psSpiFlashHandler, TRUE);
000006  2101              MOVS     r1,#1
000008  f7fffffe          BL       SPIFlash_ChipWriteEnable
;;;706    	SPIFlash_SendRecOneData(psSpiFlashHandler,u32CmdAddr,32);
00000c  2220              MOVS     r2,#0x20
00000e  4621              MOV      r1,r4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       SPIFlash_SendRecOneData
;;;707    }
000016  bd30              POP      {r4,r5,pc}
;;;708    
                          ENDP


                          AREA ||i.SPIFlash_GetChipInfo||, CODE, READONLY, ALIGN=1

                  SPIFlash_GetChipInfo PROC
;;;184    void
;;;185    SPIFlash_GetChipInfo(
000000  b5f8              PUSH     {r3-r7,lr}
;;;186    	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;187    )
;;;188    {
000002  4604              MOV      r4,r0
;;;189    	UINT8  u8DeviceID, u8ManufacID, u8Flag=0;
;;;190    
;;;191    	UINT32 u32Value;
;;;192    	UINT8  u8MemType;
;;;193    	BOOL   bW25P_SPIFlash=FALSE;
;;;194       
;;;195    	// W25P serious do not support JEDEC ID command
;;;196    	// therefore, use Get ID command for W25P serious
;;;197    	// Active chip select
;;;198    	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, psSpiFlashHandler->u8SlaveDevice);
000004  6800              LDR      r0,[r0,#0]
000006  2500              MOVS     r5,#0                 ;189
000008  6881              LDR      r1,[r0,#8]
00000a  462f              MOV      r7,r5                 ;193
00000c  0889              LSRS     r1,r1,#2
00000e  7a22              LDRB     r2,[r4,#8]
000010  0089              LSLS     r1,r1,#2
000012  4311              ORRS     r1,r1,r2
000014  6081              STR      r1,[r0,#8]
;;;199    
;;;200    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler,24);
000016  6820              LDR      r0,[r4,#0]
000018  6801              LDR      r1,[r0,#0]
00001a  22f8              MOVS     r2,#0xf8
00001c  4391              BICS     r1,r1,r2
00001e  31c0              ADDS     r1,r1,#0xc0
000020  6001              STR      r1,[r0,#0]
;;;201    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_TWO);
000022  6820              LDR      r0,[r4,#0]
000024  6801              LDR      r1,[r0,#0]
000026  2203              MOVS     r2,#3
000028  0212              LSLS     r2,r2,#8
00002a  4391              BICS     r1,r1,r2
00002c  31ff              ADDS     r1,r1,#0xff
00002e  3101              ADDS     r1,#1
000030  6001              STR      r1,[r0,#0]
;;;202    	SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,((UINT32)SPIFLASH_DEVICE_ID<<16));
000032  2009              MOVS     r0,#9
000034  6821              LDR      r1,[r4,#0]
000036  0500              LSLS     r0,r0,#20
000038  6208              STR      r0,[r1,#0x20]
;;;203    	SPI_WRITE_TX1(psSpiFlashHandler->psSpiHandler,0);
00003a  6821              LDR      r1,[r4,#0]
00003c  2000              MOVS     r0,#0
00003e  6248              STR      r0,[r1,#0x24]
;;;204    	SPI_GO(psSpiFlashHandler->psSpiHandler);
000040  6820              LDR      r0,[r4,#0]
000042  6801              LDR      r1,[r0,#0]
000044  2201              MOVS     r2,#1
000046  4311              ORRS     r1,r1,r2
000048  6001              STR      r1,[r0,#0]
00004a  6820              LDR      r0,[r4,#0]            ;198
                  |L8.76|
;;;205    	while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
00004c  6801              LDR      r1,[r0,#0]
00004e  43c9              MVNS     r1,r1
000050  07c9              LSLS     r1,r1,#31
000052  d0fb              BEQ      |L8.76|
;;;206    	u32Value = SPI_READ_RX1(psSpiFlashHandler->psSpiHandler);
000054  6941              LDR      r1,[r0,#0x14]
;;;207    #if (defined (__ISD9300__)) 
;;;208    	u32Value = SPI_READ_RX1(psSpiFlashHandler->psSpiHandler);
;;;209    #endif
;;;210    	u8DeviceID = (UINT8)u32Value;
000056  b2ce              UXTB     r6,r1
;;;211    	u8ManufacID = (UINT8)(u32Value>>8);
000058  0409              LSLS     r1,r1,#16
00005a  0e0a              LSRS     r2,r1,#24
;;;212    	// Inactive all slave devices
;;;213    	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, SPI_SS_NONE);
00005c  9200              STR      r2,[sp,#0]
00005e  6881              LDR      r1,[r0,#8]
000060  0889              LSRS     r1,r1,#2
000062  0089              LSLS     r1,r1,#2
000064  6081              STR      r1,[r0,#8]
;;;214    
;;;215    	// Get JEDEC ID command to detect W25X,W25Q MXIC and ATmel series
;;;216    	// Only W25P serious not support JEDEC ID command
;;;217    	SPIFlash_SendRecOneData(psSpiFlashHandler, (UINT32)SPIFLASH_JEDEC_ID<<24, 32);
000066  219f              MOVS     r1,#0x9f
000068  2220              MOVS     r2,#0x20
00006a  0609              LSLS     r1,r1,#24
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       SPIFlash_SendRecOneData
;;;218    	u32Value = SPI_READ_RX0(psSpiFlashHandler->psSpiHandler);
000072  6820              LDR      r0,[r4,#0]
000074  6900              LDR      r0,[r0,#0x10]
;;;219    	if ( ((u32Value>>16)&0xff) == u8ManufacID )
000076  9a00              LDR      r2,[sp,#0]
000078  0201              LSLS     r1,r0,#8
00007a  0e09              LSRS     r1,r1,#24
00007c  4291              CMP      r1,r2
00007e  d110              BNE      |L8.162|
;;;220    	{
;;;221    		u8DeviceID = ((UINT8)u32Value) - 1;
000080  1e42              SUBS     r2,r0,#1
;;;222    		u8MemType  = (UINT8)(u32Value>>8);
000082  0400              LSLS     r0,r0,#16
000084  0e00              LSRS     r0,r0,#24
000086  b2d2              UXTB     r2,r2                 ;221
;;;223    
;;;224    		if( ((u32Value>>16)&0xff) == 0xef )		
000088  29ef              CMP      r1,#0xef
00008a  d003              BEQ      |L8.148|
;;;225    		{
;;;226    			u8Flag = SPIFLASH_FLAG_WINBOND;			
;;;227    			u8DeviceID += u8MemType;
;;;228    
;;;229    			if ( u8MemType == 0x20 ) // W25P80,W25P32,W25P16
;;;230    				bW25P_SPIFlash = TRUE;
;;;231    		}
;;;232    		else
;;;233    		{
;;;234    			u8Flag = SPIFLASH_FLAG_MXIC;
00008c  2520              MOVS     r5,#0x20
00008e  3230              ADDS     r2,r2,#0x30
;;;235    			u8DeviceID += 0x30;
000090  b2d6              UXTB     r6,r2
000092  e00d              B        |L8.176|
                  |L8.148|
000094  1812              ADDS     r2,r2,r0              ;227
000096  2510              MOVS     r5,#0x10              ;226
000098  b2d6              UXTB     r6,r2                 ;227
00009a  2820              CMP      r0,#0x20              ;229
00009c  d108              BNE      |L8.176|
00009e  2701              MOVS     r7,#1                 ;230
0000a0  e006              B        |L8.176|
                  |L8.162|
;;;236    		}
;;;237    	}
;;;238    	else if( ((u32Value>>16)&0xff) == 0x1f ) // Atmel SPIFlash
0000a2  291f              CMP      r1,#0x1f
0000a4  d104              BNE      |L8.176|
;;;239    	{		
;;;240    		u8DeviceID = (((u32Value>>8)&0x1f) - 2 );
0000a6  04c0              LSLS     r0,r0,#19
0000a8  0ec0              LSRS     r0,r0,#27
0000aa  1e80              SUBS     r0,r0,#2
0000ac  b2c6              UXTB     r6,r0
;;;241    		u8Flag = SPIFLASH_FLAG_ATMEL;		
0000ae  2540              MOVS     r5,#0x40
                  |L8.176|
;;;242    	}
;;;243    
;;;244    	if ( (u8DeviceID == 0) || ((u8DeviceID & 0xf) > 7) )
0000b0  2e00              CMP      r6,#0
0000b2  d016              BEQ      |L8.226|
0000b4  0730              LSLS     r0,r6,#28
0000b6  0f00              LSRS     r0,r0,#28
0000b8  2807              CMP      r0,#7
0000ba  d812              BHI      |L8.226|
;;;245    	{
;;;246    		psSpiFlashHandler->u32FlashSize = 0;
;;;247    		return;
;;;248    	}
;;;249    	psSpiFlashHandler->u32FlashSize = 1024*1024/8<<(u8DeviceID&0xf);
0000bc  2201              MOVS     r2,#1
0000be  0452              LSLS     r2,r2,#17
0000c0  4082              LSLS     r2,r2,r0
;;;250    
;;;251    	u8DeviceID &= 0xf0;
0000c2  0930              LSRS     r0,r6,#4
0000c4  0100              LSLS     r0,r0,#4
;;;252    
;;;253    	if(bW25P_SPIFlash)
0000c6  6062              STR      r2,[r4,#4]
0000c8  2f00              CMP      r7,#0
0000ca  d001              BEQ      |L8.208|
                  |L8.204|
;;;254    	{
;;;255    		psSpiFlashHandler->u8Flag = u8Flag|SPIFLASH_FLAG_ERASE_64K;	
0000cc  2001              MOVS     r0,#1
;;;256    		return;
0000ce  e00c              B        |L8.234|
                  |L8.208|
;;;257    	}
;;;258    
;;;259    	if ( u8DeviceID == SPIFLASH_W25X )
0000d0  2840              CMP      r0,#0x40
0000d2  d009              BEQ      |L8.232|
;;;260    		u8Flag = u8Flag|SPIFLASH_FLAG_ERASE_64K|SPIFLASH_FLAG_ERASE_4K;
;;;261    	else if ( u8DeviceID == SPIFLASH_W25Q )
;;;262    		u8Flag = u8Flag|SPIFLASH_FLAG_ERASE_64K|SPIFLASH_FLAG_ERASE_4K|SPIFLASH_FLAG_ERASE_32K;
0000d4  2207              MOVS     r2,#7
0000d6  2850              CMP      r0,#0x50              ;261
0000d8  d009              BEQ      |L8.238|
;;;263    	else if ( u8DeviceID == SPIFLASH_W25P )
0000da  2810              CMP      r0,#0x10
0000dc  d0f6              BEQ      |L8.204|
;;;264    		u8Flag = u8Flag|SPIFLASH_FLAG_ERASE_64K;
;;;265    	else if( ((u32Value>>16)&0xff) == 0x1f ) // Atmel SPIFlash
0000de  291f              CMP      r1,#0x1f
0000e0  d005              BEQ      |L8.238|
                  |L8.226|
;;;266    		u8Flag = u8Flag|SPIFLASH_FLAG_ERASE_64K|SPIFLASH_FLAG_ERASE_4K|SPIFLASH_FLAG_ERASE_32K;
;;;267    	else
;;;268    	{
;;;269    		psSpiFlashHandler->u32FlashSize = 0;
0000e2  2000              MOVS     r0,#0
;;;270    		return;
0000e4  6060              STR      r0,[r4,#4]
;;;271    	}
;;;272    	psSpiFlashHandler->u8Flag = u8Flag;
;;;273    }
0000e6  bdf8              POP      {r3-r7,pc}
                  |L8.232|
0000e8  2003              MOVS     r0,#3                 ;260
                  |L8.234|
0000ea  4305              ORRS     r5,r5,r0              ;264
0000ec  e000              B        |L8.240|
                  |L8.238|
0000ee  4315              ORRS     r5,r5,r2              ;266
                  |L8.240|
0000f0  7265              STRB     r5,[r4,#9]            ;272
0000f2  bdf8              POP      {r3-r7,pc}
;;;274    
                          ENDP


                          AREA ||i.SPIFlash_GetVersion||, CODE, READONLY, ALIGN=1

                  SPIFlash_GetVersion PROC
;;;127    UINT32
;;;128    SPIFlash_GetVersion(void)
000000  2005              MOVS     r0,#5
;;;129    {
;;;130    	return SPIFLASH_VERSION_NUM;
000002  0400              LSLS     r0,r0,#16
;;;131    }
000004  4770              BX       lr
;;;132    
                          ENDP


                          AREA ||i.SPIFlash_GlobalProtect||, CODE, READONLY, ALIGN=1

                  SPIFlash_GlobalProtect PROC
;;;292    void
;;;293    SPIFlash_GlobalProtect(
000000  b530              PUSH     {r4,r5,lr}
;;;294    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;295    	BOOL bEnableGlobalProtect
;;;296    )
;;;297    {
000002  4604              MOV      r4,r0
;;;298    	UINT8 u8Status=0,u8Flag = ((psSpiFlashHandler->u8Flag)&0xf0);
000004  7a40              LDRB     r0,[r0,#9]
000006  460d              MOV      r5,r1                 ;297
000008  0900              LSRS     r0,r0,#4
00000a  2100              MOVS     r1,#0
00000c  0100              LSLS     r0,r0,#4
;;;299    
;;;300    	if( (u8Flag == SPIFLASH_FLAG_WINBOND) || (u8Flag == SPIFLASH_FLAG_MXIC) )
00000e  2810              CMP      r0,#0x10
000010  d007              BEQ      |L10.34|
000012  2820              CMP      r0,#0x20
000014  d005              BEQ      |L10.34|
;;;301    	{
;;;302    		u8Status = SPIFlash_ReadStatusReg(psSpiFlashHandler, eSTATUS_REG1);
;;;303    
;;;304    		if(bEnableGlobalProtect)
;;;305    			u8Status |= 0x1c; // Set 1 to BP0,BP1,BP2 in Status Register 
;;;306    		else
;;;307    		{
;;;308    			if(u8Status&0x20) // Check BP3/TB bit (some flash have it) 
;;;309    				u8Status &= 0xc3; // Set 0 to BP0,BP1,BP2,BP3/TB in Status Register
;;;310    			else
;;;311    				u8Status &= 0xe3; // Set 0 to BP0,BP1,BP2 in Status Register
;;;312    		}
;;;313    
;;;314    		SPIFlash_WriteStatusReg(psSpiFlashHandler, u8Status);
;;;315    	}
;;;316    	else if ( u8Flag == SPIFLASH_FLAG_ATMEL )
000016  2840              CMP      r0,#0x40
000018  d116              BNE      |L10.72|
;;;317    	{
;;;318    		if(bEnableGlobalProtect)
00001a  2d00              CMP      r5,#0
00001c  d011              BEQ      |L10.66|
;;;319    			u8Status = 0x7f;	// writing a 7Fh to the first byte of the Status Register will perform a Global Protect
00001e  217f              MOVS     r1,#0x7f
000020  e00f              B        |L10.66|
                  |L10.34|
000022  2100              MOVS     r1,#0                 ;302
000024  4620              MOV      r0,r4                 ;302
000026  f7fffffe          BL       SPIFlash_ReadStatusReg
00002a  2d00              CMP      r5,#0                 ;304
00002c  d002              BEQ      |L10.52|
00002e  211c              MOVS     r1,#0x1c              ;305
000030  4308              ORRS     r0,r0,r1              ;305
000032  e005              B        |L10.64|
                  |L10.52|
000034  0681              LSLS     r1,r0,#26             ;308
000036  d501              BPL      |L10.60|
000038  21c3              MOVS     r1,#0xc3              ;309
00003a  e000              B        |L10.62|
                  |L10.60|
00003c  21e3              MOVS     r1,#0xe3              ;311
                  |L10.62|
00003e  4008              ANDS     r0,r0,r1              ;309
                  |L10.64|
000040  4601              MOV      r1,r0                 ;309
                  |L10.66|
000042  4620              MOV      r0,r4                 ;314
000044  f7fffffe          BL       SPIFlash_WriteStatusReg
                  |L10.72|
;;;320    		else					// and keep the SPRL bit in the logical "0" state.
;;;321    			u8Status = 0x00;	// writing a 00h to the first byte of the Status Register will perform a Global Unprotec
;;;322    								// without changing the state of the SPRL bit
;;;323    				
;;;324    		SPIFlash_WriteStatusReg(psSpiFlashHandler, u8Status);
;;;325    	}
;;;326    }
000048  bd30              POP      {r4,r5,pc}
;;;327    
                          ENDP


                          AREA ||i.SPIFlash_Open||, CODE, READONLY, ALIGN=1

                  SPIFlash_Open PROC
;;;133    void
;;;134    SPIFlash_Open(
000000  b538              PUSH     {r3-r5,lr}
;;;135    	SPI_T *psSpiHandler,
;;;136    	UINT8 u8DrvSlaveDevice,
;;;137    	UINT32 u32SpiClk,
;;;138    	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;139    )
;;;140    {
;;;141    	psSpiFlashHandler->u8SlaveDevice = u8DrvSlaveDevice;
000002  7219              STRB     r1,[r3,#8]
;;;142    	psSpiFlashHandler->psSpiHandler = psSpiHandler;
;;;143    
;;;144    #if (defined (__N572F072__) || defined (__N572P072__) || defined (__N571P032__))
;;;145    	if (psSpiHandler == SPI0)// Enable high speed pins
;;;146    	   SYS->GPA_HS = 0x1f;
;;;147    	// Configure SPI parameters
;;;148    	// Mode0--> SPI RX latched rising edge of clock; TX latced falling edge of clock; SCLK idle low
;;;149    	SPI_Open(psSpiFlashHandler->psSpiHandler, SPI_MASTER, SPI_MODE_0, u32SpiClk);
;;;150    #elif (defined (__N572F065__))
;;;151    	// Configure SPI parameters
;;;152    	// Mode0--> SPI RX latched rising edge of clock; TX latced falling edge of clock; SCLK idle low
;;;153    	SPI_Open(psSpiFlashHandler->psSpiHandler, SPI_MODE_0, u32SpiClk);
;;;154    #elif (defined (__ISD9100__))
;;;155    	SPI_Open(psSpiFlashHandler->psSpiHandler, SPI_MASTER, SPI_MODE_0, u32SpiClk, 0);
000004  6018              STR      r0,[r3,#0]
000006  461c              MOV      r4,r3                 ;140
000008  2500              MOVS     r5,#0
00000a  4613              MOV      r3,r2
00000c  2204              MOVS     r2,#4
00000e  4629              MOV      r1,r5
000010  9500              STR      r5,[sp,#0]
000012  f7fffffe          BL       SPI_Open
;;;156    #elif (defined (__ISD9300__) )
;;;157    	SPI_Open(psSpiFlashHandler->psSpiHandler, SPI_MASTER, SPI_MODE_0, 8, u32SpiClk);
;;;158    #endif
;;;159    
;;;160    	// bit MSB first
;;;161    	SPI_SET_MSB_FIRST(psSpiFlashHandler->psSpiHandler);
000016  6820              LDR      r0,[r4,#0]
000018  6801              LDR      r1,[r0,#0]
00001a  2201              MOVS     r2,#1
00001c  0292              LSLS     r2,r2,#10
00001e  4391              BICS     r1,r1,r2
000020  6001              STR      r1,[r0,#0]
;;;162    	// send/receve command in big endian; write/read data in little endian
;;;163    	SPI_DISABLE_BYTE_REORDER(psSpiFlashHandler->psSpiHandler);
000022  6820              LDR      r0,[r4,#0]
000024  6801              LDR      r1,[r0,#0]
000026  0292              LSLS     r2,r2,#10
000028  4391              BICS     r1,r1,r2
00002a  6001              STR      r1,[r0,#0]
;;;164    	// transmit/receive word will be executed in one transfer
;;;165    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler, SPI_TXNUM_ONE);
00002c  6820              LDR      r0,[r4,#0]
00002e  6801              LDR      r1,[r0,#0]
000030  2203              MOVS     r2,#3
000032  0212              LSLS     r2,r2,#8
000034  4391              BICS     r1,r1,r2
000036  6001              STR      r1,[r0,#0]
;;;166    	// defalut width 8 bits
;;;167    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, 8);
000038  6820              LDR      r0,[r4,#0]
00003a  6801              LDR      r1,[r0,#0]
00003c  22f8              MOVS     r2,#0xf8
00003e  4391              BICS     r1,r1,r2
000040  3140              ADDS     r1,r1,#0x40
000042  6001              STR      r1,[r0,#0]
;;;168    	// set Slave active level as low selection
;;;169    	SPI_SET_SLAVE_ACTIVE_LEVEL(psSpiFlashHandler->psSpiHandler, SPI_SS_ACTIVE_LOW);
000044  6820              LDR      r0,[r4,#0]
000046  6881              LDR      r1,[r0,#8]
000048  2204              MOVS     r2,#4
00004a  4391              BICS     r1,r1,r2
00004c  6081              STR      r1,[r0,#8]
;;;170    	// set Suspend Interval = 4 SCLK clock cycles for interval between two successive transmit/receive.
;;;171    	SPI_SET_SUSPEND_CYCLE(psSpiFlashHandler->psSpiHandler, 4);
00004e  6820              LDR      r0,[r4,#0]
000050  6801              LDR      r1,[r0,#0]
000052  220f              MOVS     r2,#0xf
000054  0312              LSLS     r2,r2,#12
000056  4391              BICS     r1,r1,r2
000058  2201              MOVS     r2,#1
00005a  0392              LSLS     r2,r2,#14
00005c  1889              ADDS     r1,r1,r2
00005e  6001              STR      r1,[r0,#0]
;;;172    	
;;;173    	psSpiFlashHandler->u32FlashSize = 0;
;;;174    	psSpiFlashHandler->u8Flag = 0;
000060  6065              STR      r5,[r4,#4]
000062  7265              STRB     r5,[r4,#9]
;;;175    	// Inactive chip select
;;;176    	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, SPI_SS_NONE);
000064  6820              LDR      r0,[r4,#0]
000066  6881              LDR      r1,[r0,#8]
000068  0889              LSRS     r1,r1,#2
00006a  0089              LSLS     r1,r1,#2
00006c  6081              STR      r1,[r0,#8]
;;;177    
;;;178    #if (defined (__ISD9300__)) 
;;;179    	SPI_TRIGGER(psSpiFlashHandler->psSpiHandler);
;;;180    #endif
;;;181    	
;;;182    }
00006e  bd38              POP      {r3-r5,pc}
;;;183    
                          ENDP


                          AREA ||i.SPIFlash_PowerDown||, CODE, READONLY, ALIGN=1

                  SPIFlash_PowerDown PROC
;;;356    void
;;;357    SPIFlash_PowerDown(
000000  b500              PUSH     {lr}
;;;358    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;359    	BOOL	bEnable
;;;360    )
;;;361    {
;;;362    	UINT8 u8Cmd;
;;;363    
;;;364    	if ( bEnable )
000002  2900              CMP      r1,#0
000004  d001              BEQ      |L12.10|
;;;365    		u8Cmd = SPIFLASH_POWER_DOWN;
000006  21b9              MOVS     r1,#0xb9
000008  e000              B        |L12.12|
                  |L12.10|
;;;366    	else
;;;367    		u8Cmd = SPIFLASH_RELEASE_PD_ID;
00000a  21ab              MOVS     r1,#0xab
                  |L12.12|
;;;368    
;;;369    	SPIFlash_SendRecOneData(psSpiFlashHandler,u8Cmd,8);
00000c  2208              MOVS     r2,#8
00000e  f7fffffe          BL       SPIFlash_SendRecOneData
;;;370    }
000012  bd00              POP      {pc}
;;;371    
                          ENDP


                          AREA ||i.SPIFlash_Read||, CODE, READONLY, ALIGN=1

                  SPIFlash_Read PROC
;;;533    void
;;;534    SPIFlash_Read(
000000  b570              PUSH     {r4-r6,lr}
;;;535    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;536    	UINT32 u32ByteAddr,
;;;537    	PUINT8 pau8Data,
;;;538    	UINT32 u32DataLen
;;;539    )
;;;540    {
000002  461d              MOV      r5,r3
000004  4616              MOV      r6,r2
000006  4604              MOV      r4,r0
;;;541    	SPIFlash_ReadStart( psSpiFlashHandler, u32ByteAddr );
000008  f7fffffe          BL       SPIFlash_ReadStart
;;;542    	// Read data
;;;543    	SPIFlash_ReadData(psSpiFlashHandler, pau8Data, u32DataLen);
00000c  462a              MOV      r2,r5
00000e  4631              MOV      r1,r6
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       SPIFlash_ReadData
;;;544    	SPIFlash_ReadEnd(psSpiFlashHandler);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       SPIFlash_ReadEnd
;;;545    }
00001c  bd70              POP      {r4-r6,pc}
;;;546    
                          ENDP


                          AREA ||i.SPIFlash_ReadData||, CODE, READONLY, ALIGN=1

                  SPIFlash_ReadData PROC
;;;464    void
;;;465    SPIFlash_ReadData(
000000  b5f0              PUSH     {r4-r7,lr}
;;;466    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;467    	PUINT8 pau8Data,
;;;468    	UINT32 u32DataLen
;;;469    )
;;;470    {
;;;471    	//	PA20 CYHuang12 speedup read function.
;;;472    	UINT32 u32ReadData;
;;;473        UINT8  u8ProcBytes;
;;;474    	
;;;475    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_ONE);
000002  6803              LDR      r3,[r0,#0]
000004  681c              LDR      r4,[r3,#0]
000006  2503              MOVS     r5,#3
000008  022d              LSLS     r5,r5,#8
00000a  43ac              BICS     r4,r4,r5
00000c  601c              STR      r4,[r3,#0]
;;;476    	u8ProcBytes = ((UINT32)pau8Data)%4;
00000e  078b              LSLS     r3,r1,#30
000010  0f9b              LSRS     r3,r3,#30
;;;477        if (u8ProcBytes!=0)
;;;478        {
;;;479            u8ProcBytes = 4 - u8ProcBytes;
;;;480            if ( u8ProcBytes > u32DataLen )
;;;481            	u8ProcBytes = u32DataLen;
;;;482    		
;;;483    		SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler,u8ProcBytes<<3);
000012  24f8              MOVS     r4,#0xf8
000014  2b00              CMP      r3,#0                 ;477
000016  d025              BEQ      |L14.100|
000018  2504              MOVS     r5,#4                 ;479
00001a  1aeb              SUBS     r3,r5,r3              ;479
00001c  4293              CMP      r3,r2                 ;480
00001e  d900              BLS      |L14.34|
000020  b2d3              UXTB     r3,r2                 ;481
                  |L14.34|
000022  6806              LDR      r6,[r0,#0]
000024  6837              LDR      r7,[r6,#0]
000026  43a7              BICS     r7,r7,r4
000028  2b04              CMP      r3,#4
00002a  d021              BEQ      |L14.112|
00002c  00dd              LSLS     r5,r3,#3
                  |L14.46|
00002e  00ed              LSLS     r5,r5,#3
000030  432f              ORRS     r7,r7,r5
000032  6037              STR      r7,[r6,#0]
;;;484    #if (defined (__ISD9300__))
;;;485    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,0);
;;;486    #endif
;;;487    	    SPI_GO(psSpiFlashHandler->psSpiHandler);
000034  6805              LDR      r5,[r0,#0]
000036  682e              LDR      r6,[r5,#0]
000038  2701              MOVS     r7,#1
00003a  433e              ORRS     r6,r6,r7
00003c  602e              STR      r6,[r5,#0]
00003e  6805              LDR      r5,[r0,#0]            ;475
;;;488            u32DataLen-=u8ProcBytes;
000040  1ad2              SUBS     r2,r2,r3
                  |L14.66|
;;;489    
;;;490            while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
000042  682e              LDR      r6,[r5,#0]
000044  43f6              MVNS     r6,r6
000046  07f6              LSLS     r6,r6,#31
000048  d0fb              BEQ      |L14.66|
;;;491            u32ReadData = SPI_READ_RX0(psSpiFlashHandler->psSpiHandler);
00004a  692d              LDR      r5,[r5,#0x10]
;;;492    
;;;493            *pau8Data++ = (UINT8)u32ReadData;
00004c  700d              STRB     r5,[r1,#0]
00004e  1c49              ADDS     r1,r1,#1
;;;494            if ( u8ProcBytes >= 2 )
000050  2b02              CMP      r3,#2
000052  d302              BCC      |L14.90|
;;;495            	*pau8Data++ = (UINT8)(u32ReadData>>8);
000054  0a2e              LSRS     r6,r5,#8
000056  700e              STRB     r6,[r1,#0]
000058  1c49              ADDS     r1,r1,#1
                  |L14.90|
;;;496            if ( u8ProcBytes >= 3 )
00005a  2b03              CMP      r3,#3
00005c  d302              BCC      |L14.100|
;;;497            	*pau8Data++ = (UINT8)(u32ReadData>>16);
00005e  0c2b              LSRS     r3,r5,#16
000060  700b              STRB     r3,[r1,#0]
000062  1c49              ADDS     r1,r1,#1
                  |L14.100|
;;;498        }
;;;499    
;;;500        SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, 32);
000064  6803              LDR      r3,[r0,#0]
000066  681d              LDR      r5,[r3,#0]
000068  43a5              BICS     r5,r5,r4
00006a  601d              STR      r5,[r3,#0]
00006c  2501              MOVS     r5,#1                 ;487
;;;501    
;;;502        while (u32DataLen>=4)
00006e  e00d              B        |L14.140|
                  |L14.112|
000070  2500              MOVS     r5,#0                 ;483
000072  e7dc              B        |L14.46|
                  |L14.116|
;;;503        {
;;;504    #if (defined (__ISD9300__))
;;;505    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,0);
;;;506    #endif
;;;507    		SPI_GO(psSpiFlashHandler->psSpiHandler);
000074  6803              LDR      r3,[r0,#0]
000076  681e              LDR      r6,[r3,#0]
000078  432e              ORRS     r6,r6,r5
00007a  601e              STR      r6,[r3,#0]
00007c  6803              LDR      r3,[r0,#0]            ;475
                  |L14.126|
;;;508    		while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
00007e  681e              LDR      r6,[r3,#0]
000080  43f6              MVNS     r6,r6
000082  07f6              LSLS     r6,r6,#31
000084  d0fb              BEQ      |L14.126|
;;;509            u32ReadData = SPI_READ_RX0(psSpiFlashHandler->psSpiHandler);
000086  691b              LDR      r3,[r3,#0x10]
;;;510            *((UINT32*)pau8Data) = u32ReadData;
000088  1f12              SUBS     r2,r2,#4
00008a  c108              STM      r1!,{r3}
                  |L14.140|
00008c  2a04              CMP      r2,#4                 ;502
00008e  d2f1              BCS      |L14.116|
;;;511            pau8Data+=4;
;;;512            u32DataLen-=4;
;;;513        }
;;;514    
;;;515        if (u32DataLen>0)
000090  2a00              CMP      r2,#0
000092  d01e              BEQ      |L14.210|
;;;516        {
;;;517            SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, u32DataLen<<3);
000094  6806              LDR      r6,[r0,#0]
000096  6837              LDR      r7,[r6,#0]
000098  00d3              LSLS     r3,r2,#3
00009a  43a7              BICS     r7,r7,r4
00009c  2b20              CMP      r3,#0x20
00009e  d100              BNE      |L14.162|
0000a0  2300              MOVS     r3,#0
                  |L14.162|
0000a2  00db              LSLS     r3,r3,#3
0000a4  431f              ORRS     r7,r7,r3
0000a6  6037              STR      r7,[r6,#0]
;;;518    #if (defined (__ISD9300__))
;;;519    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,0);
;;;520    #endif
;;;521    	    SPI_GO(psSpiFlashHandler->psSpiHandler);
0000a8  6803              LDR      r3,[r0,#0]
0000aa  681c              LDR      r4,[r3,#0]
0000ac  432c              ORRS     r4,r4,r5
0000ae  601c              STR      r4,[r3,#0]
0000b0  6800              LDR      r0,[r0,#0]            ;475
                  |L14.178|
;;;522            while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
0000b2  6803              LDR      r3,[r0,#0]
0000b4  43db              MVNS     r3,r3
0000b6  07db              LSLS     r3,r3,#31
0000b8  d0fb              BEQ      |L14.178|
;;;523            u32ReadData = SPI_READ_RX0(psSpiFlashHandler->psSpiHandler);
0000ba  6900              LDR      r0,[r0,#0x10]
;;;524    
;;;525            *pau8Data++ = (UINT8)u32ReadData;
0000bc  7008              STRB     r0,[r1,#0]
0000be  1c49              ADDS     r1,r1,#1
;;;526            if ( u32DataLen >= 2 )
0000c0  2a02              CMP      r2,#2
0000c2  d302              BCC      |L14.202|
;;;527            	*pau8Data++ = (UINT8)(u32ReadData>>8);
0000c4  0a03              LSRS     r3,r0,#8
0000c6  700b              STRB     r3,[r1,#0]
0000c8  1c49              ADDS     r1,r1,#1
                  |L14.202|
;;;528            if ( u32DataLen >= 3 )
0000ca  2a03              CMP      r2,#3
0000cc  d301              BCC      |L14.210|
;;;529            	*pau8Data++ = (UINT8)(u32ReadData>>16);
0000ce  0c00              LSRS     r0,r0,#16
0000d0  7008              STRB     r0,[r1,#0]
                  |L14.210|
;;;530        }
;;;531    }
0000d2  bdf0              POP      {r4-r7,pc}
;;;532    	
                          ENDP


                          AREA ||i.SPIFlash_ReadDataAlign||, CODE, READONLY, ALIGN=1

                  SPIFlash_ReadDataAlign PROC
;;;547    void
;;;548    SPIFlash_ReadDataAlign(
000000  b530              PUSH     {r4,r5,lr}
;;;549    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;550    	PUINT8 pau8Data,
;;;551    	UINT32 u32DataLen
;;;552    )
;;;553    {
;;;554    	UINT32 *pu32Temp = (UINT32 *)pau8Data;
;;;555    	// Read data
;;;556    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, 32);
000002  6803              LDR      r3,[r0,#0]
000004  681c              LDR      r4,[r3,#0]
000006  25f8              MOVS     r5,#0xf8
000008  43ac              BICS     r4,r4,r5
00000a  601c              STR      r4,[r3,#0]
;;;557    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_TWO);
00000c  6803              LDR      r3,[r0,#0]
00000e  681c              LDR      r4,[r3,#0]
000010  2503              MOVS     r5,#3
000012  022d              LSLS     r5,r5,#8
000014  43ac              BICS     r4,r4,r5
000016  34ff              ADDS     r4,r4,#0xff
000018  3401              ADDS     r4,#1
00001a  601c              STR      r4,[r3,#0]
;;;558    
;;;559    	do
;;;560    	{
;;;561    #if (defined (__ISD9300__))
;;;562    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,0);
;;;563    		SPI_WRITE_TX1(psSpiFlashHandler->psSpiHandler,0);
;;;564    		while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
;;;565    		*(UINT32 *)pu32Temp++ = SPI_READ_RX0(psSpiFlashHandler->psSpiHandler);
;;;566    		*(UINT32 *)pu32Temp++ = SPI_READ_RX1(psSpiFlashHandler->psSpiHandler);
;;;567    #else
;;;568    		SPI_GO(psSpiFlashHandler->psSpiHandler);
00001c  2401              MOVS     r4,#1
                  |L15.30|
00001e  6803              LDR      r3,[r0,#0]
000020  681d              LDR      r5,[r3,#0]
000022  4325              ORRS     r5,r5,r4
000024  601d              STR      r5,[r3,#0]
000026  6803              LDR      r3,[r0,#0]            ;556
                  |L15.40|
;;;569            while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
000028  681d              LDR      r5,[r3,#0]
00002a  43ed              MVNS     r5,r5
00002c  07ed              LSLS     r5,r5,#31
00002e  d0fb              BEQ      |L15.40|
;;;570    		*(UINT32 *)pu32Temp++ = SPI_READ_RX0(psSpiFlashHandler->psSpiHandler);
000030  691b              LDR      r3,[r3,#0x10]
;;;571    		*(UINT32 *)pu32Temp++ = SPI_READ_RX1(psSpiFlashHandler->psSpiHandler);
000032  600b              STR      r3,[r1,#0]
000034  6803              LDR      r3,[r0,#0]
000036  695b              LDR      r3,[r3,#0x14]
000038  604b              STR      r3,[r1,#4]
00003a  3108              ADDS     r1,r1,#8
00003c  3a08              SUBS     r2,r2,#8
;;;572    #endif
;;;573    		u32DataLen -= 8;
;;;574    	}while(u32DataLen>0);
00003e  d1ee              BNE      |L15.30|
;;;575    }
000040  bd30              POP      {r4,r5,pc}
;;;576    
                          ENDP


                          AREA ||i.SPIFlash_ReadEnd||, CODE, READONLY, ALIGN=1

                  SPIFlash_ReadEnd PROC
;;;453    void
;;;454    SPIFlash_ReadEnd(
000000  6801              LDR      r1,[r0,#0]
;;;455    	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;456    )
;;;457    {
;;;458    	// Inactive all slave devices
;;;459    	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, SPI_SS_NONE);
000002  688a              LDR      r2,[r1,#8]
000004  0892              LSRS     r2,r2,#2
000006  0092              LSLS     r2,r2,#2
000008  608a              STR      r2,[r1,#8]
;;;460    	// send/receve command in big endian; write/read data in little endian
;;;461    	SPI_DISABLE_BYTE_REORDER(psSpiFlashHandler->psSpiHandler);
00000a  6800              LDR      r0,[r0,#0]
00000c  6801              LDR      r1,[r0,#0]
00000e  2201              MOVS     r2,#1
000010  0512              LSLS     r2,r2,#20
000012  4391              BICS     r1,r1,r2
000014  6001              STR      r1,[r0,#0]
;;;462    }
000016  4770              BX       lr
;;;463    
                          ENDP


                          AREA ||i.SPIFlash_ReadStart||, CODE, READONLY, ALIGN=1

                  SPIFlash_ReadStart PROC
;;;420    void
;;;421    SPIFlash_ReadStart(
000000  b530              PUSH     {r4,r5,lr}
;;;422    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;423    	UINT32 u32ByteAddr
;;;424    )
;;;425    {
;;;426    
;;;427    	// Active chip select
;;;428    	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, psSpiFlashHandler->u8SlaveDevice);
000002  6802              LDR      r2,[r0,#0]
000004  6893              LDR      r3,[r2,#8]
000006  7a04              LDRB     r4,[r0,#8]
000008  089b              LSRS     r3,r3,#2
00000a  009b              LSLS     r3,r3,#2
00000c  4323              ORRS     r3,r3,r4
00000e  6093              STR      r3,[r2,#8]
;;;429    
;;;430    	// Send fast read command
;;;431    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler,32);
000010  6802              LDR      r2,[r0,#0]
000012  6814              LDR      r4,[r2,#0]
000014  23f8              MOVS     r3,#0xf8
000016  439c              BICS     r4,r4,r3
000018  6014              STR      r4,[r2,#0]
;;;432    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_ONE);
00001a  6802              LDR      r2,[r0,#0]
00001c  6814              LDR      r4,[r2,#0]
00001e  2503              MOVS     r5,#3
000020  022d              LSLS     r5,r5,#8
000022  43ac              BICS     r4,r4,r5
000024  6014              STR      r4,[r2,#0]
;;;433    	SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,((UINT32)SPIFLASH_FAST_READ<<24)|(u32ByteAddr&0xffffff));
000026  0209              LSLS     r1,r1,#8
000028  220b              MOVS     r2,#0xb
00002a  0a09              LSRS     r1,r1,#8
00002c  0612              LSLS     r2,r2,#24
00002e  1889              ADDS     r1,r1,r2
000030  6802              LDR      r2,[r0,#0]
000032  6211              STR      r1,[r2,#0x20]
;;;434    	SPI_GO(psSpiFlashHandler->psSpiHandler);
000034  6801              LDR      r1,[r0,#0]
000036  680a              LDR      r2,[r1,#0]
000038  2401              MOVS     r4,#1
00003a  4322              ORRS     r2,r2,r4
00003c  600a              STR      r2,[r1,#0]
00003e  6801              LDR      r1,[r0,#0]            ;428
                  |L17.64|
;;;435    	while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
000040  680a              LDR      r2,[r1,#0]
000042  43d2              MVNS     r2,r2
000044  07d2              LSLS     r2,r2,#31
000046  d0fb              BEQ      |L17.64|
;;;436    	// send dummy clcok
;;;437    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler,8);
000048  680a              LDR      r2,[r1,#0]
00004a  439a              BICS     r2,r2,r3
00004c  3240              ADDS     r2,r2,#0x40
00004e  600a              STR      r2,[r1,#0]
;;;438    
;;;439    #if (defined (__ISD9300__))
;;;440    	SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,0);
;;;441    	while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
;;;442    	SPI_ClearRxFIFO(psSpiFlashHandler->psSpiHandler);
;;;443    #endif
;;;444    	
;;;445    	//SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_ONE);
;;;446    	SPI_GO(psSpiFlashHandler->psSpiHandler);
000050  6801              LDR      r1,[r0,#0]
000052  680a              LDR      r2,[r1,#0]
000054  4322              ORRS     r2,r2,r4
000056  600a              STR      r2,[r1,#0]
000058  6800              LDR      r0,[r0,#0]            ;428
                  |L17.90|
;;;447    	while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
00005a  6801              LDR      r1,[r0,#0]
00005c  43c9              MVNS     r1,r1
00005e  07c9              LSLS     r1,r1,#31
000060  d0fb              BEQ      |L17.90|
;;;448    
;;;449    	// send/receve command in big endian; write/read data in little endian
;;;450    	SPI_ENABLE_BYTE_REORDER(psSpiFlashHandler->psSpiHandler);
000062  6801              LDR      r1,[r0,#0]
000064  2201              MOVS     r2,#1
000066  0512              LSLS     r2,r2,#20
000068  4311              ORRS     r1,r1,r2
00006a  6001              STR      r1,[r0,#0]
;;;451    }
00006c  bd30              POP      {r4,r5,pc}
;;;452    
                          ENDP


                          AREA ||i.SPIFlash_ReadStatusReg||, CODE, READONLY, ALIGN=1

                  SPIFlash_ReadStatusReg PROC
;;;100    UINT8
;;;101    SPIFlash_ReadStatusReg(
000000  b510              PUSH     {r4,lr}
;;;102    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;103    	E_SPIFLASH_STATUS_REGISTER eStatusReg
;;;104    )
;;;105    {
000002  4604              MOV      r4,r0
;;;106    #if (defined (__ISD9300__))
;;;107    	SPI_ClearRxFIFO(psSpiFlashHandler->psSpiHandler);
;;;108    #endif
;;;109    	SPIFlash_SendRecOneData(psSpiFlashHandler,(SPIFLASH_READ_STATUS|eStatusReg)<<8, 16);
000004  2005              MOVS     r0,#5
000006  4301              ORRS     r1,r1,r0
000008  0209              LSLS     r1,r1,#8
00000a  2210              MOVS     r2,#0x10
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPIFlash_SendRecOneData
;;;110    
;;;111    	return (UINT8)SPI_READ_RX0(psSpiFlashHandler->psSpiHandler);
000012  6820              LDR      r0,[r4,#0]
000014  6900              LDR      r0,[r0,#0x10]
000016  b2c0              UXTB     r0,r0
;;;112    }
000018  bd10              POP      {r4,pc}
;;;113    
                          ENDP


                          AREA ||i.SPIFlash_SendRecOneData||, CODE, READONLY, ALIGN=1

                  SPIFlash_SendRecOneData PROC
;;;59     void
;;;60     SPIFlash_SendRecOneData(
000000  b530              PUSH     {r4,r5,lr}
;;;61     	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;62     	UINT32 u32Data,
;;;63     	UINT8  u8DataLen
;;;64     )
;;;65     {
;;;66     	// Active chip select
;;;67     	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, psSpiFlashHandler->u8SlaveDevice);
000002  6803              LDR      r3,[r0,#0]
000004  689c              LDR      r4,[r3,#8]
000006  7a05              LDRB     r5,[r0,#8]
000008  08a4              LSRS     r4,r4,#2
00000a  00a4              LSLS     r4,r4,#2
00000c  432c              ORRS     r4,r4,r5
00000e  609c              STR      r4,[r3,#8]
;;;68     		
;;;69     	// Set transmit Bit Length = u8DataLen
;;;70     	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler,u8DataLen);
000010  6803              LDR      r3,[r0,#0]
000012  681c              LDR      r4,[r3,#0]
000014  25f8              MOVS     r5,#0xf8
000016  43ac              BICS     r4,r4,r5
000018  2a20              CMP      r2,#0x20
00001a  d100              BNE      |L19.30|
00001c  2200              MOVS     r2,#0
                  |L19.30|
00001e  00d2              LSLS     r2,r2,#3
000020  4314              ORRS     r4,r4,r2
000022  601c              STR      r4,[r3,#0]
;;;71     	// Transmit/Receive Numbers = 1
;;;72     	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_ONE);
000024  6802              LDR      r2,[r0,#0]
000026  6813              LDR      r3,[r2,#0]
000028  2403              MOVS     r4,#3
00002a  0224              LSLS     r4,r4,#8
00002c  43a3              BICS     r3,r3,r4
00002e  6013              STR      r3,[r2,#0]
;;;73     	// Write data to TX0 register
;;;74     	SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,u32Data);
000030  6802              LDR      r2,[r0,#0]
000032  6211              STR      r1,[r2,#0x20]
;;;75     
;;;76     	SPI_GO(psSpiFlashHandler->psSpiHandler);
000034  6801              LDR      r1,[r0,#0]
000036  680a              LDR      r2,[r1,#0]
000038  2301              MOVS     r3,#1
00003a  431a              ORRS     r2,r2,r3
00003c  600a              STR      r2,[r1,#0]
00003e  6800              LDR      r0,[r0,#0]            ;67
                  |L19.64|
;;;77     	while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
000040  6801              LDR      r1,[r0,#0]
000042  43c9              MVNS     r1,r1
000044  07c9              LSLS     r1,r1,#31
000046  d0fb              BEQ      |L19.64|
;;;78     
;;;79     	// Inactive chip select
;;;80     	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, SPI_SS_NONE);
000048  6881              LDR      r1,[r0,#8]
00004a  0889              LSRS     r1,r1,#2
00004c  0089              LSLS     r1,r1,#2
00004e  6081              STR      r1,[r0,#8]
;;;81     }
000050  bd30              POP      {r4,r5,pc}
;;;82     
                          ENDP


                          AREA ||i.SPIFlash_WaitReady||, CODE, READONLY, ALIGN=1

                  SPIFlash_WaitReady PROC
;;;91     void
;;;92     SPIFlash_WaitReady(
000000  b510              PUSH     {r4,lr}
;;;93     	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;94     )
;;;95     {
000002  4604              MOV      r4,r0
                  |L20.4|
;;;96     	while( SPIFlash_ReadStatusReg(psSpiFlashHandler, eSTATUS_REG1)& SPIFLASH_BUSY );
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SPIFlash_ReadStatusReg
00000c  07c0              LSLS     r0,r0,#31
00000e  d1f9              BNE      |L20.4|
;;;97     }
000010  bd10              POP      {r4,pc}
;;;98     
                          ENDP


                          AREA ||i.SPIFlash_Write||, CODE, READONLY, ALIGN=1

                  SPIFlash_Write PROC
;;;676    void
;;;677    SPIFlash_Write(
000000  b5f0              PUSH     {r4-r7,lr}
;;;678    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;679    	UINT32 u32Addr,
;;;680    	PUINT8 pau8Data,
;;;681    	UINT32 u32DataLen
;;;682    )
;;;683    {
000002  461c              MOV      r4,r3
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
000008  4607              MOV      r7,r0
;;;684    	UINT32 u32WriteCount;
;;;685    	
;;;686    	while(u32DataLen!=0)
;;;687    	{
;;;688    		SPIFlash_WriteStart(psSpiFlashHandler, u32Addr);
;;;689    		u32WriteCount = SPIFlash_WriteData(psSpiFlashHandler,u32Addr, pau8Data, u32DataLen);
;;;690    		u32Addr += u32WriteCount;
;;;691    		pau8Data += u32WriteCount;
;;;692    		u32DataLen -= u32WriteCount;
;;;693    		SPIFlash_WriteEnd(psSpiFlashHandler);
;;;694    		// Wait write completely
;;;695    		SPIFlash_WaitReady(psSpiFlashHandler);
00000a  e012              B        |L21.50|
                  |L21.12|
00000c  4631              MOV      r1,r6                 ;688
00000e  4638              MOV      r0,r7                 ;688
000010  f7fffffe          BL       SPIFlash_WriteStart
000014  4623              MOV      r3,r4                 ;689
000016  462a              MOV      r2,r5                 ;689
000018  4631              MOV      r1,r6                 ;689
00001a  4638              MOV      r0,r7                 ;689
00001c  f7fffffe          BL       SPIFlash_WriteData
000020  1836              ADDS     r6,r6,r0              ;690
000022  182d              ADDS     r5,r5,r0              ;691
000024  1a24              SUBS     r4,r4,r0              ;692
000026  4638              MOV      r0,r7                 ;693
000028  f7fffffe          BL       SPIFlash_WriteEnd
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       SPIFlash_WaitReady
                  |L21.50|
000032  2c00              CMP      r4,#0                 ;686
000034  d1ea              BNE      |L21.12|
;;;696    	}
;;;697    }
000036  bdf0              POP      {r4-r7,pc}
;;;698    
                          ENDP


                          AREA ||i.SPIFlash_WriteData||, CODE, READONLY, ALIGN=1

                  SPIFlash_WriteData PROC
;;;611    UINT32
;;;612    SPIFlash_WriteData(
000000  b5f0              PUSH     {r4-r7,lr}
;;;613    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;614    	UINT32 u32SPIAddr,
;;;615    	PUINT8 pau8Data,
;;;616    	UINT32 u32DataLen
;;;617    )
;;;618    {
;;;619    	UINT32 u32WriteCount, u32TotalWriteCount, u32ProcessByte, u32WriteData;
;;;620    	
;;;621    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_ONE);
000002  6805              LDR      r5,[r0,#0]
000004  682c              LDR      r4,[r5,#0]
000006  2603              MOVS     r6,#3
000008  0236              LSLS     r6,r6,#8
00000a  43b4              BICS     r4,r4,r6
00000c  602c              STR      r4,[r5,#0]
;;;622    	
;;;623    	u32WriteCount = 256;
00000e  24ff              MOVS     r4,#0xff
000010  3401              ADDS     r4,#1
;;;624    	if ( u32SPIAddr%256 )
000012  060d              LSLS     r5,r1,#24
000014  0e2d              LSRS     r5,r5,#24
000016  d001              BEQ      |L22.28|
;;;625    		 u32WriteCount -= u32SPIAddr%256;
000018  b2c9              UXTB     r1,r1
00001a  1a64              SUBS     r4,r4,r1
                  |L22.28|
;;;626    	if ( u32WriteCount > u32DataLen )
00001c  429c              CMP      r4,r3
00001e  d900              BLS      |L22.34|
;;;627    		u32WriteCount = u32DataLen;
000020  461c              MOV      r4,r3
                  |L22.34|
;;;628    	u32TotalWriteCount = u32WriteCount;
000022  4625              MOV      r5,r4
;;;629    
;;;630    	if ( ((UINT32)pau8Data)%4 )
000024  0791              LSLS     r1,r2,#30
000026  d02c              BEQ      |L22.130|
;;;631    	{
;;;632    		u32ProcessByte = 4 - ((UINT32)pau8Data)%4;
000028  0791              LSLS     r1,r2,#30
00002a  0f89              LSRS     r1,r1,#30
00002c  2304              MOVS     r3,#4
00002e  1a59              SUBS     r1,r3,r1
;;;633    		if ( u32ProcessByte > u32WriteCount )
000030  42a1              CMP      r1,r4
000032  d900              BLS      |L22.54|
;;;634    			u32ProcessByte = u32WriteCount;
000034  4629              MOV      r1,r5
                  |L22.54|
;;;635    		//SPIFlash_SendDataLess4Bytes(psSpiFlashHandler->psSpiHandler, pau8Data, u32ProcessByte);
;;;636    		SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, u32ProcessByte*8);
000036  6806              LDR      r6,[r0,#0]
000038  6837              LDR      r7,[r6,#0]
00003a  23f8              MOVS     r3,#0xf8
00003c  439f              BICS     r7,r7,r3
00003e  00cb              LSLS     r3,r1,#3
000040  2b20              CMP      r3,#0x20
000042  d100              BNE      |L22.70|
000044  2300              MOVS     r3,#0
                  |L22.70|
000046  00db              LSLS     r3,r3,#3
000048  431f              ORRS     r7,r7,r3
00004a  6037              STR      r7,[r6,#0]
;;;637    		u32WriteData = *pau8Data ++;
00004c  7813              LDRB     r3,[r2,#0]
00004e  1c52              ADDS     r2,r2,#1
;;;638    		if ( u32ProcessByte >= 2 )
000050  2902              CMP      r1,#2
000052  d303              BCC      |L22.92|
;;;639    			u32WriteData |= (*pau8Data ++)<<8;
000054  7816              LDRB     r6,[r2,#0]
000056  0236              LSLS     r6,r6,#8
000058  4333              ORRS     r3,r3,r6
00005a  1c52              ADDS     r2,r2,#1
                  |L22.92|
;;;640    		if ( u32ProcessByte == 3 )
00005c  2903              CMP      r1,#3
00005e  d103              BNE      |L22.104|
;;;641    			u32WriteData |= (*pau8Data ++)<<16;
000060  7816              LDRB     r6,[r2,#0]
000062  0436              LSLS     r6,r6,#16
000064  4333              ORRS     r3,r3,r6
000066  1c52              ADDS     r2,r2,#1
                  |L22.104|
;;;642    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,u32WriteData);
000068  6806              LDR      r6,[r0,#0]
00006a  6233              STR      r3,[r6,#0x20]
;;;643    		SPI_GO(psSpiFlashHandler->psSpiHandler);
00006c  6803              LDR      r3,[r0,#0]
00006e  681e              LDR      r6,[r3,#0]
000070  2701              MOVS     r7,#1
000072  433e              ORRS     r6,r6,r7
000074  601e              STR      r6,[r3,#0]
000076  6803              LDR      r3,[r0,#0]            ;621
                  |L22.120|
;;;644    		while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
000078  681e              LDR      r6,[r3,#0]
00007a  43f6              MVNS     r6,r6
00007c  07f6              LSLS     r6,r6,#31
00007e  d0fb              BEQ      |L22.120|
;;;645    		u32WriteCount -=  u32ProcessByte;
000080  1a64              SUBS     r4,r4,r1
                  |L22.130|
;;;646    		//pau8Data += u32ProcessByte;
;;;647    	}
;;;648    
;;;649    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, 32);
000082  6801              LDR      r1,[r0,#0]
000084  680b              LDR      r3,[r1,#0]
000086  26f8              MOVS     r6,#0xf8
000088  43b3              BICS     r3,r3,r6
00008a  600b              STR      r3,[r1,#0]
;;;650    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_ONE);
00008c  6801              LDR      r1,[r0,#0]
00008e  680b              LDR      r3,[r1,#0]
000090  2703              MOVS     r7,#3
000092  023f              LSLS     r7,r7,#8
000094  43bb              BICS     r3,r3,r7
000096  600b              STR      r3,[r1,#0]
000098  2301              MOVS     r3,#1                 ;643
;;;651    	while(u32WriteCount >= 4)
00009a  e00c              B        |L22.182|
                  |L22.156|
;;;652    	{
;;;653    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,*((PUINT32)pau8Data));
00009c  ca02              LDM      r2!,{r1}
00009e  6807              LDR      r7,[r0,#0]
0000a0  6239              STR      r1,[r7,#0x20]
;;;654    		SPI_GO(psSpiFlashHandler->psSpiHandler);
0000a2  6801              LDR      r1,[r0,#0]
0000a4  680f              LDR      r7,[r1,#0]
0000a6  431f              ORRS     r7,r7,r3
0000a8  600f              STR      r7,[r1,#0]
0000aa  6801              LDR      r1,[r0,#0]            ;621
0000ac  1f24              SUBS     r4,r4,#4              ;621
                  |L22.174|
;;;655    		pau8Data += 4;
;;;656    		u32WriteCount -= 4;
;;;657    		while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
0000ae  680f              LDR      r7,[r1,#0]
0000b0  43ff              MVNS     r7,r7
0000b2  07ff              LSLS     r7,r7,#31
0000b4  d0fb              BEQ      |L22.174|
                  |L22.182|
0000b6  2c04              CMP      r4,#4                 ;651
0000b8  d2f0              BCS      |L22.156|
;;;658    	}
;;;659    	if (u32WriteCount)
0000ba  2c00              CMP      r4,#0
0000bc  d021              BEQ      |L22.258|
;;;660    	{
;;;661    		//SPIFlash_SendDataLess4Bytes(psSpiFlashHandler->psSpiHandler, pau8Data, u32WriteCount);
;;;662    		SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, u32WriteCount*8);
0000be  6801              LDR      r1,[r0,#0]
0000c0  680f              LDR      r7,[r1,#0]
0000c2  43b7              BICS     r7,r7,r6
0000c4  00e6              LSLS     r6,r4,#3
0000c6  2e20              CMP      r6,#0x20
0000c8  d100              BNE      |L22.204|
0000ca  2600              MOVS     r6,#0
                  |L22.204|
0000cc  00f6              LSLS     r6,r6,#3
0000ce  4337              ORRS     r7,r7,r6
0000d0  600f              STR      r7,[r1,#0]
;;;663    		u32WriteData = *pau8Data ++;
0000d2  7811              LDRB     r1,[r2,#0]
0000d4  1c52              ADDS     r2,r2,#1
;;;664    		if ( u32WriteCount >= 2 )
0000d6  2c02              CMP      r4,#2
0000d8  d303              BCC      |L22.226|
;;;665    			u32WriteData |= (*pau8Data ++)<<8;
0000da  7816              LDRB     r6,[r2,#0]
0000dc  0236              LSLS     r6,r6,#8
0000de  4331              ORRS     r1,r1,r6
0000e0  1c52              ADDS     r2,r2,#1
                  |L22.226|
;;;666    		if ( u32WriteCount == 3 )
0000e2  2c03              CMP      r4,#3
0000e4  d102              BNE      |L22.236|
;;;667    			u32WriteData |= (*pau8Data ++)<<16;
0000e6  7812              LDRB     r2,[r2,#0]
0000e8  0412              LSLS     r2,r2,#16
0000ea  4311              ORRS     r1,r1,r2
                  |L22.236|
;;;668    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,u32WriteData);
0000ec  6802              LDR      r2,[r0,#0]
0000ee  6211              STR      r1,[r2,#0x20]
;;;669    		SPI_GO(psSpiFlashHandler->psSpiHandler);
0000f0  6801              LDR      r1,[r0,#0]
0000f2  680a              LDR      r2,[r1,#0]
0000f4  431a              ORRS     r2,r2,r3
0000f6  600a              STR      r2,[r1,#0]
0000f8  6800              LDR      r0,[r0,#0]            ;621
                  |L22.250|
;;;670    		while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
0000fa  6801              LDR      r1,[r0,#0]
0000fc  43c9              MVNS     r1,r1
0000fe  07c9              LSLS     r1,r1,#31
000100  d0fb              BEQ      |L22.250|
                  |L22.258|
;;;671    		//pau8Data += u32WriteCount;
;;;672    	}
;;;673    	return u32TotalWriteCount;
000102  4628              MOV      r0,r5
;;;674    }
000104  bdf0              POP      {r4-r7,pc}
;;;675    
                          ENDP


                          AREA ||i.SPIFlash_WriteDataAlign||, CODE, READONLY, ALIGN=1

                  SPIFlash_WriteDataAlign PROC
;;;718    void
;;;719    SPIFlash_WriteDataAlign(
000000  b530              PUSH     {r4,r5,lr}
;;;720    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;721    	PUINT8 pau8Data
;;;722    )
;;;723    {
;;;724    	UINT32 u32DataLen;
;;;725    	UINT32 *pu32Temp = (UINT32 *)pau8Data;
;;;726    	
;;;727    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler, 32);
000002  6802              LDR      r2,[r0,#0]
000004  6813              LDR      r3,[r2,#0]
000006  24f8              MOVS     r4,#0xf8
000008  43a3              BICS     r3,r3,r4
00000a  6013              STR      r3,[r2,#0]
;;;728    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_TWO);
00000c  6802              LDR      r2,[r0,#0]
00000e  6813              LDR      r3,[r2,#0]
000010  2403              MOVS     r4,#3
000012  0224              LSLS     r4,r4,#8
000014  43a3              BICS     r3,r3,r4
000016  33ff              ADDS     r3,r3,#0xff
000018  3301              ADDS     r3,#1
00001a  6013              STR      r3,[r2,#0]
;;;729    	u32DataLen = 256;
00001c  23ff              MOVS     r3,#0xff
00001e  3301              ADDS     r3,#1
;;;730    	do
;;;731    	{
;;;732    		//DrvSPI_BurstWriteData(psSpiHandler,(PUINT32)pau8Data);
;;;733    		SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler, *pu32Temp++);
;;;734    		SPI_WRITE_TX1(psSpiFlashHandler->psSpiHandler, *pu32Temp++);
;;;735    		SPI_GO(psSpiFlashHandler->psSpiHandler);
000020  2501              MOVS     r5,#1
                  |L23.34|
000022  6804              LDR      r4,[r0,#0]            ;733
000024  680a              LDR      r2,[r1,#0]            ;733
000026  6222              STR      r2,[r4,#0x20]         ;733
000028  6804              LDR      r4,[r0,#0]            ;734
00002a  684a              LDR      r2,[r1,#4]            ;734
00002c  6262              STR      r2,[r4,#0x24]         ;734
00002e  6802              LDR      r2,[r0,#0]
000030  6814              LDR      r4,[r2,#0]
000032  432c              ORRS     r4,r4,r5
000034  6014              STR      r4,[r2,#0]
000036  6802              LDR      r2,[r0,#0]            ;727
000038  3108              ADDS     r1,r1,#8              ;727
                  |L23.58|
;;;736    		//pau8Data += 8;
;;;737    		while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
00003a  6814              LDR      r4,[r2,#0]
00003c  43e4              MVNS     r4,r4
00003e  07e4              LSLS     r4,r4,#31
000040  d0fb              BEQ      |L23.58|
000042  3b08              SUBS     r3,r3,#8
;;;738    	}while(	(u32DataLen -= 8) != 0 );
000044  d1ed              BNE      |L23.34|
;;;739    }
000046  bd30              POP      {r4,r5,pc}
;;;740    
                          ENDP


                          AREA ||i.SPIFlash_WriteEnd||, CODE, READONLY, ALIGN=1

                  SPIFlash_WriteEnd PROC
;;;394    void
;;;395    SPIFlash_WriteEnd(
000000  6801              LDR      r1,[r0,#0]
;;;396    	S_SPIFLASH_HANDLER *psSpiFlashHandler
;;;397    )
;;;398    {
;;;399    	// Inactive all slave devices
;;;400    	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, SPI_SS_NONE);
000002  688a              LDR      r2,[r1,#8]
000004  0892              LSRS     r2,r2,#2
000006  0092              LSLS     r2,r2,#2
000008  608a              STR      r2,[r1,#8]
;;;401    	// send/receve command in big endian; write/read data in little endian
;;;402    	SPI_DISABLE_BYTE_REORDER(psSpiFlashHandler->psSpiHandler);
00000a  6800              LDR      r0,[r0,#0]
00000c  6801              LDR      r1,[r0,#0]
00000e  2201              MOVS     r2,#1
000010  0512              LSLS     r2,r2,#20
000012  4391              BICS     r1,r1,r2
000014  6001              STR      r1,[r0,#0]
;;;403    }
000016  4770              BX       lr
;;;404    
                          ENDP


                          AREA ||i.SPIFlash_WritePage||, CODE, READONLY, ALIGN=1

                  SPIFlash_WritePage PROC
;;;405    void
;;;406    SPIFlash_WritePage(
000000  b530              PUSH     {r4,r5,lr}
;;;407    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;408    	UINT32 u32PageAddr,
;;;409    	PUINT8 pau8Data
;;;410    )
;;;411    {
000002  4615              MOV      r5,r2
000004  4604              MOV      r4,r0
;;;412    
;;;413    	SPIFlash_WriteStart(psSpiFlashHandler, u32PageAddr);
000006  f7fffffe          BL       SPIFlash_WriteStart
;;;414    	SPIFlash_WriteDataAlign(psSpiFlashHandler, pau8Data);
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPIFlash_WriteDataAlign
;;;415    	SPIFlash_WriteEnd(psSpiFlashHandler);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       SPIFlash_WriteEnd
;;;416    
;;;417    	SPIFlash_WaitReady(psSpiFlashHandler);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       SPIFlash_WaitReady
;;;418    }
00001e  bd30              POP      {r4,r5,pc}
;;;419    
                          ENDP


                          AREA ||i.SPIFlash_WriteStart||, CODE, READONLY, ALIGN=1

                  SPIFlash_WriteStart PROC
;;;372    void
;;;373    SPIFlash_WriteStart(
000000  b530              PUSH     {r4,r5,lr}
;;;374    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;375    	UINT32 u32ByteAddr
;;;376    )
;;;377    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;378    
;;;379    	SPIFlash_ChipWriteEnable(psSpiFlashHandler, TRUE);
000006  2101              MOVS     r1,#1
000008  f7fffffe          BL       SPIFlash_ChipWriteEnable
;;;380    
;;;381    	// Active chip select
;;;382    	SPI_SET_SS(psSpiFlashHandler->psSpiHandler, psSpiFlashHandler->u8SlaveDevice);
00000c  6820              LDR      r0,[r4,#0]
00000e  6881              LDR      r1,[r0,#8]
000010  7a22              LDRB     r2,[r4,#8]
000012  0889              LSRS     r1,r1,#2
000014  0089              LSLS     r1,r1,#2
000016  4311              ORRS     r1,r1,r2
000018  6081              STR      r1,[r0,#8]
;;;383    
;;;384    	// Send write page command
;;;385    	SPI_SET_DATA_WIDTH(psSpiFlashHandler->psSpiHandler,32);
00001a  6820              LDR      r0,[r4,#0]
00001c  6801              LDR      r1,[r0,#0]
00001e  22f8              MOVS     r2,#0xf8
000020  4391              BICS     r1,r1,r2
000022  6001              STR      r1,[r0,#0]
;;;386    	SPI_SET_TX_NUM(psSpiFlashHandler->psSpiHandler,SPI_TXNUM_ONE);
000024  6820              LDR      r0,[r4,#0]
000026  6801              LDR      r1,[r0,#0]
000028  2203              MOVS     r2,#3
00002a  0212              LSLS     r2,r2,#8
00002c  4391              BICS     r1,r1,r2
00002e  6001              STR      r1,[r0,#0]
;;;387    	SPI_WRITE_TX0(psSpiFlashHandler->psSpiHandler,((UINT32)SPIFLASH_PAGE_PROGRAM<<24)|u32ByteAddr);
000030  2001              MOVS     r0,#1
000032  0640              LSLS     r0,r0,#25
000034  4305              ORRS     r5,r5,r0
000036  6820              LDR      r0,[r4,#0]
000038  6205              STR      r5,[r0,#0x20]
;;;388    	SPI_GO(psSpiFlashHandler->psSpiHandler);
00003a  6820              LDR      r0,[r4,#0]
00003c  6801              LDR      r1,[r0,#0]
00003e  2201              MOVS     r2,#1
000040  4311              ORRS     r1,r1,r2
000042  6001              STR      r1,[r0,#0]
000044  6820              LDR      r0,[r4,#0]            ;382
                  |L26.70|
;;;389    	while( SPI_IS_BUSY(psSpiFlashHandler->psSpiHandler) );
000046  6801              LDR      r1,[r0,#0]
000048  43c9              MVNS     r1,r1
00004a  07c9              LSLS     r1,r1,#31
00004c  d0fb              BEQ      |L26.70|
;;;390    	// send/receve command in big endian; write/read data in little endian
;;;391    	SPI_ENABLE_BYTE_REORDER(psSpiFlashHandler->psSpiHandler);
00004e  6801              LDR      r1,[r0,#0]
000050  2201              MOVS     r2,#1
000052  0512              LSLS     r2,r2,#20
000054  4311              ORRS     r1,r1,r2
000056  6001              STR      r1,[r0,#0]
;;;392    }
000058  bd30              POP      {r4,r5,pc}
;;;393    
                          ENDP


                          AREA ||i.SPIFlash_WriteStatusReg||, CODE, READONLY, ALIGN=1

                  SPIFlash_WriteStatusReg PROC
;;;114    void
;;;115    SPIFlash_WriteStatusReg(
000000  b530              PUSH     {r4,r5,lr}
;;;116    	S_SPIFLASH_HANDLER *psSpiFlashHandler,
;;;117    	UINT8 u8Status
;;;118    )
;;;119    {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;120    	SPIFlash_ChipWriteEnable(psSpiFlashHandler, TRUE);
000006  2101              MOVS     r1,#1
000008  f7fffffe          BL       SPIFlash_ChipWriteEnable
;;;121    
;;;122    	SPIFlash_SendRecOneData(psSpiFlashHandler,(SPIFLASH_WRITE_STATUS<<8)|u8Status, 16);
00000c  1de1              ADDS     r1,r4,#7
00000e  2210              MOVS     r2,#0x10
000010  31f9              ADDS     r1,r1,#0xf9
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       SPIFlash_SendRecOneData
;;;123    	SPIFlash_WaitReady(psSpiFlashHandler);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       SPIFlash_WaitReady
;;;124    }
00001e  bd30              POP      {r4,r5,pc}
;;;125    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Storage\\src\\SPIFlash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_SPIFlash_c_d9a4bd84____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_SPIFlash_c_d9a4bd84____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_SPIFlash_c_d9a4bd84____REVSH|
#line 132
|__asm___10_SPIFlash_c_d9a4bd84____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
