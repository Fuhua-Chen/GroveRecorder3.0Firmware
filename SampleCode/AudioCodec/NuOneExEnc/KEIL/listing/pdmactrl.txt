; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\pdmactrl.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\pdmactrl.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\pdmactrl.crf ..\..\..\..\Library\Framework\src\PdmaCtrl.c]
                          THUMB

                          AREA ||i.NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_ClearPendingIRQ PROC
;;;555     */
;;;556    __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;557    {
;;;558      NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L1.16|
00000a  6011              STR      r1,[r2,#0]
;;;559    }
00000c  4770              BX       lr
;;;560    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0xe000e280

                          AREA ||i.PdmaCtrl_Close||, CODE, READONLY, ALIGN=2

                  PdmaCtrl_Close PROC
;;;74     
;;;75     void PdmaCtrl_Close(UINT32 u32Ch)
000000  0201              LSLS     r1,r0,#8
;;;76     {
;;;77     	PDMA_STOP(u32Ch);
000002  4a09              LDR      r2,|L2.40|
000004  1889              ADDS     r1,r1,r2
000006  6809              LDR      r1,[r1,#0]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  0202              LSLS     r2,r0,#8
00000e  4b06              LDR      r3,|L2.40|
000010  18d2              ADDS     r2,r2,r3
000012  6011              STR      r1,[r2,#0]
;;;78     	PDMA_GCR->GLOCTL &= ~((1<<u32Ch)<<8);
000014  4905              LDR      r1,|L2.44|
000016  6809              LDR      r1,[r1,#0]
000018  2201              MOVS     r2,#1
00001a  4082              LSLS     r2,r2,r0
00001c  0212              LSLS     r2,r2,#8
00001e  4391              BICS     r1,r1,r2
000020  4a02              LDR      r2,|L2.44|
000022  6011              STR      r1,[r2,#0]
;;;79     }
000024  4770              BX       lr
;;;80     
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x50008000
                  |L2.44|
                          DCD      0x50008f00

                          AREA ||i.PdmaCtrl_Init||, CODE, READONLY, ALIGN=2

                  PdmaCtrl_Init PROC
;;;10     //---------------------------------------------------------------------------
;;;11     void PdmaCtrl_Init(void)
000000  b510              PUSH     {r4,lr}
;;;12     {
;;;13     	/* Enable PDMA clock */
;;;14     	CLK_EnableModuleClock(PDMA_MODULE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;15     	/* Reset IP */
;;;16     	SYS_ResetModule(PDMA_RST);
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       SYS_ResetModule
;;;17     	
;;;18     	/* Enable NVIC interrupt*/
;;;19     	NVIC_ClearPendingIRQ(PDMA_IRQn);
00000e  201a              MOVS     r0,#0x1a
000010  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;20     	NVIC_EnableIRQ(PDMA_IRQn);
000014  201a              MOVS     r0,#0x1a
000016  2101              MOVS     r1,#1
000018  4081              LSLS     r1,r1,r0
00001a  4a02              LDR      r2,|L3.36|
00001c  6011              STR      r1,[r2,#0]
00001e  bf00              NOP      
;;;21     }
000020  bd10              POP      {r4,pc}
;;;22     
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      0xe000e100

                          AREA ||i.PdmaCtrl_Open||, CODE, READONLY, ALIGN=2

                  PdmaCtrl_Open PROC
;;;22     
;;;23     void PdmaCtrl_Open(
000000  b57c              PUSH     {r2-r6,lr}
;;;24     	UINT32 u32Ch,
;;;25     	UINT32 u32ServiceSel
;;;26     )
;;;27     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;28     
;;;29     	PDMA_T *pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000006  0228              LSLS     r0,r5,#8
000008  4922              LDR      r1,|L4.148|
00000a  1846              ADDS     r6,r0,r1
;;;30     	volatile int32_t i = 10;
00000c  200a              MOVS     r0,#0xa
00000e  9001              STR      r0,[sp,#4]
;;;31     	
;;;32     	//PDMA Controller Channel Clock Enable
;;;33     	PDMA_Open( 1<<u32Ch );	
000010  2101              MOVS     r1,#1
000012  40a9              LSLS     r1,r1,r5
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       PDMA_Open
;;;34     	//Writing 1 to this bit will reset the internal state machine and pointers
;;;35     	pdma->DSCT_CTL |= PDMA_DSCT_CTL_SWRST_Msk;
00001a  6830              LDR      r0,[r6,#0]
00001c  2102              MOVS     r1,#2
00001e  4308              ORRS     r0,r0,r1
000020  6030              STR      r0,[r6,#0]
;;;36     	while(i--);                                  //Need a delay to allow reset
000022  bf00              NOP      
                  |L4.36|
000024  9801              LDR      r0,[sp,#4]
000026  1e41              SUBS     r1,r0,#1
000028  9101              STR      r1,[sp,#4]
00002a  2800              CMP      r0,#0
00002c  d1fa              BNE      |L4.36|
;;;37     	
;;;38     	
;;;39     	//PDMA channel is connected to which peripheral transmit request.
;;;40     	PDMA_SetTransferMode( u32Ch,(u32ServiceSel>>24), 0, 0 );
00002e  0e21              LSRS     r1,r4,#24
000030  2300              MOVS     r3,#0
000032  461a              MOV      r2,r3
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       PDMA_SetTransferMode
;;;41     	//Transfer Source address is incremented/fixed/wrapped.
;;;42     	//Transfer Destination Address is incremented/fixed/wrapped.
;;;43     	PDMA_SetTransferAddr( u32Ch, 0, (u32ServiceSel&PDMA_DSCT_CTL_SASEL_Msk), 0, (u32ServiceSel&PDMA_DSCT_CTL_DASEL_Msk));
00003a  4620              MOV      r0,r4
00003c  21c0              MOVS     r1,#0xc0
00003e  4008              ANDS     r0,r0,r1
000040  9000              STR      r0,[sp,#0]
000042  2030              MOVS     r0,#0x30
000044  4020              ANDS     r0,r0,r4
000046  4602              MOV      r2,r0
000048  2300              MOVS     r3,#0
00004a  4619              MOV      r1,r3
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       PDMA_SetTransferAddr
;;;44     	//8/16/32 bits is transferred for every PDMA operation	
;;;45     	PDMA_SetTransferCnt( u32Ch, (u32ServiceSel&PDMA_DSCT_CTL_TXWIDTH_Msk), 0 );
000052  2003              MOVS     r0,#3
000054  04c0              LSLS     r0,r0,#19
000056  4020              ANDS     r0,r0,r4
000058  4601              MOV      r1,r0
00005a  2200              MOVS     r2,#0
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       PDMA_SetTransferCnt
;;;46     	//Memory to IP mode (SRAM-to-APB)/(SRAM-to-APB)/(SRAM-to-SRAM).
;;;47     	PDMA_SetTransferDirection( u32Ch, (u32ServiceSel&PDMA_DSCT_CTL_MODESEL_Msk) );	
000062  200c              MOVS     r0,#0xc
000064  4020              ANDS     r0,r0,r4
000066  4601              MOV      r1,r0
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       PDMA_SetTransferDirection
;;;48     	//Wrap Interrupt: Both half and end buffer.
;;;49     	pdma->DSCT_CTL |= (u32ServiceSel&PDMA_DSCT_CTL_WAINTSEL_Msk);
00006e  6830              LDR      r0,[r6,#0]
000070  210f              MOVS     r1,#0xf
000072  0309              LSLS     r1,r1,#12
000074  4021              ANDS     r1,r1,r4
000076  4308              ORRS     r0,r0,r1
000078  6030              STR      r0,[r6,#0]
;;;50     	
;;;51     	//Interrupt Enable, shot or wrap
;;;52     	PDMA_CLR_CH_INT_FLAG(u32Ch, 0x00000503);
00007a  4807              LDR      r0,|L4.152|
00007c  0229              LSLS     r1,r5,#8
00007e  4a05              LDR      r2,|L4.148|
000080  1889              ADDS     r1,r1,r2
000082  6248              STR      r0,[r1,#0x24]
;;;53     	PDMA_EnableInt( u32Ch, (u32ServiceSel&0x00000f00)>>8);
000084  200f              MOVS     r0,#0xf
000086  0200              LSLS     r0,r0,#8
000088  4020              ANDS     r0,r0,r4
00008a  0a01              LSRS     r1,r0,#8
00008c  4628              MOV      r0,r5
00008e  f7fffffe          BL       PDMA_EnableInt
;;;54     
;;;55     }
000092  bd7c              POP      {r2-r6,pc}
;;;56     
                          ENDP

                  |L4.148|
                          DCD      0x50008000
                  |L4.152|
                          DCD      0x00000503

                          AREA ||i.PdmaCtrl_Start||, CODE, READONLY, ALIGN=2

                  PdmaCtrl_Start PROC
;;;56     
;;;57     void PdmaCtrl_Start(
000000  b5f8              PUSH     {r3-r7,lr}
;;;58     	UINT32 u32Ch,
;;;59     	UINT32 *p32SrcAdd,
;;;60     	UINT32 *p32DesAdd,
;;;61     	UINT16 u16Count
;;;62     )
;;;63     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;64     	PDMA_SET_SRC_ADDR(u32Ch, (uint32_t)p32SrcAdd); 
00000a  0220              LSLS     r0,r4,#8
00000c  4907              LDR      r1,|L5.44|
00000e  1840              ADDS     r0,r0,r1
000010  6045              STR      r5,[r0,#4]
;;;65     	PDMA_SET_DST_ADDR(u32Ch, (uint32_t)p32DesAdd);
000012  0220              LSLS     r0,r4,#8
000014  1840              ADDS     r0,r0,r1
000016  6086              STR      r6,[r0,#8]
;;;66     	PDMA_SetTransferCnt( u32Ch, PDMA_WIDTH_16, u16Count );
000018  463a              MOV      r2,r7
00001a  0149              LSLS     r1,r1,#5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       PDMA_SetTransferCnt
;;;67     	PDMA_Trigger(u32Ch);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       PDMA_Trigger
;;;68     }
000028  bdf8              POP      {r3-r7,pc}
;;;69     
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x50008000

                          AREA ||i.PdmaCtrl_Stop||, CODE, READONLY, ALIGN=2

                  PdmaCtrl_Stop PROC
;;;69     
;;;70     void PdmaCtrl_Stop(UINT32 u32Ch)
000000  0201              LSLS     r1,r0,#8
;;;71     {
;;;72     	PDMA_STOP(u32Ch);
000002  4a05              LDR      r2,|L6.24|
000004  1889              ADDS     r1,r1,r2
000006  6809              LDR      r1,[r1,#0]
000008  0849              LSRS     r1,r1,#1
00000a  0049              LSLS     r1,r1,#1
00000c  0202              LSLS     r2,r0,#8
00000e  4b02              LDR      r3,|L6.24|
000010  18d2              ADDS     r2,r2,r3
000012  6011              STR      r1,[r2,#0]
;;;73     }
000014  4770              BX       lr
;;;74     
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x50008000

                          AREA ||i.PdmaCtrl_UnInit||, CODE, READONLY, ALIGN=2

                  PdmaCtrl_UnInit PROC
;;;80     
;;;81     void PdmaCtrl_UnInit(void)
000000  b510              PUSH     {r4,lr}
;;;82     {
;;;83     	/* Enable NVIC interrupt*/
;;;84     	NVIC_ClearPendingIRQ(PDMA_IRQn);
000002  201a              MOVS     r0,#0x1a
000004  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;85     	NVIC_DisableIRQ(PDMA_IRQn);
000008  201a              MOVS     r0,#0x1a
00000a  2101              MOVS     r1,#1
00000c  4081              LSLS     r1,r1,r0
00000e  4a03              LDR      r2,|L7.28|
000010  6011              STR      r1,[r2,#0]
000012  bf00              NOP      
;;;86     	/* Disable PDMA clock */
;;;87     	CLK_DisableModuleClock(PDMA_MODULE);
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       CLK_DisableModuleClock
;;;88     }
00001a  bd10              POP      {r4,pc}
                          ENDP

                  |L7.28|
                          DCD      0xe000e180

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Framework\\src\\PdmaCtrl.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_PdmaCtrl_c_be4af032____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_PdmaCtrl_c_be4af032____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_PdmaCtrl_c_be4af032____REVSH|
#line 132
|__asm___10_PdmaCtrl_c_be4af032____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
