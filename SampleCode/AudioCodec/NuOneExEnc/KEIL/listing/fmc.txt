; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\fmc.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\fmc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\fmc.crf ..\..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;51       */
;;;52     void FMC_Close(void)
000000  4803              LDR      r0,|L1.16|
;;;53     {
;;;54         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  6008              STR      r0,[r1,#0]
;;;55     }
00000c  4770              BX       lr
;;;56     
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x5000c000

                          AREA ||i.FMC_DisableConfigUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableConfigUpdate PROC
;;;59       */
;;;60     void FMC_DisableConfigUpdate(void)
000000  4803              LDR      r0,|L2.16|
;;;61     {
;;;62         FMC->ISPCTL &= ~FMC_ISPCTL_CFGUEN_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  2110              MOVS     r1,#0x10
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L2.16|
00000a  6008              STR      r0,[r1,#0]
;;;63     }
00000c  4770              BX       lr
;;;64     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x5000c000

                          AREA ||i.FMC_DisableLDUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableLDUpdate PROC
;;;67       */
;;;68     void FMC_DisableLDUpdate(void)
000000  4803              LDR      r0,|L3.16|
;;;69     {
;;;70         FMC->ISPCTL &= ~FMC_ISPCTL_LDUEN_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  2120              MOVS     r1,#0x20
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L3.16|
00000a  6008              STR      r0,[r1,#0]
;;;71     }
00000c  4770              BX       lr
;;;72     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x5000c000

                          AREA ||i.FMC_EnableConfigUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableConfigUpdate PROC
;;;75       */
;;;76     void FMC_EnableConfigUpdate(void)
000000  4803              LDR      r0,|L4.16|
;;;77     {
;;;78         FMC->ISPCTL |= FMC_ISPCTL_CFGUEN_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  2110              MOVS     r1,#0x10
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L4.16|
00000a  6008              STR      r0,[r1,#0]
;;;79     }
00000c  4770              BX       lr
;;;80     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x5000c000

                          AREA ||i.FMC_EnableLDUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableLDUpdate PROC
;;;83       */
;;;84     void FMC_EnableLDUpdate(void)
000000  4803              LDR      r0,|L5.16|
;;;85     {
;;;86         FMC->ISPCTL |= FMC_ISPCTL_LDUEN_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  2120              MOVS     r1,#0x20
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L5.16|
00000a  6008              STR      r0,[r1,#0]
;;;87     }
00000c  4770              BX       lr
;;;88     
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x5000c000

                          AREA ||i.FMC_Erase||, CODE, READONLY, ALIGN=2

                  FMC_Erase PROC
;;;94       */
;;;95     int32_t FMC_Erase(uint32_t u32PageAddr)
000000  4601              MOV      r1,r0
;;;96     {
;;;97         FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000002  2022              MOVS     r0,#0x22
000004  4a0f              LDR      r2,|L6.68|
000006  60d0              STR      r0,[r2,#0xc]
;;;98         FMC->ISPADDR = u32PageAddr;
000008  4610              MOV      r0,r2
00000a  6041              STR      r1,[r0,#4]
;;;99     	
;;;100        // Don't allow NVIC to interrupt a FMC write operation.
;;;101        __disable_irq();
00000c  b672              CPSID    i
;;;102        // Trigger ISP command
;;;103        FMC->ISPTRG = (FMC->ISPTRG & (~FMC_ISPTRG_ISPGO_Msk)) | FMC_ISPTRG_ISPGO_Msk;
00000e  480d              LDR      r0,|L6.68|
000010  6900              LDR      r0,[r0,#0x10]
000012  0840              LSRS     r0,r0,#1
000014  0040              LSLS     r0,r0,#1
000016  1c40              ADDS     r0,r0,#1
000018  4a0a              LDR      r2,|L6.68|
00001a  6110              STR      r0,[r2,#0x10]
;;;104        // Flush M0 pipeline.
;;;105        __ISB();
00001c  f3bf8f6f          ISB      
;;;106        __enable_irq();
000020  b662              CPSIE    i
;;;107    	
;;;108    		if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000022  4808              LDR      r0,|L6.68|
000024  6800              LDR      r0,[r0,#0]
000026  2240              MOVS     r2,#0x40
000028  4010              ANDS     r0,r0,r2
00002a  2800              CMP      r0,#0
00002c  d008              BEQ      |L6.64|
;;;109    		{
;;;110    			FMC->ISPCTL = (FMC->ISPCTL & (~FMC_ISPCTL_ISPFF_Msk)) | FMC_ISPCTL_ISPFF_Msk;
00002e  4805              LDR      r0,|L6.68|
000030  6800              LDR      r0,[r0,#0]
000032  4390              BICS     r0,r0,r2
000034  3040              ADDS     r0,r0,#0x40
000036  4a03              LDR      r2,|L6.68|
000038  6010              STR      r0,[r2,#0]
;;;111    			return -1;
00003a  2000              MOVS     r0,#0
00003c  43c0              MVNS     r0,r0
                  |L6.62|
;;;112    		}
;;;113        return 0;
;;;114    }
00003e  4770              BX       lr
                  |L6.64|
000040  2000              MOVS     r0,#0                 ;113
000042  e7fc              B        |L6.62|
;;;115    
                          ENDP

                  |L6.68|
                          DCD      0x5000c000

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;120      */
;;;121    int32_t FMC_GetBootSource (void)
000000  4804              LDR      r0,|L7.20|
;;;122    {
;;;123        if (FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  2102              MOVS     r1,#2
000006  4008              ANDS     r0,r0,r1
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L7.16|
;;;124            return 1;
00000c  2001              MOVS     r0,#1
                  |L7.14|
;;;125        else
;;;126            return 0;
;;;127    }
00000e  4770              BX       lr
                  |L7.16|
000010  2000              MOVS     r0,#0                 ;126
000012  e7fc              B        |L7.14|
;;;128    
                          ENDP

                  |L7.20|
                          DCD      0x5000c000

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;131      */
;;;132    void FMC_Open(void)
000000  4803              LDR      r0,|L8.16|
;;;133    {
;;;134        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  2101              MOVS     r1,#1
000006  4308              ORRS     r0,r0,r1
000008  4901              LDR      r1,|L8.16|
00000a  6008              STR      r0,[r1,#0]
;;;135    }
00000c  4770              BX       lr
;;;136    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x5000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;141      */
;;;142    uint32_t FMC_Read(uint32_t u32Addr)
000000  4601              MOV      r1,r0
;;;143    {
;;;144        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2000              MOVS     r0,#0
000004  4a06              LDR      r2,|L9.32|
000006  60d0              STR      r0,[r2,#0xc]
;;;145        FMC->ISPADDR = u32Addr;
000008  4610              MOV      r0,r2
00000a  6041              STR      r1,[r0,#4]
;;;146    
;;;147        // Trigger ISP command
;;;148        FMC->ISPTRG = (FMC->ISPTRG & (~FMC_ISPTRG_ISPGO_Msk)) | FMC_ISPTRG_ISPGO_Msk;
00000c  6900              LDR      r0,[r0,#0x10]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  1c40              ADDS     r0,r0,#1
000014  6110              STR      r0,[r2,#0x10]
;;;149        // Flush M0 pipeline.
;;;150        __ISB();
000016  f3bf8f6f          ISB      
;;;151    
;;;152        return FMC->ISPDAT;
00001a  4610              MOV      r0,r2
00001c  6880              LDR      r0,[r0,#8]
;;;153    }
00001e  4770              BX       lr
;;;154    
                          ENDP

                  |L9.32|
                          DCD      0x5000c000

                          AREA ||i.FMC_ReadCID||, CODE, READONLY, ALIGN=2

                  FMC_ReadCID PROC
;;;158      */
;;;159    uint32_t FMC_ReadCID(void)
000000  200b              MOVS     r0,#0xb
;;;160    {
;;;161        FMC->ISPCMD = FMC_ISPCMD_READ_CID;
000002  4907              LDR      r1,|L10.32|
000004  60c8              STR      r0,[r1,#0xc]
;;;162        FMC->ISPADDR = 0x0;
000006  2000              MOVS     r0,#0
000008  6048              STR      r0,[r1,#4]
;;;163    
;;;164        // Trigger ISP command
;;;165        FMC->ISPTRG = (FMC->ISPTRG & (~FMC_ISPTRG_ISPGO_Msk)) | FMC_ISPTRG_ISPGO_Msk;
00000a  4608              MOV      r0,r1
00000c  6900              LDR      r0,[r0,#0x10]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  1c40              ADDS     r0,r0,#1
000014  6108              STR      r0,[r1,#0x10]
;;;166        // Flush M0 pipeline.
;;;167        __ISB();
000016  f3bf8f6f          ISB      
;;;168        
;;;169    		return FMC->ISPDAT;
00001a  4608              MOV      r0,r1
00001c  6880              LDR      r0,[r0,#8]
;;;170    }
00001e  4770              BX       lr
;;;171    
                          ENDP

                  |L10.32|
                          DCD      0x5000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=1

                  FMC_ReadConfig PROC
;;;224      */
;;;225    int32_t FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count)
000000  b530              PUSH     {r4,r5,lr}
;;;226    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;227        int         i;
;;;228    
;;;229        for (i = 0; i < u32Count; i++) {
000006  2300              MOVS     r3,#0
000008  e008              B        |L11.28|
                  |L11.10|
;;;230            u32Config[i] = FMC_Read(FMC_CONFIG_BASE + i*4);
00000a  0099              LSLS     r1,r3,#2
00000c  2203              MOVS     r2,#3
00000e  0512              LSLS     r2,r2,#20
000010  1888              ADDS     r0,r1,r2
000012  f7fffffe          BL       FMC_Read
000016  0099              LSLS     r1,r3,#2
000018  5060              STR      r0,[r4,r1]
00001a  1c5b              ADDS     r3,r3,#1              ;229
                  |L11.28|
00001c  42ab              CMP      r3,r5                 ;229
00001e  d3f4              BCC      |L11.10|
;;;231        }
;;;232    
;;;233        //if (FMC->ISPSTS & FMC_ISPSTS_CFGCRCF_Msk)
;;;234          //  return -1;
;;;235    
;;;236        return 0;
000020  2000              MOVS     r0,#0
;;;237    }
000022  bd30              POP      {r4,r5,pc}
;;;238    
                          ENDP


                          AREA ||i.FMC_ReadDID||, CODE, READONLY, ALIGN=2

                  FMC_ReadDID PROC
;;;175      */
;;;176    uint32_t FMC_ReadDID(void)
000000  200c              MOVS     r0,#0xc
;;;177    {
;;;178        FMC->ISPCMD = FMC_ISPCMD_READ_DID;
000002  4907              LDR      r1,|L12.32|
000004  60c8              STR      r0,[r1,#0xc]
;;;179        FMC->ISPADDR = 0;
000006  2000              MOVS     r0,#0
000008  6048              STR      r0,[r1,#4]
;;;180    	
;;;181        // Trigger ISP command
;;;182        FMC->ISPTRG = (FMC->ISPTRG & (~FMC_ISPTRG_ISPGO_Msk)) | FMC_ISPTRG_ISPGO_Msk;
00000a  4608              MOV      r0,r1
00000c  6900              LDR      r0,[r0,#0x10]
00000e  0840              LSRS     r0,r0,#1
000010  0040              LSLS     r0,r0,#1
000012  1c40              ADDS     r0,r0,#1
000014  6108              STR      r0,[r1,#0x10]
;;;183        // Flush M0 pipeline.
;;;184        __ISB();
000016  f3bf8f6f          ISB      
;;;185    	
;;;186        return FMC->ISPDAT;
00001a  4608              MOV      r0,r1
00001c  6880              LDR      r0,[r0,#8]
;;;187    }
00001e  4770              BX       lr
;;;188    
                          ENDP

                  |L12.32|
                          DCD      0x5000c000

                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;192      */
;;;193    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L13.8|
;;;194    {
;;;195        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;196    }
000004  4770              BX       lr
;;;197    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x5000c000

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;40       */
;;;41     void FMC_SetBootSource (int32_t i32BootSrc)
000000  2801              CMP      r0,#1
;;;42     {
;;;43         if (i32BootSrc == 1)
000002  d106              BNE      |L14.18|
;;;44             FMC->ISPCTL |= FMC_ISPCTL_BS_Msk;
000004  4906              LDR      r1,|L14.32|
000006  6809              LDR      r1,[r1,#0]
000008  2202              MOVS     r2,#2
00000a  4311              ORRS     r1,r1,r2
00000c  4a04              LDR      r2,|L14.32|
00000e  6011              STR      r1,[r2,#0]
000010  e005              B        |L14.30|
                  |L14.18|
;;;45         else
;;;46             FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;
000012  4903              LDR      r1,|L14.32|
000014  6809              LDR      r1,[r1,#0]
000016  2202              MOVS     r2,#2
000018  4391              BICS     r1,r1,r2
00001a  4a01              LDR      r2,|L14.32|
00001c  6011              STR      r1,[r2,#0]
                  |L14.30|
;;;47     }
00001e  4770              BX       lr
;;;48     
                          ENDP

                  |L14.32|
                          DCD      0x5000c000

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;202      */
;;;203    void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  2221              MOVS     r2,#0x21
;;;204    {
;;;205        FMC->ISPCMD = FMC_ISPCMD_WRITE;
000002  4b08              LDR      r3,|L15.36|
000004  60da              STR      r2,[r3,#0xc]
;;;206        FMC->ISPADDR = u32Addr;
000006  461a              MOV      r2,r3
000008  6050              STR      r0,[r2,#4]
;;;207        FMC->ISPDAT = u32Data;
00000a  6091              STR      r1,[r2,#8]
;;;208    	
;;;209        // Don't allow NVIC to interrupt a FMC write operation.
;;;210        __disable_irq();
00000c  b672              CPSID    i
;;;211        // Trigger ISP command
;;;212        FMC->ISPTRG = (FMC->ISPTRG & (~FMC_ISPTRG_ISPGO_Msk)) | FMC_ISPTRG_ISPGO_Msk;
00000e  4a05              LDR      r2,|L15.36|
000010  6912              LDR      r2,[r2,#0x10]
000012  0852              LSRS     r2,r2,#1
000014  0052              LSLS     r2,r2,#1
000016  1c52              ADDS     r2,r2,#1
000018  4b02              LDR      r3,|L15.36|
00001a  611a              STR      r2,[r3,#0x10]
;;;213        // Flush M0 pipeline.
;;;214        __ISB();
00001c  f3bf8f6f          ISB      
;;;215        __enable_irq();
000020  b662              CPSIE    i
;;;216    }
000022  4770              BX       lr
;;;217    
                          ENDP

                  |L15.36|
                          DCD      0x5000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=1

                  FMC_WriteConfig PROC
;;;245      */
;;;246    int32_t FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count)
000000  b570              PUSH     {r4-r6,lr}
;;;247    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;248        uint32_t  i;
;;;249    
;;;250        FMC_Erase(FMC_CONFIG_BASE);
000006  2003              MOVS     r0,#3
000008  0500              LSLS     r0,r0,#20
00000a  f7fffffe          BL       FMC_Erase
;;;251    
;;;252        for (i = 0; i < 4; i++) {
00000e  2400              MOVS     r4,#0
000010  e015              B        |L16.62|
                  |L16.18|
;;;253            FMC_Write(FMC_CONFIG_BASE + i * 4, u32Config[i]);
000012  00a2              LSLS     r2,r4,#2
000014  58a9              LDR      r1,[r5,r2]
000016  00a2              LSLS     r2,r4,#2
000018  2303              MOVS     r3,#3
00001a  051b              LSLS     r3,r3,#20
00001c  18d0              ADDS     r0,r2,r3
00001e  f7fffffe          BL       FMC_Write
;;;254            if(FMC_Read(FMC_CONFIG_BASE + i * 4) != u32Config[i])
000022  00a1              LSLS     r1,r4,#2
000024  2203              MOVS     r2,#3
000026  0512              LSLS     r2,r2,#20
000028  1888              ADDS     r0,r1,r2
00002a  f7fffffe          BL       FMC_Read
00002e  00a1              LSLS     r1,r4,#2
000030  5869              LDR      r1,[r5,r1]
000032  4288              CMP      r0,r1
000034  d002              BEQ      |L16.60|
;;;255                return -1;
000036  2000              MOVS     r0,#0
000038  43c0              MVNS     r0,r0
                  |L16.58|
;;;256        }
;;;257    
;;;258        return 0;
;;;259    }
00003a  bd70              POP      {r4-r6,pc}
                  |L16.60|
00003c  1c64              ADDS     r4,r4,#1              ;252
                  |L16.62|
00003e  2c04              CMP      r4,#4                 ;252
000040  d3e7              BCC      |L16.18|
000042  2000              MOVS     r0,#0                 ;258
000044  e7f9              B        |L16.58|
;;;260    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_15679c7a____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_fmc_c_15679c7a____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_15679c7a____REVSH|
#line 132
|__asm___5_fmc_c_15679c7a____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
