; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\appfunctions.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\appfunctions.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\appfunctions.crf ..\AppFunctions.c]
                          THUMB

                          AREA ||i.App_Initiate||, CODE, READONLY, ALIGN=2

                  App_Initiate PROC
;;;63     //---------------------------------------------------------------------------------------------------------
;;;64     void App_Initiate(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66     	g_u8AppCtrl = APPCTRL_NO_ACTION;
000002  2000              MOVS     r0,#0
000004  4905              LDR      r1,|L1.28|
000006  7008              STRB     r0,[r1,#0]
;;;67     	
;;;68     	// Initiate the audio playback.
;;;69     	Playback_Initiate();
000008  f7fffffe          BL       Playback_Initiate
;;;70     	
;;;71     	// Configure the UltraIO curve output funciton's interrupt priority.
;;;72     	// Lower this priority if other interrupt services should be higher than UltraIO curve output function!
;;;73     	#if ( ULTRAIO_FW_CURVE_ENABLE )
;;;74     	NVIC_SetPriority(ULTRAIO_TMR_IRQ, 1);
;;;75     	#endif	
;;;76     	
;;;77     	// Light stand by(PB8) led for initial ready().
;;;78     	OUT3(0);
00000c  2200              MOVS     r2,#0
00000e  2101              MOVS     r1,#1
000010  0389              LSLS     r1,r1,#14
000012  4803              LDR      r0,|L1.32|
000014  f7fffffe          BL       OutputPin_Set
;;;79     }
000018  bd10              POP      {r4,pc}
;;;80     
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      g_u8AppCtrl
                  |L1.32|
                          DCD      0x50004000

                          AREA ||i.App_PowerDown||, CODE, READONLY, ALIGN=1

                  App_PowerDown PROC
;;;262    //---------------------------------------------------------------------------------------------------------
;;;263    void App_PowerDown(void)
000000  b510              PUSH     {r4,lr}
;;;264    {
;;;265    	App_StopPlay();
000002  f7fffffe          BL       App_StopPlay
;;;266    	App_StopRec();
000006  f7fffffe          BL       App_StopRec
;;;267    	
;;;268    	#if(POWERDOWN_ENABLE)
;;;269    	PowerDown_Enter();
00000a  f7fffffe          BL       PowerDown_Enter
;;;270    	PowerDown();
00000e  f7fffffe          BL       PowerDown
;;;271    	PowerDown_Exit();
000012  f7fffffe          BL       PowerDown_Exit
;;;272    	#endif
;;;273    }
000016  bd10              POP      {r4,pc}
;;;274    
                          ENDP


                          AREA ||i.App_ProcessPlay||, CODE, READONLY, ALIGN=2

                  App_ProcessPlay PROC
;;;213    //---------------------------------------------------------------------------------------------------------
;;;214    BOOL App_ProcessPlay(void)
000000  b510              PUSH     {r4,lr}
;;;215    {
;;;216    	UINT8 u8ActiveProcessCount = 0;
000002  2400              MOVS     r4,#0
;;;217    	
;;;218    	// Continue decode NuOneEx data to produce PCMs for audio playback.
;;;219    	if ( NuOneExApp_DecodeProcess(&g_sApp.sNuOneExAppDecode) == TRUE )
000004  4806              LDR      r0,|L3.32|
000006  f7fffffe          BL       NuOneExApp_DecodeProcess
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L3.18|
;;;220    		u8ActiveProcessCount ++;
00000e  1c60              ADDS     r0,r4,#1
000010  b2c4              UXTB     r4,r0
                  |L3.18|
;;;221    
;;;222    	if ( u8ActiveProcessCount )
000012  2c00              CMP      r4,#0
000014  d001              BEQ      |L3.26|
;;;223    		return TRUE;
000016  2001              MOVS     r0,#1
                  |L3.24|
;;;224    
;;;225    	return FALSE;
;;;226    }
000018  bd10              POP      {r4,pc}
                  |L3.26|
00001a  2000              MOVS     r0,#0                 ;225
00001c  e7fc              B        |L3.24|
;;;227    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      g_sApp

                          AREA ||i.App_ProcessRec||, CODE, READONLY, ALIGN=2

                  App_ProcessRec PROC
;;;237    //---------------------------------------------------------------------------------------------------------
;;;238    BOOL App_ProcessRec(void)
000000  b510              PUSH     {r4,lr}
;;;239    {
;;;240    	// Write NuOneEx encode data into SPIFlash.
;;;241    	SPIFlashUtil_WriteEncodeData(&g_sApp.sNuOneExAppEncode.sEncodeBufCtrl);
000002  4808              LDR      r0,|L4.36|
000004  f7fffffe          BL       SPIFlashUtil_WriteEncodeData
;;;242    
;;;243    	// Check current record address is out size of SPIFlash.
;;;244    	if (g_u32SPIFlashRecAddr >= g_sSpiFlash.u32FlashSize)
000008  4807              LDR      r0,|L4.40|
00000a  6840              LDR      r0,[r0,#4]  ; g_sSpiFlash
00000c  4907              LDR      r1,|L4.44|
00000e  6809              LDR      r1,[r1,#0]  ; g_u32SPIFlashRecAddr
000010  4288              CMP      r0,r1
000012  d801              BHI      |L4.24|
;;;245    		return FALSE;	
000014  2000              MOVS     r0,#0
                  |L4.22|
;;;246    
;;;247    	// Keep encode PCM buffer data to NuOneEx lib.
;;;248    	NuOneExApp_EncodeProcess(&g_sApp.sNuOneExAppEncode);
;;;249    	
;;;250    	return TRUE;
;;;251    }
000016  bd10              POP      {r4,pc}
                  |L4.24|
000018  4805              LDR      r0,|L4.48|
00001a  f7fffffe          BL       NuOneExApp_EncodeProcess
00001e  2001              MOVS     r0,#1                 ;250
000020  e7f9              B        |L4.22|
;;;252    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      g_sApp+0x834
                  |L4.40|
                          DCD      g_sSpiFlash
                  |L4.44|
                          DCD      g_u32SPIFlashRecAddr
                  |L4.48|
                          DCD      g_sApp

                          AREA ||i.App_ReadVR||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  App_ReadVR PROC
;;;322    
;;;323    void App_ReadVR()
000000  b570              PUSH     {r4-r6,lr}
;;;324    {
;;;325        //uint32_t u32ConversionDatas[16];
;;;326    	uint32_t u32ConversionData;
;;;327    	uint8_t j;    
;;;328        
;;;329    	printf("\n\n=== ADC single mode test ===\n");
000002  a01e              ADR      r0,|L5.124|
000004  f7fffffe          BL       __2printf
;;;330    	
;;;331    	/* Init ADC */
;;;332    	App_ReadVRInit();
000008  f7fffffe          BL       App_ReadVRInit
;;;333    				
;;;334        ADC_SetGPIOChannel(ADC_GPIO_SINGLEEND_CH5_N);
00000c  4823              LDR      r0,|L5.156|
00000e  f7fffffe          BL       ADC_SetGPIOChannel
;;;335                
;;;336        // Enable ADC Interrupt function
;;;337        ADC_EnableInt(ADC_FIFO_INT);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       ADC_EnableInt
;;;338    
;;;339        // Start A/D conversion 
;;;340        ADC_START_CONV(ADC);
000018  2001              MOVS     r0,#1
00001a  4921              LDR      r1,|L5.160|
00001c  6048              STR      r0,[r1,#4]
;;;341    
;;;342        // Wait ADC interrupt 
;;;343        while(ADC_GetIntFlag(ADC_FIFO_INT));
00001e  bf00              NOP      
                  |L5.32|
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       ADC_GetIntFlag
000026  2800              CMP      r0,#0
000028  d1fa              BNE      |L5.32|
;;;344    			//while(1){
;;;345        for(j=0;j<=16;j++) {
00002a  2400              MOVS     r4,#0
00002c  e008              B        |L5.64|
                  |L5.46|
;;;346            u32ConversionData = ADC_GET_FIFODATA(ADC);
00002e  481c              LDR      r0,|L5.160|
000030  6800              LDR      r0,[r0,#0]
000032  b285              UXTH     r5,r0
;;;347            CLK_SysTickDelay(500);
000034  20ff              MOVS     r0,#0xff
000036  30f5              ADDS     r0,r0,#0xf5
000038  f7fffffe          BL       CLK_SysTickDelay
00003c  1c60              ADDS     r0,r4,#1              ;345
00003e  b2c4              UXTB     r4,r0                 ;345
                  |L5.64|
000040  2c10              CMP      r4,#0x10              ;345
000042  ddf4              BLE      |L5.46|
;;;348        }
;;;349    	
;;;350        g_adcVR2volume = u32ConversionData/4000;
000044  217d              MOVS     r1,#0x7d
000046  0149              LSLS     r1,r1,#5
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       __aeabi_uidivmod
00004e  4915              LDR      r1,|L5.164|
000050  7008              STRB     r0,[r1,#0]
;;;351        printf(" everage = (%ul)\n", g_adcVR2volume);
000052  4608              MOV      r0,r1
000054  7801              LDRB     r1,[r0,#0]  ; g_adcVR2volume
000056  a014              ADR      r0,|L5.168|
000058  f7fffffe          BL       __2printf
;;;352    	
;;;353    	// stop A/D conversion 
;;;354        ADC_STOP_CONV(ADC);
00005c  2001              MOVS     r0,#1
00005e  43c0              MVNS     r0,r0
000060  490f              LDR      r1,|L5.160|
000062  6048              STR      r0,[r1,#4]
;;;355    		
;;;356    	CLK_SysTickDelay(100000);
000064  4815              LDR      r0,|L5.188|
000066  f7fffffe          BL       CLK_SysTickDelay
;;;357    
;;;358    	//Init MIC 
;;;359    
;;;360    	//SYSCLK_INITIATE();				// Configure CPU clock source and operation clock frequency.
;;;361    									// The configuration functions are in "SysClkConfig.h"
;;;362    	
;;;363    	CLK_EnableLDO(CLK_LDOSEL_3_3V);	// Enable ISD9100 interl 3.3 LDO.
00006a  2003              MOVS     r0,#3
00006c  f7fffffe          BL       CLK_EnableLDO
;;;364    	
;;;365    //	if (! SPIFlash_Initiate())		// Initiate SPI interface and checking flows for accessing SPI flash.
;;;366    //		while(1); 					// loop here for easy debug
;;;367    
;;;368    	SPK_INITIATE();					// Initiate speaker including pop-sound canceling.
000070  f7fffffe          BL       SPK_Open
;;;369    									// After initiation, the APU is paused.
;;;370    									// Use SPK_Resume(0) to start APU operation.
;;;371    									// Reference "MicSpk.h" for speaker related APIs.
;;;372    
;;;373    	MIC_INITIATE();					// Initiate MIC.
000074  f7fffffe          BL       MIC_Open
;;;374    									// After initiation, the ADC is paused.
;;;375    									// Use ADC_Resume() to start ADC operation.
;;;376    									// Reference "MicSpk.h" for MIC related APIs.
;;;377    	
;;;378    																	
;;;379    	//App_Initiate();					// Initiate application for audio decode.			
;;;380    
;;;381    //	Playback_SetVolumeDB(0, PLAYBACK_VOLUME_10_DB);   // added bylambor
;;;382    	
;;;383    }
000078  bd70              POP      {r4-r6,pc}
;;;384    
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
00007c  0a0a3d3d          DCB      "\n\n=== ADC single mode test ===\n",0
000080  3d204144
000084  43207369
000088  6e676c65
00008c  206d6f64
000090  65207465
000094  7374203d
000098  3d3d0a00
                  |L5.156|
                          DCD      0x00020020
                  |L5.160|
                          DCD      0x400e0000
                  |L5.164|
                          DCD      g_adcVR2volume
                  |L5.168|
0000a8  20657665          DCB      " everage = (%ul)\n",0
0000ac  72616765
0000b0  203d2028
0000b4  25756c29
0000b8  0a00    
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L5.188|
                          DCD      0x000186a0

                          AREA ||i.App_ReadVRInit||, CODE, READONLY, ALIGN=2

                  App_ReadVRInit PROC
;;;280    //---------------------------------------------------------------------------------------------------------
;;;281    void App_ReadVRInit(void)
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
;;;283    	uint32_t u32Div;
;;;284    	
;;;285    	/* Reset IP */
;;;286    	CLK_EnableModuleClock(ADC_MODULE);
000002  482e              LDR      r0,|L6.188|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;287    	CLK_EnableModuleClock(ANA_MODULE);
000008  482d              LDR      r0,|L6.192|
00000a  f7fffffe          BL       CLK_EnableModuleClock
;;;288        SYS_ResetModule(EADC_RST);
00000e  482d              LDR      r0,|L6.196|
000010  f7fffffe          BL       SYS_ResetModule
;;;289    	SYS_ResetModule(ANA_RST);
000014  482b              LDR      r0,|L6.196|
000016  1c80              ADDS     r0,r0,#2
000018  f7fffffe          BL       SYS_ResetModule
;;;290    	
;;;291    	/* Enable Analog block power */
;;;292    	ADC_ENABLE_SIGNALPOWER(ADC,
00001c  482a              LDR      r0,|L6.200|
00001e  6a40              LDR      r0,[r0,#0x24]
000020  0940              LSRS     r0,r0,#5
000022  0140              LSLS     r0,r0,#5
000024  301e              ADDS     r0,r0,#0x1e
000026  4928              LDR      r1,|L6.200|
000028  6248              STR      r0,[r1,#0x24]
;;;293    	                       ADC_SIGCTL_ADCMOD_POWER|
;;;294    						   ADC_SIGCTL_IBGEN_POWER|
;;;295    	                       ADC_SIGCTL_BUFADC_POWER|
;;;296    	                       ADC_SIGCTL_BUFPGA_POWER);
;;;297    	
;;;298    	/* PGA Setting */
;;;299    	ADC_MUTEON_PGA(ADC, ADC_SIGCTL_MUTE_PGA);
00002a  4608              MOV      r0,r1
00002c  6a40              LDR      r0,[r0,#0x24]
00002e  2120              MOVS     r1,#0x20
000030  4308              ORRS     r0,r0,r1
000032  4925              LDR      r1,|L6.200|
000034  6248              STR      r0,[r1,#0x24]
;;;300    	ADC_MUTEOFF_PGA(ADC, ADC_SIGCTL_MUTE_IPBOOST);
000036  4608              MOV      r0,r1
000038  6a40              LDR      r0,[r0,#0x24]
00003a  2140              MOVS     r1,#0x40
00003c  4388              BICS     r0,r0,r1
00003e  4922              LDR      r1,|L6.200|
000040  6248              STR      r0,[r1,#0x24]
;;;301    
;;;302    	ADC_ENABLE_PGA(ADC, ADC_PGACTL_REFSEL_VMID, ADC_PGACTL_BOSST_GAIN_0DB);
000042  4608              MOV      r0,r1
000044  6a00              LDR      r0,[r0,#0x20]
000046  2109              MOVS     r1,#9
000048  4388              BICS     r0,r0,r1
00004a  2106              MOVS     r1,#6
00004c  4308              ORRS     r0,r0,r1
00004e  491e              LDR      r1,|L6.200|
000050  6208              STR      r0,[r1,#0x20]
;;;303    	ADC_SetPGAGaindB(0); // system default 600dB   
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       ADC_SetPGAGaindB
;;;304    
;;;305    
;;;306    	/* MIC circuit configuration */
;;;307    	ADC_ENABLE_VMID(ADC, ADC_VMID_HIRES_DISCONNECT, ADC_VMID_LORES_CONNECT);
000058  2004              MOVS     r0,#4
00005a  491b              LDR      r1,|L6.200|
00005c  3940              SUBS     r1,r1,#0x40
00005e  6008              STR      r0,[r1,#0]
;;;308    	ADC_EnableMICBias(ADC_MICBSEL_90_VCCA);
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       ADC_EnableMICBias
;;;309    	ADC_SetAMUX(ADC_MUXCTL_MIC_PATH, ADC_MUXCTL_POSINSEL_NONE, ADC_MUXCTL_NEGINSEL_NONE);
000066  2200              MOVS     r2,#0
000068  4611              MOV      r1,r2
00006a  2001              MOVS     r0,#1
00006c  0340              LSLS     r0,r0,#13
00006e  f7fffffe          BL       ADC_SetAMUX
;;;310    	
;;;311    	/* Open ADC block */
;;;312    	ADC_Open();
000072  f7fffffe          BL       ADC_Open
;;;313    	ADC_SET_OSRATION(ADC, ADC_OSR_RATION_192);
000076  4815              LDR      r0,|L6.204|
000078  68c0              LDR      r0,[r0,#0xc]
00007a  0900              LSRS     r0,r0,#4
00007c  0100              LSLS     r0,r0,#4
00007e  1c80              ADDS     r0,r0,#2
000080  4912              LDR      r1,|L6.204|
000082  60c8              STR      r0,[r1,#0xc]
;;;314    	u32Div = CLK_GetHIRCFreq()/ADC_SAMPLE_RATE/192;
000084  f7fffffe          BL       CLK_GetHIRCFreq
000088  4606              MOV      r6,r0
00008a  4911              LDR      r1,|L6.208|
00008c  f7fffffe          BL       __aeabi_uidivmod
000090  4605              MOV      r5,r0
000092  21c0              MOVS     r1,#0xc0
000094  f7fffffe          BL       __aeabi_uidivmod
000098  4604              MOV      r4,r0
;;;315    	ADC_SET_SDCLKDIV(ADC, u32Div);
00009a  b2e0              UXTB     r0,r4
00009c  490b              LDR      r1,|L6.204|
00009e  6088              STR      r0,[r1,#8]
;;;316    	ADC_SET_FIFOINTLEVEL(ADC, 7);
0000a0  4608              MOV      r0,r1
0000a2  6900              LDR      r0,[r0,#0x10]
0000a4  08c0              LSRS     r0,r0,#3
0000a6  00c0              LSLS     r0,r0,#3
0000a8  1dc0              ADDS     r0,r0,#7
0000aa  6108              STR      r0,[r1,#0x10]
;;;317    	
;;;318    	ADC_MUTEOFF_PGA(ADC, ADC_SIGCTL_MUTE_PGA);
0000ac  4806              LDR      r0,|L6.200|
0000ae  6a40              LDR      r0,[r0,#0x24]
0000b0  2120              MOVS     r1,#0x20
0000b2  4388              BICS     r0,r0,r1
0000b4  4904              LDR      r1,|L6.200|
0000b6  6248              STR      r0,[r1,#0x24]
;;;319    	
;;;320    }
0000b8  bd70              POP      {r4-r6,pc}
;;;321    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L6.188|
                          DCD      0x4003fe1c
                  |L6.192|
                          DCD      0x4000001e
                  |L6.196|
                          DCD      0x0400001c
                  |L6.200|
                          DCD      0x40080040
                  |L6.204|
                          DCD      0x400e0000
                  |L6.208|
                          DCD      0x00002ee0

                          AREA ||i.App_StartPlay||, CODE, READONLY, ALIGN=2

                  App_StartPlay PROC
;;;90     //---------------------------------------------------------------------------------------------------------
;;;91     BOOL App_StartPlay(void)
000000  b510              PUSH     {r4,lr}
;;;92     {	
;;;93     	//this parameter is to prevent faulty when playing
;;;94     	playEndStatus = FALSE;
000002  2000              MOVS     r0,#0
000004  490c              LDR      r1,|L7.56|
000006  7008              STRB     r0,[r1,#0]
;;;95     	
;;;96     	// Initiate NuOneEx audio decode lib with callback functions stored in g_asAppCallBack[0].
;;;97     	NuOneExApp_DecodeInitiate(&g_sApp.sNuOneExAppDecode, (UINT8 *)&g_sApp.uTempBuf, 0);
000008  2200              MOVS     r2,#0
00000a  490c              LDR      r1,|L7.60|
00000c  480c              LDR      r0,|L7.64|
00000e  f7fffffe          BL       NuOneExApp_DecodeInitiate
;;;98     	
;;;99     	// Start NuOneEx decode lib to decode NuOneEx file stored from "sAudioChunkInfo.u32AudioChunkAddr"
;;;100    	// And decode the first frame of PCMs.
;;;101    	if ( NuOneExApp_DecodeStartPlayByAddr(&g_sApp.sNuOneExAppDecode, AUDIOROM_STORAGE_START_ADDR, 0) == 0)
000012  2200              MOVS     r2,#0
000014  2101              MOVS     r1,#1
000016  0509              LSLS     r1,r1,#20
000018  4809              LDR      r0,|L7.64|
00001a  f7fffffe          BL       NuOneExApp_DecodeStartPlayByAddr
00001e  2800              CMP      r0,#0
000020  d100              BNE      |L7.36|
                  |L7.34|
;;;102    		return FALSE;
;;;103    	
;;;104    	// Light playback led(PB4) for display status.
;;;105    	OUT5(1);
;;;106    	
;;;107    	// Start Ultraio Timer & HW pwm for UltraIO curve output
;;;108    	ULTRAIO_START();
;;;109    	
;;;110    	// Start to playback audio. 
;;;111    	Playback_StartPlay();
;;;112    
;;;113    	return TRUE;
;;;114    }
000022  bd10              POP      {r4,pc}
                  |L7.36|
000024  2201              MOVS     r2,#1                 ;105
000026  2110              MOVS     r1,#0x10              ;105
000028  4806              LDR      r0,|L7.68|
00002a  f7fffffe          BL       OutputPin_Set
00002e  f7fffffe          BL       Playback_StartPlay
000032  2001              MOVS     r0,#1                 ;113
000034  e7f5              B        |L7.34|
;;;115    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      playEndStatus
                  |L7.60|
                          DCD      g_sApp+0x85c
                  |L7.64|
                          DCD      g_sApp
                  |L7.68|
                          DCD      0x50004040

                          AREA ||i.App_StartRec||, CODE, READONLY, ALIGN=2

                  App_StartRec PROC
;;;151    //---------------------------------------------------------------------------------------------------------
;;;152    BOOL App_StartRec(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;153    {	
;;;154    	S_AUDIOCHUNK_HEADER sAudioChunkHeader;
;;;155    
;;;156    	// Initiate NuOneEx audio encode lib with temp buffer provided for lib.
;;;157    	NuOneExApp_EncodeInitiate(&g_sApp.sNuOneExAppEncode, (UINT8 *)&g_sApp.uTempBuf);
000002  4910              LDR      r1,|L8.68|
000004  4810              LDR      r0,|L8.72|
000006  f7fffffe          BL       NuOneExApp_EncodeInitiate
;;;158    	
;;;159    	// Start to encode NuOneEx data with sample rate, bit per frame and saved data information into audio chunk header.
;;;160    	if (NuOneExApp_EncodeStart(&g_sApp.sNuOneExAppEncode, &sAudioChunkHeader, ADC_SAMPLE_RATE, E_NUONEEX_ENCODE_BPS_10) == FALSE)
00000a  23ff              MOVS     r3,#0xff
00000c  3341              ADDS     r3,r3,#0x41
00000e  4a0f              LDR      r2,|L8.76|
000010  4669              MOV      r1,sp
000012  480d              LDR      r0,|L8.72|
000014  f7fffffe          BL       NuOneExApp_EncodeStart
000018  2800              CMP      r0,#0
00001a  d100              BNE      |L8.30|
                  |L8.28|
;;;161    		return FALSE;
;;;162    	
;;;163    	// SPIFlash utility function provide encode data write into SPIFlash.
;;;164    	// detail info please refer "SPIFlashUtil.h"
;;;165    	SPIFlahUtil_StartWriteEncodeData(&sAudioChunkHeader, AUDIOROM_STORAGE_START_ADDR, NULL);
;;;166    	
;;;167    	// Light record led for display status.
;;;168    	OUT5(0);
;;;169    	
;;;170    	//this parameter is to prevent faulty when recording
;;;171    	recEndStatus = FALSE;
;;;172    	
;;;173    	// Start to record PCM data into buffer for produc NuOneEx encode data.
;;;174    	Record_StartRec();
;;;175    	
;;;176    	return TRUE;
;;;177    }
00001c  bd0e              POP      {r1-r3,pc}
                  |L8.30|
00001e  2200              MOVS     r2,#0                 ;165
000020  2101              MOVS     r1,#1                 ;165
000022  0509              LSLS     r1,r1,#20             ;165
000024  4668              MOV      r0,sp                 ;165
000026  f7fffffe          BL       SPIFlahUtil_StartWriteEncodeData
00002a  2200              MOVS     r2,#0                 ;168
00002c  2110              MOVS     r1,#0x10              ;168
00002e  4808              LDR      r0,|L8.80|
000030  f7fffffe          BL       OutputPin_Set
000034  2000              MOVS     r0,#0                 ;171
000036  4907              LDR      r1,|L8.84|
000038  7008              STRB     r0,[r1,#0]            ;171
00003a  f7fffffe          BL       Record_StartRec
00003e  2001              MOVS     r0,#1                 ;176
000040  e7ec              B        |L8.28|
;;;178    
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      g_sApp+0x85c
                  |L8.72|
                          DCD      g_sApp
                  |L8.76|
                          DCD      0x00002ee0
                  |L8.80|
                          DCD      0x50004040
                  |L8.84|
                          DCD      recEndStatus

                          AREA ||i.App_StopPlay||, CODE, READONLY, ALIGN=2

                  App_StopPlay PROC
;;;123    //---------------------------------------------------------------------------------------------------------
;;;124    BOOL App_StopPlay(void)
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126    	// Stop speaker.
;;;127    	Playback_StopPlay();
000002  f7fffffe          BL       Playback_StopPlay
;;;128    	
;;;129    	// Stop Ultraio Timer & HW pwm.
;;;130    	ULTRAIO_STOP();
;;;131    
;;;132    	OUT5(0);
000006  2200              MOVS     r2,#0
000008  2110              MOVS     r1,#0x10
00000a  4807              LDR      r0,|L9.40|
00000c  f7fffffe          BL       OutputPin_Set
;;;133    	CLK_SysTickDelay(200000);  // Delay us
000010  4806              LDR      r0,|L9.44|
000012  f7fffffe          BL       CLK_SysTickDelay
;;;134    	OUT5(1);	
000016  2201              MOVS     r2,#1
000018  2110              MOVS     r1,#0x10
00001a  4803              LDR      r0,|L9.40|
00001c  f7fffffe          BL       OutputPin_Set
;;;135    
;;;136    	//this parameter is to prevent faulty when playing
;;;137    	playEndStatus = TRUE;
000020  2001              MOVS     r0,#1
000022  4903              LDR      r1,|L9.48|
000024  7008              STRB     r0,[r1,#0]
;;;138    	
;;;139    	return TRUE;
;;;140    }
000026  bd10              POP      {r4,pc}
;;;141    
                          ENDP

                  |L9.40|
                          DCD      0x50004040
                  |L9.44|
                          DCD      0x00030d40
                  |L9.48|
                          DCD      playEndStatus

                          AREA ||i.App_StopRec||, CODE, READONLY, ALIGN=2

                  App_StopRec PROC
;;;186    //---------------------------------------------------------------------------------------------------------
;;;187    void App_StopRec(void)
000000  b510              PUSH     {r4,lr}
;;;188    {
;;;189    	// Stop mic.
;;;190    	Record_StopRec();
000002  f7fffffe          BL       Record_StopRec
;;;191    	
;;;192    	// Stop to NuOneEx encode process.
;;;193    	NuOneExApp_EncodeEnd(&g_sApp.sNuOneExAppEncode);
000006  4807              LDR      r0,|L10.36|
000008  f7fffffe          BL       NuOneExApp_EncodeEnd
;;;194    	
;;;195    	// Write audio chunk header(encode data length) into SPIFlash.
;;;196    	SPIFlashUtil_EndWriteEncodeData();
00000c  f7fffffe          BL       SPIFlashUtil_EndWriteEncodeData
;;;197    
;;;198    	OUT5(1);	
000010  2201              MOVS     r2,#1
000012  2110              MOVS     r1,#0x10
000014  4804              LDR      r0,|L10.40|
000016  f7fffffe          BL       OutputPin_Set
;;;199    
;;;200    	//this parameter is to prevent faulty when recording
;;;201    	recEndStatus = TRUE;		
00001a  2001              MOVS     r0,#1
00001c  4903              LDR      r1,|L10.44|
00001e  7008              STRB     r0,[r1,#0]
;;;202    }
000020  bd10              POP      {r4,pc}
;;;203    
                          ENDP

000022  0000              DCW      0x0000
                  |L10.36|
                          DCD      g_sApp
                  |L10.40|
                          DCD      0x50004040
                  |L10.44|
                          DCD      recEndStatus

;*** Start embedded assembler ***

#line 1 "..\\AppFunctions.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_AppFunctions_c_c2d1a264____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_AppFunctions_c_c2d1a264____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_AppFunctions_c_c2d1a264____REVSH|
#line 132
|__asm___14_AppFunctions_c_c2d1a264____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
