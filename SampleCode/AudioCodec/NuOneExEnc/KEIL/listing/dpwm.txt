; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\dpwm.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\dpwm.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\dpwm.crf ..\..\..\..\Library\StdDriver\src\dpwm.c]
                          THUMB

                          AREA ||i.DPWM_Close||, CODE, READONLY, ALIGN=1

                  DPWM_Close PROC
;;;40       */
;;;41     void DPWM_Close(void)
000000  4770              BX       lr
;;;42     {   
;;;43           
;;;44     }
;;;45     
                          ENDP


                          AREA ||i.DPWM_GetSampleRate||, CODE, READONLY, ALIGN=2

                  DPWM_GetSampleRate PROC
;;;93       */
;;;94     uint32_t DPWM_GetSampleRate(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96     	 SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;97        return (SystemCoreClock /(DPWM->ZOHDIV*64));
000006  4804              LDR      r0,|L2.24|
000008  6900              LDR      r0,[r0,#0x10]
00000a  0181              LSLS     r1,r0,#6
00000c  4803              LDR      r0,|L2.28|
00000e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000010  f7fffffe          BL       __aeabi_uidivmod
;;;98     }
000014  bd10              POP      {r4,pc}
;;;99     
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40070000
                  |L2.28|
                          DCD      SystemCoreClock

                          AREA ||i.DPWM_Open||, CODE, READONLY, ALIGN=1

                  DPWM_Open PROC
;;;30       */
;;;31     void DPWM_Open(void)
000000  4770              BX       lr
;;;32     {
;;;33     
;;;34     }
;;;35     
                          ENDP


                          AREA ||i.DPWM_SetSampleRate||, CODE, READONLY, ALIGN=2

                  DPWM_SetSampleRate PROC
;;;74       */
;;;75     uint32_t DPWM_SetSampleRate(uint32_t u32SampleRate)
000000  b570              PUSH     {r4-r6,lr}
;;;76     {
000002  4605              MOV      r5,r0
;;;77     	uint32_t u32Div;
;;;78     	
;;;79     	SystemCoreClockUpdate();
000004  f7fffffe          BL       SystemCoreClockUpdate
;;;80     	u32Div = (SystemCoreClock/64)/u32SampleRate;
000008  490a              LDR      r1,|L4.52|
00000a  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00000c  0988              LSRS     r0,r1,#6
00000e  4629              MOV      r1,r5
000010  f7fffffe          BL       __aeabi_uidivmod
000014  4604              MOV      r4,r0
;;;81     	
;;;82     	if(u32Div<1)
000016  2c00              CMP      r4,#0
000018  d100              BNE      |L4.28|
;;;83     		u32Div = 1;
00001a  2401              MOVS     r4,#1
                  |L4.28|
;;;84     	if (u32Div>255)
00001c  2cff              CMP      r4,#0xff
00001e  d900              BLS      |L4.34|
;;;85     		u32Div = 255;
000020  24ff              MOVS     r4,#0xff
                  |L4.34|
;;;86     	DPWM->ZOHDIV = u32Div;
000022  4805              LDR      r0,|L4.56|
000024  6104              STR      r4,[r0,#0x10]
;;;87     	return (SystemCoreClock /(DPWM->ZOHDIV*64));
000026  6900              LDR      r0,[r0,#0x10]
000028  0181              LSLS     r1,r0,#6
00002a  4802              LDR      r0,|L4.52|
00002c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00002e  f7fffffe          BL       __aeabi_uidivmod
;;;88     }
000032  bd70              POP      {r4-r6,pc}
;;;89     
                          ENDP

                  |L4.52|
                          DCD      SystemCoreClock
                  |L4.56|
                          DCD      0x40070000

                          AREA ||i.DPWM_WriteFIFO||, CODE, READONLY, ALIGN=2

                  DPWM_WriteFIFO PROC
;;;54       */
;;;55     void DPWM_WriteFIFO(int16_t *pi16Stream, uint32_t u32count)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	uint32_t u32countRemain;
;;;58     	
;;;59     	u32countRemain = u32count;
000002  460a              MOV      r2,r1
;;;60     
;;;61     	while(u32countRemain > 0)	
000004  e00a              B        |L5.28|
                  |L5.6|
;;;62     	{
;;;63     		while(DPWM->STS == 1); //FIFO is full
000006  bf00              NOP      
                  |L5.8|
000008  4b06              LDR      r3,|L5.36|
00000a  685b              LDR      r3,[r3,#4]
00000c  2b01              CMP      r3,#1
00000e  d0fb              BEQ      |L5.8|
;;;64     
;;;65     		DPWM->DATA = *pi16Stream++;
000010  2300              MOVS     r3,#0
000012  5ec3              LDRSH    r3,[r0,r3]
000014  4c03              LDR      r4,|L5.36|
000016  60e3              STR      r3,[r4,#0xc]
000018  1c80              ADDS     r0,r0,#2
;;;66     		u32countRemain --;	
00001a  1e52              SUBS     r2,r2,#1
                  |L5.28|
00001c  2a00              CMP      r2,#0                 ;61
00001e  d1f2              BNE      |L5.6|
;;;67     	}
;;;68     }
000020  bd10              POP      {r4,pc}
;;;69     
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x40070000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\dpwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_dpwm_c_faa0d074____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_dpwm_c_faa0d074____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_dpwm_c_faa0d074____REVSH|
#line 132
|__asm___6_dpwm_c_faa0d074____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
