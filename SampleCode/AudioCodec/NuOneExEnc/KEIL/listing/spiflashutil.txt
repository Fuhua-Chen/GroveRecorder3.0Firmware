; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\spiflashutil.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\spiflashutil.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\spiflashutil.crf ..\..\..\..\Library\Framework\src\SPIFlashUtil.c]
                          THUMB

                          AREA ||i.SPIFlahUtil_StartWriteEncodeData||, CODE, READONLY, ALIGN=2

                  SPIFlahUtil_StartWriteEncodeData PROC
;;;78     
;;;79     void SPIFlahUtil_StartWriteEncodeData(S_AUDIOCHUNK_HEADER *psAudioChunkHeader, 
000000  b570              PUSH     {r4-r6,lr}
;;;80     	UINT32 u32StorageStartAddr, PFN_SPIFLASHUTIL_WRITE_CALLBACK pfnSpiFlashWriteCallbck)
;;;81     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;82     	g_u32SPIFlashRecStartAddr = u32StorageStartAddr;
000008  4805              LDR      r0,|L1.32|
00000a  6004              STR      r4,[r0,#0]  ; g_u32SPIFlashRecStartAddr
;;;83     	SPIFlashUtil_4KPagePartialWriteInitiate(u32StorageStartAddr, pfnSpiFlashWriteCallbck);
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SPIFlashUtil_4KPagePartialWriteInitiate
;;;84     	SPIFlashUtil_4KPagePartialWriteWithWait((UINT8*)psAudioChunkHeader, sizeof(S_AUDIOCHUNK_HEADER));
000014  210c              MOVS     r1,#0xc
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       SPIFlashUtil_4KPagePartialWriteWithWait
;;;85     }
00001c  bd70              POP      {r4-r6,pc}
;;;86     
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      g_u32SPIFlashRecStartAddr

                          AREA ||i.SPIFlashUtil_4KPagePartialWriteInitiate||, CODE, READONLY, ALIGN=2

                  SPIFlashUtil_4KPagePartialWriteInitiate PROC
;;;14     	
;;;15     void SPIFlashUtil_4KPagePartialWriteInitiate(UINT32 u32Start4kPageAddr,
000000  b5f8              PUSH     {r3-r7,lr}
;;;16     	PFN_SPIFLASHUTIL_WRITE_CALLBACK pfnSpiFlashWriteCallbck )
;;;17     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;18     	g_pfnSpiFlashWriteCallbck = pfnSpiFlashWriteCallbck;
000006  480e              LDR      r0,|L2.64|
000008  6005              STR      r5,[r0,#0]  ; g_pfnSpiFlashWriteCallbck
;;;19     	g_u16PartialWriteDataLength = 0;
00000a  2000              MOVS     r0,#0
00000c  490d              LDR      r1,|L2.68|
00000e  8008              STRH     r0,[r1,#0]
;;;20     	g_u32SPIFlashRecAddr = u32Start4kPageAddr;
000010  480d              LDR      r0,|L2.72|
000012  6004              STR      r4,[r0,#0]  ; g_u32SPIFlashRecAddr
;;;21     	if ( u32Start4kPageAddr%SPIFLASH_4K_BLOCK )
000014  0520              LSLS     r0,r4,#20
000016  0d00              LSRS     r0,r0,#20
000018  2800              CMP      r0,#0
00001a  d010              BEQ      |L2.62|
;;;22     	{
;;;23     		// Start Address is not 4K alignment, pre-erase 4K page
;;;24     		SPIFlash_Erase4K(&g_sSpiFlash,u32Start4kPageAddr/SPIFLASH_4K_BLOCK, 1);
00001c  4e0b              LDR      r6,|L2.76|
00001e  0120              LSLS     r0,r4,#4
000020  0c07              LSRS     r7,r0,#16
000022  2001              MOVS     r0,#1
000024  9000              STR      r0,[sp,#0]
000026  0338              LSLS     r0,r7,#12
000028  2201              MOVS     r2,#1
00002a  0752              LSLS     r2,r2,#29
00002c  4310              ORRS     r0,r0,r2
00002e  4601              MOV      r1,r0
000030  1452              ASRS     r2,r2,#17
000032  4630              MOV      r0,r6
000034  9b00              LDR      r3,[sp,#0]
000036  f7fffffe          BL       SPIFlash_Erase
00003a  bf00              NOP      
00003c  bf00              NOP      
                  |L2.62|
;;;25     	}
;;;26     }
00003e  bdf8              POP      {r3-r7,pc}
;;;27     
                          ENDP

                  |L2.64|
                          DCD      g_pfnSpiFlashWriteCallbck
                  |L2.68|
                          DCD      g_u16PartialWriteDataLength
                  |L2.72|
                          DCD      g_u32SPIFlashRecAddr
                  |L2.76|
                          DCD      g_sSpiFlash

                          AREA ||i.SPIFlashUtil_4KPagePartialWriteStart||, CODE, READONLY, ALIGN=2

                  SPIFlashUtil_4KPagePartialWriteStart PROC
;;;27     
;;;28     void SPIFlashUtil_4KPagePartialWriteStart(UINT8 *pau8Data, UINT32 u32DataSize)
000000  4b02              LDR      r3,|L3.12|
;;;29     {
;;;30     	g_u16PartialWriteDataLength = u32DataSize;
000002  8019              STRH     r1,[r3,#0]
;;;31     	g_pu8PartialWriteData = pau8Data;
000004  4a02              LDR      r2,|L3.16|
000006  6010              STR      r0,[r2,#0]  ; g_pu8PartialWriteData
;;;32     }
000008  4770              BX       lr
;;;33     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      g_u16PartialWriteDataLength
                  |L3.16|
                          DCD      g_pu8PartialWriteData

                          AREA ||i.SPIFlashUtil_4KPagePartialWriteWithWait||, CODE, READONLY, ALIGN=1

                  SPIFlashUtil_4KPagePartialWriteWithWait PROC
;;;72     
;;;73     void SPIFlashUtil_4KPagePartialWriteWithWait(UINT8 *pau8WriteData, UINT32 u32WriteDataCount)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {	
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;75     	SPIFlashUtil_4KPagePartialWriteStart(pau8WriteData, u32WriteDataCount);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SPIFlashUtil_4KPagePartialWriteStart
;;;76     	SPIFlashUtil_4KPagePartialWritWaitComplete();
00000e  bf00              NOP      
                  |L4.16|
000010  f7fffffe          BL       SPIFlashUtil_4KPagePartialWriting
000014  2801              CMP      r0,#1
000016  d0fb              BEQ      |L4.16|
;;;77     }
000018  bd70              POP      {r4-r6,pc}
;;;78     
                          ENDP


                          AREA ||i.SPIFlashUtil_4KPagePartialWriting||, CODE, READONLY, ALIGN=2

                  SPIFlashUtil_4KPagePartialWriting PROC
;;;33     
;;;34     BOOL SPIFlashUtil_4KPagePartialWriting(void)
000000  b570              PUSH     {r4-r6,lr}
;;;35     {
;;;36     #define SPIFLASH_CTRL_ERASE	1
;;;37     	static UINT8 u8SPiFlashCtrl = 0;
;;;38     	UINT32 u32DoWriteByte;
;;;39     	
;;;40     	// SPI Flash should not do any thing if in busy state(programming or erasing 4K page) 
;;;41     	if ( SPIFlash_CheckBusy(&g_sSpiFlash) == TRUE )
000002  482a              LDR      r0,|L5.172|
000004  f7fffffe          BL       SPIFlash_CheckBusy
000008  2801              CMP      r0,#1
00000a  d100              BNE      |L5.14|
                  |L5.12|
;;;42     		return TRUE;
;;;43     
;;;44     	// This is used to execute other jobs which can read SPI Flash before start progamming or earsing
;;;45     	// to avoid the SPI flash write processing occupying all SPI flash!
;;;46     	if ( g_pfnSpiFlashWriteCallbck!=NULL )
;;;47     		g_pfnSpiFlashWriteCallbck();
;;;48     	
;;;49     	if ( g_u16PartialWriteDataLength == 0 )
;;;50     		return FALSE;
;;;51     
;;;52     	if ((g_u32SPIFlashRecAddr%(SPIFLASH_4K_BLOCK) == 0)	// Check 4k boundary
;;;53     		&&(u8SPiFlashCtrl != SPIFLASH_CTRL_ERASE))		// Check should do 4k page erasing or not
;;;54     	{
;;;55     		SPIFlash_Erase4KStart(&g_sSpiFlash,g_u32SPIFlashRecAddr>>12);
;;;56     		u8SPiFlashCtrl = SPIFLASH_CTRL_ERASE;
;;;57     		return TRUE;
;;;58     	} 
;;;59     	u8SPiFlashCtrl = 0;
;;;60     
;;;61     	SPIFlash_WriteStart(&g_sSpiFlash,g_u32SPIFlashRecAddr);
;;;62     	u32DoWriteByte = SPIFlash_WriteData(&g_sSpiFlash,g_u32SPIFlashRecAddr, g_pu8PartialWriteData, g_u16PartialWriteDataLength);										 
;;;63     	SPIFlash_WriteEnd(&g_sSpiFlash);
;;;64     
;;;65     	g_u16PartialWriteDataLength -= u32DoWriteByte;
;;;66     	g_pu8PartialWriteData += u32DoWriteByte;
;;;67     	g_u32SPIFlashRecAddr += u32DoWriteByte;
;;;68     
;;;69     
;;;70     	return TRUE;
;;;71     }
00000c  bd70              POP      {r4-r6,pc}
                  |L5.14|
00000e  4828              LDR      r0,|L5.176|
000010  6800              LDR      r0,[r0,#0]            ;46  ; g_pfnSpiFlashWriteCallbck
000012  2800              CMP      r0,#0                 ;46
000014  d002              BEQ      |L5.28|
000016  4826              LDR      r0,|L5.176|
000018  6800              LDR      r0,[r0,#0]            ;47  ; g_pfnSpiFlashWriteCallbck
00001a  4780              BLX      r0                    ;47
                  |L5.28|
00001c  4825              LDR      r0,|L5.180|
00001e  8800              LDRH     r0,[r0,#0]            ;49  ; g_u16PartialWriteDataLength
000020  2800              CMP      r0,#0                 ;49
000022  d100              BNE      |L5.38|
000024  e7f2              B        |L5.12|
                  |L5.38|
000026  4824              LDR      r0,|L5.184|
000028  8800              LDRH     r0,[r0,#0]            ;52  ; g_u32SPIFlashRecAddr
00002a  0500              LSLS     r0,r0,#20             ;52
00002c  0d00              LSRS     r0,r0,#20             ;52
00002e  2800              CMP      r0,#0                 ;52
000030  d115              BNE      |L5.94|
000032  4822              LDR      r0,|L5.188|
000034  7800              LDRB     r0,[r0,#0]            ;53  ; u8SPiFlashCtrl
000036  2801              CMP      r0,#1                 ;53
000038  d011              BEQ      |L5.94|
00003a  4d1c              LDR      r5,|L5.172|
00003c  481e              LDR      r0,|L5.184|
00003e  6800              LDR      r0,[r0,#0]            ;55  ; g_u32SPIFlashRecAddr
000040  0100              LSLS     r0,r0,#4              ;55
000042  0c06              LSRS     r6,r0,#16             ;55
000044  0330              LSLS     r0,r6,#12             ;55
000046  2201              MOVS     r2,#1                 ;55
000048  0752              LSLS     r2,r2,#29             ;55
00004a  4310              ORRS     r0,r0,r2              ;55
00004c  4601              MOV      r1,r0                 ;55
00004e  4628              MOV      r0,r5                 ;55
000050  f7fffffe          BL       SPIFlash_EraseStart
000054  bf00              NOP                            ;55
000056  2001              MOVS     r0,#1                 ;56
000058  4918              LDR      r1,|L5.188|
00005a  7008              STRB     r0,[r1,#0]            ;56
00005c  e7d6              B        |L5.12|
                  |L5.94|
00005e  2000              MOVS     r0,#0                 ;59
000060  4916              LDR      r1,|L5.188|
000062  7008              STRB     r0,[r1,#0]            ;59
000064  4814              LDR      r0,|L5.184|
000066  6801              LDR      r1,[r0,#0]            ;61  ; g_u32SPIFlashRecAddr
000068  4810              LDR      r0,|L5.172|
00006a  f7fffffe          BL       SPIFlash_WriteStart
00006e  4811              LDR      r0,|L5.180|
000070  8803              LDRH     r3,[r0,#0]            ;62  ; g_u16PartialWriteDataLength
000072  4813              LDR      r0,|L5.192|
000074  6802              LDR      r2,[r0,#0]            ;62  ; g_pu8PartialWriteData
000076  4810              LDR      r0,|L5.184|
000078  6801              LDR      r1,[r0,#0]            ;62  ; g_u32SPIFlashRecAddr
00007a  480c              LDR      r0,|L5.172|
00007c  f7fffffe          BL       SPIFlash_WriteData
000080  4604              MOV      r4,r0                 ;62
000082  480a              LDR      r0,|L5.172|
000084  f7fffffe          BL       SPIFlash_WriteEnd
000088  480a              LDR      r0,|L5.180|
00008a  8800              LDRH     r0,[r0,#0]            ;65  ; g_u16PartialWriteDataLength
00008c  1b00              SUBS     r0,r0,r4              ;65
00008e  4909              LDR      r1,|L5.180|
000090  8008              STRH     r0,[r1,#0]            ;65
000092  480b              LDR      r0,|L5.192|
000094  6800              LDR      r0,[r0,#0]            ;66  ; g_pu8PartialWriteData
000096  1900              ADDS     r0,r0,r4              ;66
000098  4909              LDR      r1,|L5.192|
00009a  6008              STR      r0,[r1,#0]            ;66  ; g_pu8PartialWriteData
00009c  4806              LDR      r0,|L5.184|
00009e  6800              LDR      r0,[r0,#0]            ;67  ; g_u32SPIFlashRecAddr
0000a0  1900              ADDS     r0,r0,r4              ;67
0000a2  4905              LDR      r1,|L5.184|
0000a4  6008              STR      r0,[r1,#0]            ;67  ; g_u32SPIFlashRecAddr
0000a6  2001              MOVS     r0,#1                 ;70
0000a8  e7b0              B        |L5.12|
;;;72     
                          ENDP

0000aa  0000              DCW      0x0000
                  |L5.172|
                          DCD      g_sSpiFlash
                  |L5.176|
                          DCD      g_pfnSpiFlashWriteCallbck
                  |L5.180|
                          DCD      g_u16PartialWriteDataLength
                  |L5.184|
                          DCD      g_u32SPIFlashRecAddr
                  |L5.188|
                          DCD      u8SPiFlashCtrl
                  |L5.192|
                          DCD      g_pu8PartialWriteData

                          AREA ||i.SPIFlashUtil_EndWriteEncodeData||, CODE, READONLY, ALIGN=2

                  SPIFlashUtil_EndWriteEncodeData PROC
;;;86     
;;;87     void SPIFlashUtil_EndWriteEncodeData(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;88     {
;;;89     	S_AUDIOCHUNK_HEADER sAudioChunkHeader;
;;;90     	
;;;91     	SPIFlashUtil_4KPagePartialWritWaitComplete(); 			// This is to wait the last SPI flash writing to completed
000002  bf00              NOP      
                  |L6.4|
000004  f7fffffe          BL       SPIFlashUtil_4KPagePartialWriting
000008  2801              CMP      r0,#1
00000a  d0fb              BEQ      |L6.4|
;;;92     
;;;93     	SPIFlash_Read(&g_sSpiFlash, g_u32SPIFlashRecStartAddr, (UINT8*)&sAudioChunkHeader, sizeof(S_AUDIOCHUNK_HEADER));
00000c  230c              MOVS     r3,#0xc
00000e  466a              MOV      r2,sp
000010  4809              LDR      r0,|L6.56|
000012  6801              LDR      r1,[r0,#0]  ; g_u32SPIFlashRecStartAddr
000014  4809              LDR      r0,|L6.60|
000016  f7fffffe          BL       SPIFlash_Read
;;;94     	sAudioChunkHeader.u32TotalSize =  (g_u32SPIFlashRecAddr - g_u32SPIFlashRecStartAddr) - sizeof(S_AUDIOCHUNK_HEADER);
00001a  4809              LDR      r0,|L6.64|
00001c  6800              LDR      r0,[r0,#0]  ; g_u32SPIFlashRecAddr
00001e  4906              LDR      r1,|L6.56|
000020  6809              LDR      r1,[r1,#0]  ; g_u32SPIFlashRecStartAddr
000022  1a40              SUBS     r0,r0,r1
000024  380c              SUBS     r0,r0,#0xc
000026  9001              STR      r0,[sp,#4]
;;;95     	SPIFlash_Write(&g_sSpiFlash, g_u32SPIFlashRecStartAddr, (UINT8*)&sAudioChunkHeader, sizeof(S_AUDIOCHUNK_HEADER));
000028  230c              MOVS     r3,#0xc
00002a  466a              MOV      r2,sp
00002c  4802              LDR      r0,|L6.56|
00002e  6801              LDR      r1,[r0,#0]  ; g_u32SPIFlashRecStartAddr
000030  4802              LDR      r0,|L6.60|
000032  f7fffffe          BL       SPIFlash_Write
;;;96     }
000036  bd0e              POP      {r1-r3,pc}
;;;97     
                          ENDP

                  |L6.56|
                          DCD      g_u32SPIFlashRecStartAddr
                  |L6.60|
                          DCD      g_sSpiFlash
                  |L6.64|
                          DCD      g_u32SPIFlashRecAddr

                          AREA ||i.SPIFlashUtil_WriteEncodeData||, CODE, READONLY, ALIGN=1

                  SPIFlashUtil_WriteEncodeData PROC
;;;97     
;;;98     void SPIFlashUtil_WriteEncodeData(S_BUF_CTRL *psEncodeBufCtrl)
000000  b510              PUSH     {r4,lr}
;;;99     {		
000002  4604              MOV      r4,r0
;;;100    	if ( SPIFlashUtil_4KPagePartialWriting() == FALSE )
000004  f7fffffe          BL       SPIFlashUtil_4KPagePartialWriting
000008  2800              CMP      r0,#0
00000a  d113              BNE      |L7.52|
;;;101    	{
;;;102    		if ( psEncodeBufCtrl->u16BufReadIdx != psEncodeBufCtrl->u16BufWriteIdx )
00000c  8920              LDRH     r0,[r4,#8]
00000e  8961              LDRH     r1,[r4,#0xa]
000010  4288              CMP      r0,r1
000012  d00f              BEQ      |L7.52|
;;;103    		{
;;;104    			SPIFlashUtil_4KPagePartialWriteStart(((UINT8*)(psEncodeBufCtrl->pi16Buf)) + psEncodeBufCtrl->u16BufReadIdx, psEncodeBufCtrl->u16FrameSize);
000014  8923              LDRH     r3,[r4,#8]
000016  6862              LDR      r2,[r4,#4]
000018  18d0              ADDS     r0,r2,r3
00001a  89e1              LDRH     r1,[r4,#0xe]
00001c  f7fffffe          BL       SPIFlashUtil_4KPagePartialWriteStart
;;;105    			if ( (psEncodeBufCtrl->u16BufReadIdx+=psEncodeBufCtrl->u16FrameSize) >= psEncodeBufCtrl->u16BufCount )
000020  8920              LDRH     r0,[r4,#8]
000022  89e1              LDRH     r1,[r4,#0xe]
000024  1840              ADDS     r0,r0,r1
000026  b280              UXTH     r0,r0
000028  8120              STRH     r0,[r4,#8]
00002a  8861              LDRH     r1,[r4,#2]
00002c  4288              CMP      r0,r1
00002e  db01              BLT      |L7.52|
;;;106    				psEncodeBufCtrl->u16BufReadIdx = 0;
000030  2000              MOVS     r0,#0
000032  8120              STRH     r0,[r4,#8]
                  |L7.52|
;;;107    		}
;;;108    	}
;;;109    }
000034  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  g_u16PartialWriteDataLength
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  g_pu8PartialWriteData
                          DCD      0x00000000
                  g_u32SPIFlashRecAddr
                          DCD      0x00000000
                  g_u32SPIFlashRecStartAddr
                          DCD      0x00000000
                  g_pfnSpiFlashWriteCallbck
                          DCD      0x00000000
                  u8SPiFlashCtrl
000014  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Framework\\src\\SPIFlashUtil.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_SPIFlashUtil_c_57d9ba73____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_SPIFlashUtil_c_57d9ba73____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_SPIFlashUtil_c_57d9ba73____REVSH|
#line 132
|__asm___14_SPIFlashUtil_c_57d9ba73____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
