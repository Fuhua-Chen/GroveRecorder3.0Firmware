; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\crc.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\crc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\crc.crf ..\..\..\..\Library\StdDriver\src\CRC.c]
                          THUMB

                          AREA ||i.CRC_Calc||, CODE, READONLY, ALIGN=2

                  CRC_Calc PROC
;;;68       */
;;;69     int16_t CRC_Calc( uint32_t *Data, int32_t i32PacketLen)
000000  4602              MOV      r2,r0
;;;70     {
;;;71        
;;;72         while( i32PacketLen > 0){
000002  e003              B        |L1.12|
                  |L1.4|
;;;73     		CRC->DAT = *Data++;
000004  ca01              LDM      r2!,{r0}
000006  4b04              LDR      r3,|L1.24|
000008  6058              STR      r0,[r3,#4]
;;;74     		i32PacketLen-=4;
00000a  1f09              SUBS     r1,r1,#4
                  |L1.12|
00000c  2900              CMP      r1,#0                 ;72
00000e  dcf9              BGT      |L1.4|
;;;75     	}
;;;76     
;;;77         return CRC->CHECKSUM;
000010  4801              LDR      r0,|L1.24|
000012  6880              LDR      r0,[r0,#8]
000014  b200              SXTH     r0,r0
;;;78     }
000016  4770              BX       lr
;;;79     
                          ENDP

                  |L1.24|
                          DCD      0x40090000

                          AREA ||i.CRC_Close||, CODE, READONLY, ALIGN=2

                  CRC_Close PROC
;;;82       */
;;;83     void CRC_Close(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85     		SYS->IPRST1 = (SYS->IPRST1 | SYS_IPRST1_CRCRST_Msk);
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  68c0              LDR      r0,[r0,#0xc]
000008  2101              MOVS     r1,#1
00000a  04c9              LSLS     r1,r1,#19
00000c  4308              ORRS     r0,r0,r1
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  60c8              STR      r0,[r1,#0xc]
;;;86     		SYS->IPRST1 = (SYS->IPRST1 & (~SYS_IPRST1_CRCRST_Msk));
000014  4608              MOV      r0,r1
000016  68c0              LDR      r0,[r0,#0xc]
000018  2101              MOVS     r1,#1
00001a  04c9              LSLS     r1,r1,#19
00001c  4388              BICS     r0,r0,r1
00001e  2105              MOVS     r1,#5
000020  0709              LSLS     r1,r1,#28
000022  60c8              STR      r0,[r1,#0xc]
;;;87     		CLK_DisableModuleClock(CRC_MODULE);
000024  4801              LDR      r0,|L2.44|
000026  f7fffffe          BL       CLK_DisableModuleClock
;;;88     }
00002a  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  |L2.44|
                          DCD      0x40000013

                          AREA ||i.CRC_Init||, CODE, READONLY, ALIGN=2

                  CRC_Init PROC
;;;48       */
;;;49     int32_t CRC_Init(uint32_t eLSB, int32_t i32PacketLen)
000000  4602              MOV      r2,r0
;;;50     {
;;;51        
;;;52         CRC->CTL = (CRC->CTL | eLSB);
000002  480f              LDR      r0,|L3.64|
000004  6800              LDR      r0,[r0,#0]
000006  4310              ORRS     r0,r0,r2
000008  4b0d              LDR      r3,|L3.64|
00000a  6018              STR      r0,[r3,#0]
;;;53         if(i32PacketLen > 512)
00000c  1558              ASRS     r0,r3,#21
00000e  4281              CMP      r1,r0
000010  dd02              BLE      |L3.24|
;;;54             return -1;
000012  2000              MOVS     r0,#0
000014  43c0              MVNS     r0,r0
                  |L3.22|
;;;55         if(i32PacketLen%2==1)
;;;56             return -1;
;;;57         CRC->CTL = (CRC->CTL & (~CRC_CTL_PKTLEN_Msk) | (i32PacketLen-1)); 
;;;58     
;;;59         return E_SUCCESS;
;;;60     }
000016  4770              BX       lr
                  |L3.24|
000018  4608              MOV      r0,r1                 ;55
00001a  0fcb              LSRS     r3,r1,#31             ;55
00001c  181b              ADDS     r3,r3,r0              ;55
00001e  105b              ASRS     r3,r3,#1              ;55
000020  005b              LSLS     r3,r3,#1              ;55
000022  1acb              SUBS     r3,r1,r3              ;55
000024  2b01              CMP      r3,#1                 ;55
000026  d101              BNE      |L3.44|
000028  1e98              SUBS     r0,r3,#2              ;56
00002a  e7f4              B        |L3.22|
                  |L3.44|
00002c  4804              LDR      r0,|L3.64|
00002e  6800              LDR      r0,[r0,#0]            ;57
000030  0a40              LSRS     r0,r0,#9              ;57
000032  0240              LSLS     r0,r0,#9              ;57
000034  1e4b              SUBS     r3,r1,#1              ;57
000036  4318              ORRS     r0,r0,r3              ;57
000038  4b01              LDR      r3,|L3.64|
00003a  6018              STR      r0,[r3,#0]            ;57
00003c  2000              MOVS     r0,#0                 ;59
00003e  e7ea              B        |L3.22|
;;;61     
                          ENDP

                  |L3.64|
                          DCD      0x40090000

                          AREA ||i.CRC_Open||, CODE, READONLY, ALIGN=2

                  CRC_Open PROC
;;;32       */
;;;33     int32_t CRC_Open(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35     		CLK_EnableModuleClock(CRC_MODULE);
000002  480b              LDR      r0,|L4.48|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;36     		SYS->IPRST1 = (SYS->IPRST1 | SYS_IPRST1_CRCRST_Msk);
000008  2005              MOVS     r0,#5
00000a  0700              LSLS     r0,r0,#28
00000c  68c0              LDR      r0,[r0,#0xc]
00000e  2101              MOVS     r1,#1
000010  04c9              LSLS     r1,r1,#19
000012  4308              ORRS     r0,r0,r1
000014  2105              MOVS     r1,#5
000016  0709              LSLS     r1,r1,#28
000018  60c8              STR      r0,[r1,#0xc]
;;;37     		SYS->IPRST1 = (SYS->IPRST1 & (~SYS_IPRST1_CRCRST_Msk));
00001a  4608              MOV      r0,r1
00001c  68c0              LDR      r0,[r0,#0xc]
00001e  2101              MOVS     r1,#1
000020  04c9              LSLS     r1,r1,#19
000022  4388              BICS     r0,r0,r1
000024  2105              MOVS     r1,#5
000026  0709              LSLS     r1,r1,#28
000028  60c8              STR      r0,[r1,#0xc]
;;;38     
;;;39         return E_SUCCESS;
00002a  2000              MOVS     r0,#0
;;;40     }
00002c  bd10              POP      {r4,pc}
;;;41     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      0x40000013

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\CRC.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_CRC_c_CRC_Open____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_CRC_c_CRC_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_CRC_c_CRC_Open____REVSH|
#line 132
|__asm___5_CRC_c_CRC_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
