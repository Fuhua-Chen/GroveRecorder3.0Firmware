; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\i2s.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\i2s.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\i2s.crf ..\..\..\..\Library\StdDriver\src\i2s.c]
                          THUMB

                          AREA ||i.I2S_Close||, CODE, READONLY, ALIGN=2

                  I2S_Close PROC
;;;122      */
;;;123    void I2S_Close(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;124    {
;;;125        i2s->CTL &= ~I2S_CTL_I2SEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;126    
;;;127        NVIC_DisableIRQ(I2S0_IRQn);
000008  211b              MOVS     r1,#0x1b
00000a  2201              MOVS     r2,#1
00000c  408a              LSLS     r2,r2,r1
00000e  4b02              LDR      r3,|L1.24|
000010  601a              STR      r2,[r3,#0]
000012  bf00              NOP      
;;;128    }
000014  4770              BX       lr
;;;129    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0xe000e180

                          AREA ||i.I2S_DisableInt||, CODE, READONLY, ALIGN=1

                  I2S_DisableInt PROC
;;;148      */
;;;149    void I2S_DisableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;150    {
;;;151        i2s->IEN &= ~u32Mask;
000002  438a              BICS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;152    }
000006  4770              BX       lr
;;;153    
                          ENDP


                          AREA ||i.I2S_DisableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_DisableMCLK PROC
;;;187      */
;;;188    void I2S_DisableMCLK(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;189    {
;;;190        i2s->CTL &= ~I2S_CTL_MCLKEN_Msk;
000002  2201              MOVS     r2,#1
000004  03d2              LSLS     r2,r2,#15
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;191    }
00000a  4770              BX       lr
;;;192    /*@}*/ /* end of group ISD9100_I2S_EXPORTED_FUNCTIONS */
                          ENDP


                          AREA ||i.I2S_EnableInt||, CODE, READONLY, ALIGN=1

                  I2S_EnableInt PROC
;;;136      */
;;;137    void I2S_EnableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;138    {
;;;139        i2s->IEN |= u32Mask;
000002  430a              ORRS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;140    }
000006  4770              BX       lr
;;;141    
                          ENDP


                          AREA ||i.I2S_EnableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_EnableMCLK PROC
;;;159      */
;;;160    uint32_t I2S_EnableMCLK(I2S_T *i2s, uint32_t u32BusClock)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;161    {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;162        uint8_t u8Divider;
;;;163        uint32_t u32SrcClk, u32Reg;
;;;164    
;;;165        u32SrcClk = I2S_GetSourceClockFreq(i2s);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2S_GetSourceClockFreq
00000c  4606              MOV      r6,r0
;;;166        if (u32BusClock == u32SrcClk)
00000e  9802              LDR      r0,[sp,#8]
000010  42b0              CMP      r0,r6
000012  d101              BNE      |L5.24|
;;;167            u8Divider = 0;
000014  2500              MOVS     r5,#0
000016  e005              B        |L5.36|
                  |L5.24|
;;;168        else
;;;169            u8Divider = (u32SrcClk/u32BusClock) >> 1;
000018  4630              MOV      r0,r6
00001a  9902              LDR      r1,[sp,#8]
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  05c0              LSLS     r0,r0,#23
000022  0e05              LSRS     r5,r0,#24
                  |L5.36|
;;;170    
;;;171        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_MCLKDIV_Msk) | u8Divider;
000024  6860              LDR      r0,[r4,#4]
000026  08c0              LSRS     r0,r0,#3
000028  00c0              LSLS     r0,r0,#3
00002a  4328              ORRS     r0,r0,r5
00002c  6060              STR      r0,[r4,#4]
;;;172    
;;;173        i2s->CTL |= I2S_CTL_MCLKEN_Msk;
00002e  6820              LDR      r0,[r4,#0]
000030  2101              MOVS     r1,#1
000032  03c9              LSLS     r1,r1,#15
000034  4308              ORRS     r0,r0,r1
000036  6020              STR      r0,[r4,#0]
;;;174    
;;;175        u32Reg = i2s->CLKDIV & I2S_CLKDIV_MCLKDIV_Msk;
000038  6860              LDR      r0,[r4,#4]
00003a  0747              LSLS     r7,r0,#29
00003c  0f7f              LSRS     r7,r7,#29
;;;176    
;;;177        if (u32Reg == 0)
00003e  2f00              CMP      r7,#0
000040  d101              BNE      |L5.70|
;;;178            return u32SrcClk;
000042  4630              MOV      r0,r6
                  |L5.68|
;;;179        else
;;;180            return ((u32SrcClk >> 1) / u32Reg);
;;;181    }
000044  bdfe              POP      {r1-r7,pc}
                  |L5.70|
000046  0870              LSRS     r0,r6,#1              ;180
000048  4639              MOV      r1,r7                 ;180
00004a  f7fffffe          BL       __aeabi_uidivmod
00004e  e7f9              B        |L5.68|
;;;182    
                          ENDP


                          AREA ||i.I2S_GetSourceClockFreq||, CODE, READONLY, ALIGN=2

                  I2S_GetSourceClockFreq PROC
;;;31       */
;;;32     static uint32_t I2S_GetSourceClockFreq(I2S_T *i2s)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
000002  4605              MOV      r5,r0
;;;34         uint32_t u32Freq, u32ClkSrcSel;
;;;35     
;;;36         // get I2S selection clock source
;;;37         u32ClkSrcSel = CLK->CLKSEL2 & CLK_CLKSEL2_I2S0SEL_Msk;
000004  490d              LDR      r1,|L6.60|
000006  69c9              LDR      r1,[r1,#0x1c]
000008  078c              LSLS     r4,r1,#30
00000a  0fa4              LSRS     r4,r4,#30
;;;38     
;;;39         switch (u32ClkSrcSel) {
00000c  2c00              CMP      r4,#0
00000e  d006              BEQ      |L6.30|
000010  2c01              CMP      r4,#1
000012  d007              BEQ      |L6.36|
000014  2c02              CMP      r4,#2
000016  d008              BEQ      |L6.42|
000018  2c03              CMP      r4,#3
00001a  d10b              BNE      |L6.52|
00001c  e008              B        |L6.48|
                  |L6.30|
;;;40         case CLK_CLKSEL2_I2S0SEL_LIRC:
;;;41             u32Freq = __LIRC;
00001e  207d              MOVS     r0,#0x7d
000020  01c0              LSLS     r0,r0,#7
;;;42             break;
000022  e009              B        |L6.56|
                  |L6.36|
;;;43     
;;;44         case CLK_CLKSEL2_I2S0SEL_LXT:
;;;45             u32Freq = __LXT;
000024  2001              MOVS     r0,#1
000026  03c0              LSLS     r0,r0,#15
;;;46             break;
000028  e006              B        |L6.56|
                  |L6.42|
;;;47     
;;;48         case CLK_CLKSEL2_I2S0SEL_HCLK:
;;;49             u32Freq = CLK_GetHCLKFreq();
00002a  f7fffffe          BL       CLK_GetHCLKFreq
;;;50             break;
00002e  e003              B        |L6.56|
                  |L6.48|
;;;51     
;;;52         case CLK_CLKSEL2_I2S0SEL_HIRC:
;;;53             u32Freq = __HIRC;
000030  4803              LDR      r0,|L6.64|
;;;54             break;
000032  e001              B        |L6.56|
                  |L6.52|
;;;55     
;;;56         default:
;;;57             u32Freq = __HIRC;
000034  4802              LDR      r0,|L6.64|
;;;58             break;
000036  bf00              NOP      
                  |L6.56|
000038  bf00              NOP                            ;42
;;;59         }
;;;60     
;;;61         return u32Freq;
;;;62     }
00003a  bd70              POP      {r4-r6,pc}
;;;63     
                          ENDP

                  |L6.60|
                          DCD      0x50000200
                  |L6.64|
                          DCD      0x02ee0000

                          AREA ||i.I2S_Open||, CODE, READONLY, ALIGN=2

                  I2S_Open PROC
;;;90       */
;;;91     uint32_t I2S_Open(I2S_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32Channels, uint32_t u32DataFormat, uint32_t u32AudioInterface)
000000  b5fe              PUSH     {r1-r7,lr}
;;;92     {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
000008  461d              MOV      r5,r3
;;;93         uint16_t u16Divider;
;;;94         uint32_t u32BitRate, u32SrcClk;
;;;95     
;;;96         SYS->IPRST1 |= SYS_IPRST1_SPI0RST_Msk;
00000a  2005              MOVS     r0,#5
00000c  0700              LSLS     r0,r0,#28
00000e  68c0              LDR      r0,[r0,#0xc]
000010  2101              MOVS     r1,#1
000012  0309              LSLS     r1,r1,#12
000014  4308              ORRS     r0,r0,r1
000016  2105              MOVS     r1,#5
000018  0709              LSLS     r1,r1,#28
00001a  60c8              STR      r0,[r1,#0xc]
;;;97         SYS->IPRST1 &= ~SYS_IPRST1_SPI0RST_Msk;
00001c  4608              MOV      r0,r1
00001e  68c0              LDR      r0,[r0,#0xc]
000020  2101              MOVS     r1,#1
000022  0309              LSLS     r1,r1,#12
000024  4388              BICS     r0,r0,r1
000026  2105              MOVS     r1,#5
000028  0709              LSLS     r1,r1,#28
00002a  60c8              STR      r0,[r1,#0xc]
;;;98     
;;;99         i2s->CTL = u32MasterSlave | u32WordWidth | u32Channels | u32DataFormat | u32AudioInterface | I2S_FIFO_TX_LEVEL_WORD_4 | I2S_FIFO_RX_LEVEL_WORD_4;
00002c  4638              MOV      r0,r7
00002e  4328              ORRS     r0,r0,r5
000030  9908              LDR      r1,[sp,#0x20]
000032  4308              ORRS     r0,r0,r1
000034  9909              LDR      r1,[sp,#0x24]
000036  4308              ORRS     r0,r0,r1
000038  990a              LDR      r1,[sp,#0x28]
00003a  4308              ORRS     r0,r0,r1
00003c  2107              MOVS     r1,#7
00003e  02c9              LSLS     r1,r1,#11
000040  4308              ORRS     r0,r0,r1
000042  6020              STR      r0,[r4,#0]
;;;100    
;;;101        u32SrcClk = I2S_GetSourceClockFreq(i2s);
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       I2S_GetSourceClockFreq
00004a  9000              STR      r0,[sp,#0]
;;;102    
;;;103        u32BitRate = u32SampleRate * (((u32WordWidth>>4) & 0x3) + 1) * 16;
00004c  06a8              LSLS     r0,r5,#26
00004e  0f80              LSRS     r0,r0,#30
000050  1c40              ADDS     r0,r0,#1
000052  4370              MULS     r0,r6,r0
000054  0100              LSLS     r0,r0,#4
000056  9001              STR      r0,[sp,#4]
;;;104        u16Divider = ((u32SrcClk/u32BitRate) >> 1) - 1;
000058  9901              LDR      r1,[sp,#4]
00005a  9800              LDR      r0,[sp,#0]
00005c  f7fffffe          BL       __aeabi_uidivmod
000060  0840              LSRS     r0,r0,#1
000062  1e40              SUBS     r0,r0,#1
000064  b280              UXTH     r0,r0
000066  9002              STR      r0,[sp,#8]
;;;105        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_BCLKDIV_Msk) | (u16Divider << 8);
000068  6860              LDR      r0,[r4,#4]
00006a  21ff              MOVS     r1,#0xff
00006c  0209              LSLS     r1,r1,#8
00006e  4388              BICS     r0,r0,r1
000070  9902              LDR      r1,[sp,#8]
000072  0209              LSLS     r1,r1,#8
000074  4308              ORRS     r0,r0,r1
000076  6060              STR      r0,[r4,#4]
;;;106    
;;;107        //calculate real sample rate
;;;108        u32BitRate = u32SrcClk / (2*(u16Divider+1));
000078  9802              LDR      r0,[sp,#8]
00007a  1c40              ADDS     r0,r0,#1
00007c  0041              LSLS     r1,r0,#1
00007e  9800              LDR      r0,[sp,#0]
000080  f7fffffe          BL       __aeabi_uidivmod
000084  9001              STR      r0,[sp,#4]
;;;109        u32SampleRate = u32BitRate / ((((u32WordWidth>>4) & 0x3) + 1) * 16);
000086  06a8              LSLS     r0,r5,#26
000088  0f80              LSRS     r0,r0,#30
00008a  1c40              ADDS     r0,r0,#1
00008c  0101              LSLS     r1,r0,#4
00008e  9801              LDR      r0,[sp,#4]
000090  f7fffffe          BL       __aeabi_uidivmod
000094  4606              MOV      r6,r0
;;;110    
;;;111        i2s->CTL |= I2S_CTL_I2SEN_Msk;
000096  6820              LDR      r0,[r4,#0]
000098  2101              MOVS     r1,#1
00009a  4308              ORRS     r0,r0,r1
00009c  6020              STR      r0,[r4,#0]
;;;112    
;;;113        NVIC_EnableIRQ(I2S0_IRQn);
00009e  201b              MOVS     r0,#0x1b
0000a0  4081              LSLS     r1,r1,r0
0000a2  4a02              LDR      r2,|L7.172|
0000a4  6011              STR      r1,[r2,#0]
0000a6  bf00              NOP      
;;;114    
;;;115        return u32SampleRate;
0000a8  4630              MOV      r0,r6
;;;116    }
0000aa  bdfe              POP      {r1-r7,pc}
;;;117    
                          ENDP

                  |L7.172|
                          DCD      0xe000e100

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\i2s.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_i2s_c_I2S_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REVSH|
#line 132
|__asm___5_i2s_c_I2S_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
