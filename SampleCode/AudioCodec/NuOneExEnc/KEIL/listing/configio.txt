; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\configio.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\configio.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\configio.crf ..\..\..\..\Library\Framework\src\ConfigIO.c]
                          THUMB

                          AREA ||i.InputKey_Change||, CODE, READONLY, ALIGN=2

                  InputKey_Change PROC
;;;27     
;;;28     void InputKey_Change(UINT32 u32InputStateIndex)
000000  b510              PUSH     {r4,lr}
;;;29     {
000002  4604              MOV      r4,r0
;;;30     	#if (TRIGGER_KEY_COUNT>0)
;;;31     	Keypad_InitTgr( TRIGGER_PORTA_PINS_MASK, TRIGGER_PORTB_PINS_MASK,&g_asTriggerKeyHandler[g_au8TriggerKeyStateIndex[u32InputStateIndex]]); 
000004  4805              LDR      r0,|L1.28|
000006  5d00              LDRB     r0,[r0,r4]
000008  210c              MOVS     r1,#0xc
00000a  4348              MULS     r0,r1,r0
00000c  4904              LDR      r1,|L1.32|
00000e  1842              ADDS     r2,r0,r1
000010  21cf              MOVS     r1,#0xcf
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       Keypad_InitTgr
;;;32     	#endif
;;;33     
;;;34     	#if (MATRIX_KEY_COUNT>0)
;;;35     	Keypad_InitKey( 							
;;;36     		MATRIX_PORTA_INPUT_PINS_MASK, MATRIX_PORTB_INPUT_PINS_MASK, 						
;;;37     		MATRIX_PORTA_OUTPUT_PINS_MASK, MATRIX_PORTB_OUTPUT_PINS_MASK, 						
;;;38     		&g_asMatrixKeyHandler[g_au8MatrixKeyStateIndex[u32InputStateIndex]], &g_u16aKeyPinValueBuf[0] );						
;;;39     	#endif 
;;;40     	
;;;41     	#if (TOUCH_KEY_COUNT>0)
;;;42     	SYS->GPB_MFP  = (SYS->GPB_MFP & (~TOUCH_CLR_CAP_MASK) ) | TOUCH_CFG_CAP_MASK;
;;;43     	
;;;44     	CLK_EnableModuleClock(ANA_MODULE);	
;;;45     	CLK_EnableModuleClock(ACMP_MODULE);	
;;;46     	
;;;47     	NVIC_EnableIRQ(CAPS_IRQn);
;;;48     	
;;;49     	Keypad_InitTouch( 
;;;50     		TOUCH_KEY_PINS_MASK, 
;;;51     		KEYPAD_TOUCH_THRESHOLD,
;;;52     		&g_asTouchKeyHandler[g_au8TouchKeyStateIndex[u32InputStateIndex]], &g_u16aTouchPinValueBuf[0] );		
;;;53     	#endif
;;;54     }
000018  bd10              POP      {r4,pc}
;;;55     
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      g_au8TriggerKeyStateIndex
                  |L1.32|
                          DCD      g_asTriggerKeyHandler

                          AREA ||i.InputKey_Initiate||, CODE, READONLY, ALIGN=2

                  InputKey_Initiate PROC
;;;55     
;;;56     void InputKey_Initiate(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;57     {
;;;58     	// GPIO pin input&output initiate.
;;;59     	GPIO_SetMode(PA, (MATRIX_PORTA_INPUT_PINS_MASK|TRIGGER_PORTA_PINS_MASK), GPIO_MODE_QUASI);	
000002  2203              MOVS     r2,#3
000004  2100              MOVS     r1,#0
000006  4831              LDR      r0,|L2.204|
000008  f7fffffe          BL       GPIO_SetMode
;;;60     	GPIO_SetMode(PA, MATRIX_PORTA_OUTPUT_PINS_MASK, GPIO_MODE_OUTPUT);	
00000c  2201              MOVS     r2,#1
00000e  2100              MOVS     r1,#0
000010  482e              LDR      r0,|L2.204|
000012  f7fffffe          BL       GPIO_SetMode
;;;61     	//GPIO_SetMode(PB, (MATRIX_PORTB_INPUT_PINS_MASK|TRIGGER_PORTB_PINS_MASK), GPIO_MODE_QUASI);		
;;;62     	GPIO_SetMode(PB, (MATRIX_PORTB_INPUT_PINS_MASK|TRIGGER_PORTB_PINS_MASK),  GPIO_MODE_INPUT);		
000016  2200              MOVS     r2,#0
000018  21cf              MOVS     r1,#0xcf
00001a  482c              LDR      r0,|L2.204|
00001c  3040              ADDS     r0,r0,#0x40
00001e  f7fffffe          BL       GPIO_SetMode
;;;63     	GPIO_SetMode(PB, MATRIX_PORTB_OUTPUT_PINS_MASK, GPIO_MODE_OUTPUT);	
000022  2201              MOVS     r2,#1
000024  2100              MOVS     r1,#0
000026  4829              LDR      r0,|L2.204|
000028  3040              ADDS     r0,r0,#0x40
00002a  f7fffffe          BL       GPIO_SetMode
;;;64     	
;;;65     	// In ISD9100, "UltraIO firmware curve" & "Press count of keypad" are used the same timer.
;;;66     	if( ULTRAIO_FW_CURVE_ENABLE == 0 )
;;;67     	{
;;;68     		CLK_EnableModuleClock(TMR1_MODULE);
00002e  4828              LDR      r0,|L2.208|
000030  f7fffffe          BL       CLK_EnableModuleClock
;;;69     		CLK_SetModuleClock(TMR1_MODULE,TIMER1_CLK_SOURCE,NULL);
000034  2200              MOVS     r2,#0
000036  4611              MOV      r1,r2
000038  4825              LDR      r0,|L2.208|
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;70     		TIMER_Open( TIMER1, TIMER_PERIODIC_MODE, TIMER1_FREQUENCY);
00003e  2264              MOVS     r2,#0x64
000040  2101              MOVS     r1,#1
000042  06c9              LSLS     r1,r1,#27
000044  4823              LDR      r0,|L2.212|
000046  f7fffffe          BL       TIMER_Open
;;;71     		TIMER_EnableInt(TIMER1);
00004a  bf00              NOP      
00004c  4821              LDR      r0,|L2.212|
00004e  6800              LDR      r0,[r0,#0]
000050  2101              MOVS     r1,#1
000052  0749              LSLS     r1,r1,#29
000054  4308              ORRS     r0,r0,r1
000056  491f              LDR      r1,|L2.212|
000058  6008              STR      r0,[r1,#0]
00005a  bf00              NOP      
;;;72     		NVIC_EnableIRQ(TMR1_IRQn);	
00005c  2009              MOVS     r0,#9
00005e  2101              MOVS     r1,#1
000060  4081              LSLS     r1,r1,r0
000062  4a1d              LDR      r2,|L2.216|
000064  6011              STR      r1,[r2,#0]
000066  bf00              NOP      
;;;73     		TIMER_Start(TIMER1);
000068  bf00              NOP      
00006a  481a              LDR      r0,|L2.212|
00006c  6800              LDR      r0,[r0,#0]
00006e  0591              LSLS     r1,r2,#22
000070  4308              ORRS     r0,r0,r1
000072  4918              LDR      r1,|L2.212|
000074  6008              STR      r0,[r1,#0]
000076  bf00              NOP      
;;;74     	}
;;;75     
;;;76     	// Change debounce time unit to second.
;;;77     	Keypad_InitKeypad(KEY_DEBOUNCE_TIME*TIMER_GetWorkingFreq(TIMER1),KEY_PRESS_TIME*TIMER_GetWorkingFreq(TIMER1));
000078  4608              MOV      r0,r1
00007a  f7fffffe          BL       TIMER_GetWorkingFreq
00007e  9000              STR      r0,[sp,#0]
000080  f7fffffe          BL       __aeabi_ui2d
000084  4606              MOV      r6,r0
000086  2200              MOVS     r2,#0
000088  4b14              LDR      r3,|L2.220|
00008a  f7fffffe          BL       __aeabi_dmul
00008e  4604              MOV      r4,r0
000090  f7fffffe          BL       __aeabi_d2uiz
000094  b280              UXTH     r0,r0
000096  9002              STR      r0,[sp,#8]
000098  480e              LDR      r0,|L2.212|
00009a  f7fffffe          BL       TIMER_GetWorkingFreq
00009e  9000              STR      r0,[sp,#0]
0000a0  f7fffffe          BL       __aeabi_ui2d
0000a4  4604              MOV      r4,r0
0000a6  4a0e              LDR      r2,|L2.224|
0000a8  4b0e              LDR      r3,|L2.228|
0000aa  f7fffffe          BL       __aeabi_dmul
0000ae  4606              MOV      r6,r0
0000b0  f7fffffe          BL       __aeabi_d2uiz
0000b4  b280              UXTH     r0,r0
0000b6  9001              STR      r0,[sp,#4]
0000b8  9902              LDR      r1,[sp,#8]
0000ba  f7fffffe          BL       Keypad_InitKeypad
;;;78     	// Default input state.
;;;79     	InputKey_Change(0);	
0000be  2000              MOVS     r0,#0
0000c0  f7fffffe          BL       InputKey_Change
;;;80     	InputKey_Change(1);	
0000c4  2001              MOVS     r0,#1
0000c6  f7fffffe          BL       InputKey_Change
;;;81     }
0000ca  bdfe              POP      {r1-r7,pc}
;;;82     
                          ENDP

                  |L2.204|
                          DCD      0x50004000
                  |L2.208|
                          DCD      0x5ec00007
                  |L2.212|
                          DCD      0x40010020
                  |L2.216|
                          DCD      0xe000e100
                  |L2.220|
                          DCD      0x3ff00000
                  |L2.224|
                          DCD      0x9999999a
                  |L2.228|
                          DCD      0x3fa99999

                          AREA ||i.OutputPin_Initiate||, CODE, READONLY, ALIGN=2

                  OutputPin_Initiate PROC
;;;82     
;;;83     void OutputPin_Initiate(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85     	GPIO_SetMode(PA, OUTPUT_PORTA_PINS_MASK,GPIO_MODE_OUTPUT);
000002  2201              MOVS     r2,#1
000004  210f              MOVS     r1,#0xf
000006  0309              LSLS     r1,r1,#12
000008  4816              LDR      r0,|L3.100|
00000a  f7fffffe          BL       GPIO_SetMode
;;;86     	GPIO_SetMode(PB, OUTPUT_PORTB_PINS_MASK,GPIO_MODE_OUTPUT);
00000e  2201              MOVS     r2,#1
000010  2130              MOVS     r1,#0x30
000012  4814              LDR      r0,|L3.100|
000014  3040              ADDS     r0,r0,#0x40
000016  f7fffffe          BL       GPIO_SetMode
;;;87     	
;;;88     	//Added by lambor
;;;89     	OUT1(0);
00001a  2200              MOVS     r2,#0
00001c  2101              MOVS     r1,#1
00001e  0309              LSLS     r1,r1,#12
000020  4810              LDR      r0,|L3.100|
000022  f7fffffe          BL       OutputPin_Set
;;;90     	OUT2(0);
000026  2200              MOVS     r2,#0
000028  2101              MOVS     r1,#1
00002a  0349              LSLS     r1,r1,#13
00002c  480d              LDR      r0,|L3.100|
00002e  f7fffffe          BL       OutputPin_Set
;;;91     	OUT3(0);
000032  2200              MOVS     r2,#0
000034  2101              MOVS     r1,#1
000036  0389              LSLS     r1,r1,#14
000038  480a              LDR      r0,|L3.100|
00003a  f7fffffe          BL       OutputPin_Set
;;;92     	OUT4(0);
00003e  2200              MOVS     r2,#0
000040  2101              MOVS     r1,#1
000042  03c9              LSLS     r1,r1,#15
000044  4807              LDR      r0,|L3.100|
000046  f7fffffe          BL       OutputPin_Set
;;;93     	OUT5(1);
00004a  2201              MOVS     r2,#1
00004c  2110              MOVS     r1,#0x10
00004e  4805              LDR      r0,|L3.100|
000050  3040              ADDS     r0,r0,#0x40
000052  f7fffffe          BL       OutputPin_Set
;;;94     	OUT6(0);
000056  2200              MOVS     r2,#0
000058  2120              MOVS     r1,#0x20
00005a  4802              LDR      r0,|L3.100|
00005c  3040              ADDS     r0,r0,#0x40
00005e  f7fffffe          BL       OutputPin_Set
;;;95     }
000062  bd10              POP      {r4,pc}
;;;96     
                          ENDP

                  |L3.100|
                          DCD      0x50004000

                          AREA ||i.OutputPin_Set||, CODE, READONLY, ALIGN=1

                  OutputPin_Set PROC
;;;96     
;;;97     void OutputPin_Set(GPIO_T *pPort, UINT16 u16PinMask, UINT8 u8Value)
000000  2a01              CMP      r2,#1
;;;98     {
;;;99     	if (u8Value==1)
000002  d103              BNE      |L4.12|
;;;100    		GPIO_SET_OUT_DATA(pPort,(GPIO_GET_OUT_DATA(pPort)|u16PinMask));
000004  6883              LDR      r3,[r0,#8]
000006  430b              ORRS     r3,r3,r1
000008  6083              STR      r3,[r0,#8]
00000a  e002              B        |L4.18|
                  |L4.12|
;;;101    	else
;;;102    		GPIO_SET_OUT_DATA(pPort,(GPIO_GET_OUT_DATA(pPort)&~u16PinMask));
00000c  6883              LDR      r3,[r0,#8]
00000e  438b              BICS     r3,r3,r1
000010  6083              STR      r3,[r0,#8]
                  |L4.18|
;;;103    }
000012  4770              BX       lr
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_asMatrixKeyHandler
                          DCD      0x00000000
                          DCD      0x00000000
000008  00000000          DCW      0x0000,0x0000
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  g_au8MatrixKeyStateIndex
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  g_asTriggerKeyHandler
                          DCD      Default_KeyHandler
                          DCD      0x20000001
00001c  0001              DCW      0x0001
00001e  0100              DCB      0x01,0x00
                          DCD      Default_KeyHandler
                          DCD      0x10000001
000028  0001              DCW      0x0001
00002a  0101              DCB      0x01,0x01
                          DCD      Default_KeyHandler
                          DCD      0x40000001
000034  0001              DCW      0x0001
000036  0102              DCB      0x01,0x02
                          DCD      Default_KeyHandler
                          DCD      0x20000002
000040  0002              DCW      0x0002
000042  0100              DCB      0x01,0x00
                          DCD      Default_KeyHandler
                          DCD      0x10000002
00004c  0002              DCW      0x0002
00004e  0101              DCB      0x01,0x01
                          DCD      Default_KeyHandler
                          DCD      0x40000002
000058  0002              DCW      0x0002
00005a  0102              DCB      0x01,0x02
                          DCD      Default_KeyHandler
                          DCD      0x20000003
000064  0004              DCW      0x0004
000066  0100              DCB      0x01,0x00
                          DCD      Default_KeyHandler
                          DCD      0x10000003
000070  0004              DCW      0x0004
000072  0101              DCB      0x01,0x01
                          DCD      Default_KeyHandler
                          DCD      0x40000003
00007c  0004              DCW      0x0004
00007e  0102              DCB      0x01,0x02
                          DCD      Default_KeyHandler
                          DCD      0x20000004
000088  0008              DCW      0x0008
00008a  0100              DCB      0x01,0x00
                          DCD      Default_KeyHandler
                          DCD      0x10000004
000094  0008              DCW      0x0008
000096  0101              DCB      0x01,0x01
                          DCD      Default_KeyHandler
                          DCD      0x40000004
0000a0  0008              DCW      0x0008
0000a2  0102              DCB      0x01,0x02
                          DCD      Default_KeyHandler
                          DCD      0x20000005
0000ac  0040              DCW      0x0040
0000ae  0100              DCB      0x01,0x00
                          DCD      Default_KeyHandler
                          DCD      0x10000005
0000b8  0040              DCW      0x0040
0000ba  0101              DCB      0x01,0x01
                          DCD      Default_KeyHandler
                          DCD      0x40000005
0000c4  0040              DCW      0x0040
0000c6  0102              DCB      0x01,0x02
                          DCD      Default_KeyHandler
                          DCD      0x20000006
0000d0  0080              DCW      0x0080
0000d2  0100              DCB      0x01,0x00
                          DCD      Default_KeyHandler
                          DCD      0x10000006
0000dc  0080              DCW      0x0080
0000de  0101              DCB      0x01,0x01
                          DCD      Default_KeyHandler
                          DCD      0x40000006
0000e8  0080              DCW      0x0080
0000ea  0102              DCB      0x01,0x02
                          DCD      0x00000000
                          DCD      0x00000000
0000f4  0000              DCW      0x0000
0000f6  0000              DCB      0x00,0x00
                  g_au8TriggerKeyStateIndex
0000f8  0306              DCB      0x03,0x06

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Framework\\src\\ConfigIO.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_ConfigIO_c_e5801c97____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_ConfigIO_c_e5801c97____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_ConfigIO_c_e5801c97____REVSH|
#line 132
|__asm___10_ConfigIO_c_e5801c97____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
