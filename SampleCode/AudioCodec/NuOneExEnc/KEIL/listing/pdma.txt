; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\pdma.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\pdma.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\pdma.crf ..\..\..\..\Library\StdDriver\src\pdma.c]
                          THUMB

                          AREA ||i.PDMA_Close||, CODE, READONLY, ALIGN=2

                  PDMA_Close PROC
;;;45      */
;;;46     void PDMA_Close(void)
000000  2000              MOVS     r0,#0
;;;47     {
;;;48         PDMA_GCR->GLOCTL = 0;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]
;;;49     }
000006  4770              BX       lr
;;;50     
                          ENDP

                  |L1.8|
                          DCD      0x50008f00

                          AREA ||i.PDMA_DisableInt||, CODE, READONLY, ALIGN=2

                  PDMA_DisableInt PROC
;;;245     */
;;;246    void PDMA_DisableInt(uint32_t u32Ch, uint32_t u32Mask)
000000  b510              PUSH     {r4,lr}
;;;247    {
;;;248        PDMA_T *pdma;
;;;249        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  0203              LSLS     r3,r0,#8
000004  4c02              LDR      r4,|L2.16|
000006  191a              ADDS     r2,r3,r4
;;;250    
;;;251        pdma->INTENCH &= ~u32Mask;
000008  6a13              LDR      r3,[r2,#0x20]
00000a  438b              BICS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
;;;252    }
00000e  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  |L2.16|
                          DCD      0x50008000

                          AREA ||i.PDMA_EnableInt||, CODE, READONLY, ALIGN=2

                  PDMA_EnableInt PROC
;;;227     */
;;;228    void PDMA_EnableInt(uint32_t u32Ch, uint32_t u32Mask)
000000  b510              PUSH     {r4,lr}
;;;229    {
;;;230        PDMA_T *pdma;
;;;231        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  0203              LSLS     r3,r0,#8
000004  4c02              LDR      r4,|L3.16|
000006  191a              ADDS     r2,r3,r4
;;;232    
;;;233        pdma->INTENCH |= u32Mask;
000008  6a13              LDR      r3,[r2,#0x20]
00000a  430b              ORRS     r3,r3,r1
00000c  6213              STR      r3,[r2,#0x20]
;;;234    }
00000e  bd10              POP      {r4,pc}
;;;235    
                          ENDP

                  |L3.16|
                          DCD      0x50008000

                          AREA ||i.PDMA_Open||, CODE, READONLY, ALIGN=2

                  PDMA_Open PROC
;;;33      */
;;;34     void PDMA_Open(uint32_t u32Mask)
000000  4903              LDR      r1,|L4.16|
;;;35     {
;;;36         PDMA_GCR->GLOCTL |= (u32Mask << 8);
000002  6809              LDR      r1,[r1,#0]
000004  0202              LSLS     r2,r0,#8
000006  4311              ORRS     r1,r1,r2
000008  4a01              LDR      r2,|L4.16|
00000a  6011              STR      r1,[r2,#0]
;;;37     }
00000c  4770              BX       lr
;;;38     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x50008f00

                          AREA ||i.PDMA_SetTransferAddr||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferAddr PROC
;;;107     */
;;;108    void PDMA_SetTransferAddr(uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl)
000000  b5f0              PUSH     {r4-r7,lr}
;;;109    {
000002  9c05              LDR      r4,[sp,#0x14]
;;;110        PDMA_T *pdma;
;;;111        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000004  0206              LSLS     r6,r0,#8
000006  4f06              LDR      r7,|L5.32|
000008  19f5              ADDS     r5,r6,r7
;;;112    
;;;113        pdma->DSCT_ENDSA = u32SrcAddr;
00000a  6069              STR      r1,[r5,#4]
;;;114        pdma->DSCT_ENDDA = u32DstAddr;
00000c  60ab              STR      r3,[r5,#8]
;;;115        pdma->DSCT_CTL = (pdma->DSCT_CTL & ~(PDMA_DSCT_CTL_SASEL_Msk | PDMA_DSCT_CTL_DASEL_Msk)) | (u32SrcCtrl | u32DstCtrl);
00000e  682e              LDR      r6,[r5,#0]
000010  27f0              MOVS     r7,#0xf0
000012  43be              BICS     r6,r6,r7
000014  4617              MOV      r7,r2
000016  4327              ORRS     r7,r7,r4
000018  433e              ORRS     r6,r6,r7
00001a  602e              STR      r6,[r5,#0]
;;;116    }
00001c  bdf0              POP      {r4-r7,pc}
;;;117    
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferCnt||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferCnt PROC
;;;64      */
;;;65     void PDMA_SetTransferCnt(uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount)
000000  b530              PUSH     {r4,r5,lr}
;;;66     {
000002  4603              MOV      r3,r0
;;;67         PDMA_T *pdma;
;;;68         pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000004  021c              LSLS     r4,r3,#8
000006  4d0f              LDR      r5,|L6.68|
000008  1960              ADDS     r0,r4,r5
;;;69         pdma->DSCT_CTL = (pdma->DSCT_CTL & ~PDMA_DSCT_CTL_TXWIDTH_Msk) | u32Width;
00000a  6804              LDR      r4,[r0,#0]
00000c  2503              MOVS     r5,#3
00000e  04ed              LSLS     r5,r5,#19
000010  43ac              BICS     r4,r4,r5
000012  430c              ORRS     r4,r4,r1
000014  6004              STR      r4,[r0,#0]
;;;70         switch(u32Width)
000016  2900              CMP      r1,#0
000018  d008              BEQ      |L6.44|
00001a  2401              MOVS     r4,#1
00001c  04e4              LSLS     r4,r4,#19
00001e  1b0c              SUBS     r4,r1,r4
000020  d007              BEQ      |L6.50|
000022  2501              MOVS     r5,#1
000024  04ed              LSLS     r5,r5,#19
000026  1b64              SUBS     r4,r4,r5
000028  d108              BNE      |L6.60|
00002a  e004              B        |L6.54|
                  |L6.44|
;;;71         {
;;;72         case PDMA_WIDTH_32:
;;;73             pdma->TXBCCH = (u32TransCount << 2);
00002c  0094              LSLS     r4,r2,#2
00002e  60c4              STR      r4,[r0,#0xc]
;;;74             break;
000030  e005              B        |L6.62|
                  |L6.50|
;;;75     
;;;76         case PDMA_WIDTH_8:
;;;77             pdma->TXBCCH = u32TransCount;
000032  60c2              STR      r2,[r0,#0xc]
;;;78             break;
000034  e003              B        |L6.62|
                  |L6.54|
;;;79     
;;;80         case PDMA_WIDTH_16:
;;;81             pdma->TXBCCH = (u32TransCount << 1);
000036  0054              LSLS     r4,r2,#1
000038  60c4              STR      r4,[r0,#0xc]
;;;82             break;
00003a  e000              B        |L6.62|
                  |L6.60|
00003c  bf00              NOP                            ;70
                  |L6.62|
00003e  bf00              NOP                            ;74
;;;83     
;;;84         default:
;;;85             ;
;;;86         }
;;;87     }
000040  bd30              POP      {r4,r5,pc}
;;;88     
                          ENDP

000042  0000              DCW      0x0000
                  |L6.68|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferDirection||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferDirection PROC
;;;130     */
;;;131    void PDMA_SetTransferDirection(uint32_t u32Ch, uint32_t u32Direction)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133        PDMA_T *pdma;
;;;134        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  0203              LSLS     r3,r0,#8
000004  4c03              LDR      r4,|L7.20|
000006  191a              ADDS     r2,r3,r4
;;;135    	
;;;136        pdma->DSCT_CTL = (pdma->DSCT_CTL & (~PDMA_DSCT_CTL_MODESEL_Msk) ) | u32Direction ;
000008  6813              LDR      r3,[r2,#0]
00000a  240c              MOVS     r4,#0xc
00000c  43a3              BICS     r3,r3,r4
00000e  430b              ORRS     r3,r3,r1
000010  6013              STR      r3,[r2,#0]
;;;137    }
000012  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  |L7.20|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferMode||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferMode PROC
;;;159     */
;;;160    void PDMA_SetTransferMode(uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;161    {
000002  461c              MOV      r4,r3
;;;162        uint32_t u32Index = 0;
000004  2500              MOVS     r5,#0
;;;163        switch(u32Peripheral)
000006  000b              MOVS     r3,r1
000008  f7fffffe          BL       __ARM_common_switch8
00000c  080d0534          DCB      0x08,0x0d,0x05,0x34
000010  2a20163d          DCB      0x2a,0x20,0x16,0x3d
000014  4751              DCB      0x47,0x51
;;;164        {
;;;165        case PDMA_SPI0_RX:
;;;166            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_SPIRXSEL_Msk) | (u32Ch << PDMA_SVCSEL_SPIRXSEL_Pos);
000016  4b33              LDR      r3,|L8.228|
000018  685b              LDR      r3,[r3,#4]
00001a  091b              LSRS     r3,r3,#4
00001c  011b              LSLS     r3,r3,#4
00001e  4303              ORRS     r3,r3,r0
000020  4e30              LDR      r6,|L8.228|
000022  6073              STR      r3,[r6,#4]
;;;167            break;
000024  e05c              B        |L8.224|
;;;168        case PDMA_SPI0_TX:
;;;169            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_SPITXSEL_Msk) | (u32Ch << PDMA_SVCSEL_SPITXSEL_Pos);
000026  4b2f              LDR      r3,|L8.228|
000028  685b              LDR      r3,[r3,#4]
00002a  26f0              MOVS     r6,#0xf0
00002c  43b3              BICS     r3,r3,r6
00002e  0106              LSLS     r6,r0,#4
000030  4333              ORRS     r3,r3,r6
000032  4e2c              LDR      r6,|L8.228|
000034  6073              STR      r3,[r6,#4]
;;;170            break;
000036  e053              B        |L8.224|
;;;171        case PDMA_UART0_RX:
;;;172            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_UARTRXSEL_Msk) | (u32Ch << PDMA_SVCSEL_UARTRXSEL_Pos);
000038  4b2a              LDR      r3,|L8.228|
00003a  685b              LDR      r3,[r3,#4]
00003c  260f              MOVS     r6,#0xf
00003e  0436              LSLS     r6,r6,#16
000040  43b3              BICS     r3,r3,r6
000042  0406              LSLS     r6,r0,#16
000044  4333              ORRS     r3,r3,r6
000046  4e27              LDR      r6,|L8.228|
000048  6073              STR      r3,[r6,#4]
;;;173            break;
00004a  e049              B        |L8.224|
;;;174        case PDMA_UART0_TX:
;;;175            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_UARTXSEL_Msk) | (u32Ch << PDMA_SVCSEL_UARTXSEL_Pos);
00004c  4b25              LDR      r3,|L8.228|
00004e  685b              LDR      r3,[r3,#4]
000050  260f              MOVS     r6,#0xf
000052  0536              LSLS     r6,r6,#20
000054  43b3              BICS     r3,r3,r6
000056  0506              LSLS     r6,r0,#20
000058  4333              ORRS     r3,r3,r6
00005a  4e22              LDR      r6,|L8.228|
00005c  6073              STR      r3,[r6,#4]
;;;176            break;
00005e  e03f              B        |L8.224|
;;;177        case PDMA_I2S_RX:
;;;178            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_I2SRXSEL_Msk) | (u32Ch << PDMA_SVCSEL_I2SRXSEL_Pos);
000060  4b20              LDR      r3,|L8.228|
000062  685b              LDR      r3,[r3,#4]
000064  260f              MOVS     r6,#0xf
000066  0636              LSLS     r6,r6,#24
000068  43b3              BICS     r3,r3,r6
00006a  0606              LSLS     r6,r0,#24
00006c  4333              ORRS     r3,r3,r6
00006e  4e1d              LDR      r6,|L8.228|
000070  6073              STR      r3,[r6,#4]
;;;179            break;
000072  e035              B        |L8.224|
;;;180        case PDMA_I2S_TX:
;;;181            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_I2STXSEL_Msk) | (u32Ch << PDMA_SVCSEL_I2STXSEL_Pos);
000074  4b1b              LDR      r3,|L8.228|
000076  685b              LDR      r3,[r3,#4]
000078  011b              LSLS     r3,r3,#4
00007a  091b              LSRS     r3,r3,#4
00007c  0706              LSLS     r6,r0,#28
00007e  4333              ORRS     r3,r3,r6
000080  4e18              LDR      r6,|L8.228|
000082  6073              STR      r3,[r6,#4]
;;;182            break;
000084  e02c              B        |L8.224|
;;;183    
;;;184        case PDMA_ADC:
;;;185            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_ADCRXSEL_Msk) | (u32Ch << PDMA_SVCSEL_ADCRXSEL_Pos);
000086  4b17              LDR      r3,|L8.228|
000088  685b              LDR      r3,[r3,#4]
00008a  260f              MOVS     r6,#0xf
00008c  0236              LSLS     r6,r6,#8
00008e  43b3              BICS     r3,r3,r6
000090  0206              LSLS     r6,r0,#8
000092  4333              ORRS     r3,r3,r6
000094  4e13              LDR      r6,|L8.228|
000096  6073              STR      r3,[r6,#4]
;;;186            break;
000098  e022              B        |L8.224|
;;;187    
;;;188        case PDMA_DPWM:
;;;189            PDMA_GCR->SVCSEL = (PDMA_GCR->SVCSEL & ~PDMA_SVCSEL_DPWMTXSEL_Msk) | (u32Ch << PDMA_SVCSEL_DPWMTXSEL_Pos);
00009a  4b12              LDR      r3,|L8.228|
00009c  685b              LDR      r3,[r3,#4]
00009e  260f              MOVS     r6,#0xf
0000a0  0336              LSLS     r6,r6,#12
0000a2  43b3              BICS     r3,r3,r6
0000a4  0306              LSLS     r6,r0,#12
0000a6  4333              ORRS     r3,r3,r6
0000a8  4e0e              LDR      r6,|L8.228|
0000aa  6073              STR      r3,[r6,#4]
;;;190            break;
0000ac  e018              B        |L8.224|
;;;191    
;;;192        default:/* select PDMA channel as memory to memory */
;;;193            for(u32Index = 0; u32Index < 8; u32Index++)
0000ae  2500              MOVS     r5,#0
0000b0  e013              B        |L8.218|
                  |L8.178|
;;;194            {
;;;195                if((PDMA_GCR->SVCSEL & (0xF << (u32Index * 4))) == (u32Ch << (u32Index * 4)))
0000b2  4b0c              LDR      r3,|L8.228|
0000b4  685b              LDR      r3,[r3,#4]
0000b6  00af              LSLS     r7,r5,#2
0000b8  260f              MOVS     r6,#0xf
0000ba  40be              LSLS     r6,r6,r7
0000bc  4033              ANDS     r3,r3,r6
0000be  00ae              LSLS     r6,r5,#2
0000c0  4607              MOV      r7,r0
0000c2  40b7              LSLS     r7,r7,r6
0000c4  42bb              CMP      r3,r7
0000c6  d107              BNE      |L8.216|
;;;196                    PDMA_GCR->SVCSEL |= 0xF << (u32Index * 4);
0000c8  4b06              LDR      r3,|L8.228|
0000ca  685b              LDR      r3,[r3,#4]
0000cc  00af              LSLS     r7,r5,#2
0000ce  260f              MOVS     r6,#0xf
0000d0  40be              LSLS     r6,r6,r7
0000d2  4333              ORRS     r3,r3,r6
0000d4  4e03              LDR      r6,|L8.228|
0000d6  6073              STR      r3,[r6,#4]
                  |L8.216|
0000d8  1c6d              ADDS     r5,r5,#1              ;193
                  |L8.218|
0000da  2d08              CMP      r5,#8                 ;193
0000dc  d3e9              BCC      |L8.178|
0000de  bf00              NOP                            ;163
                  |L8.224|
0000e0  bf00              NOP                            ;167
;;;197            }
;;;198        }
;;;199    }
0000e2  bdf0              POP      {r4-r7,pc}
;;;200    
                          ENDP

                  |L8.228|
                          DCD      0x50008f00

                          AREA ||i.PDMA_Trigger||, CODE, READONLY, ALIGN=2

                  PDMA_Trigger PROC
;;;209     */
;;;210    void PDMA_Trigger(uint32_t u32Ch)
000000  0202              LSLS     r2,r0,#8
;;;211    {
;;;212        PDMA_T *pdma;
;;;213        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  4b03              LDR      r3,|L9.16|
000004  18d1              ADDS     r1,r2,r3
;;;214    
;;;215        pdma->DSCT_CTL |= (PDMA_DSCT_CTL_TXEN_Msk | PDMA_DSCT_CTL_CHEN_Msk);
000006  680a              LDR      r2,[r1,#0]
000008  4b02              LDR      r3,|L9.20|
00000a  431a              ORRS     r2,r2,r3
00000c  600a              STR      r2,[r1,#0]
;;;216    }
00000e  4770              BX       lr
;;;217    
                          ENDP

                  |L9.16|
                          DCD      0x50008000
                  |L9.20|
                          DCD      0x00800001

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L61.24|
                  |L61.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L61.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L61.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\pdma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_pdma_c_4711ff23____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REVSH|
#line 132
|__asm___6_pdma_c_4711ff23____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
