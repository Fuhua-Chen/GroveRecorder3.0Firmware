; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\rtc.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\rtc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\rtc.crf ..\..\..\..\Library\StdDriver\src\rtc.c]
                          THUMB

                          AREA ||i.RTC_32KCalibration||, CODE, READONLY, ALIGN=2

                  RTC_32KCalibration PROC
;;;56      */
;;;57     void RTC_32KCalibration(int32_t i32FrequencyX100)
000000  b5f8              PUSH     {r3-r7,lr}
;;;58     {
000002  4605              MOV      r5,r0
;;;59         int32_t i32RegInt,i32RegFra ;
;;;60     
;;;61         /* Compute Integer and Fraction for RTC register*/
;;;62         i32RegInt = (i32FrequencyX100/100) - RTC_FCR_REFERENCE;
000004  2164              MOVS     r1,#0x64
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       __aeabi_idivmod
00000c  4914              LDR      r1,|L1.96|
00000e  1a44              SUBS     r4,r0,r1
;;;63         i32RegFra = (((i32FrequencyX100%100)) * 60) / 100;
000010  2164              MOVS     r1,#0x64
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       __aeabi_idivmod
000018  203c              MOVS     r0,#0x3c
00001a  4341              MULS     r1,r0,r1
00001c  460f              MOV      r7,r1
00001e  2164              MOVS     r1,#0x64
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       __aeabi_idivmod
000026  4606              MOV      r6,r0
;;;64     
;;;65         /* Judge Integer part is reasonable */
;;;66         if ( (i32RegInt < 0) | (i32RegInt > 15) ) {
000028  0fe0              LSRS     r0,r4,#31
00002a  2c0f              CMP      r4,#0xf
00002c  dd01              BLE      |L1.50|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L1.52|
                  |L1.50|
000032  2100              MOVS     r1,#0
                  |L1.52|
000034  4308              ORRS     r0,r0,r1
000036  2800              CMP      r0,#0
000038  d000              BEQ      |L1.60|
                  |L1.58|
;;;67             return;
;;;68         }
;;;69     
;;;70         RTC->RWEN = RTC_WRITE_KEY;
;;;71         while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
;;;72     
;;;73         RTC->FREQADJ = (uint32_t)((i32RegInt<<8) | i32RegFra);
;;;74     
;;;75     }
00003a  bdf8              POP      {r3-r7,pc}
                  |L1.60|
00003c  4809              LDR      r0,|L1.100|
00003e  490a              LDR      r1,|L1.104|
000040  6048              STR      r0,[r1,#4]            ;70
000042  bf00              NOP                            ;71
                  |L1.68|
000044  4808              LDR      r0,|L1.104|
000046  6840              LDR      r0,[r0,#4]            ;71
000048  2101              MOVS     r1,#1                 ;71
00004a  0409              LSLS     r1,r1,#16             ;71
00004c  4008              ANDS     r0,r0,r1              ;71
00004e  2800              CMP      r0,#0                 ;71
000050  d0f8              BEQ      |L1.68|
000052  0220              LSLS     r0,r4,#8              ;73
000054  4330              ORRS     r0,r0,r6              ;73
000056  4904              LDR      r1,|L1.104|
000058  6088              STR      r0,[r1,#8]            ;73
00005a  bf00              NOP      
00005c  e7ed              B        |L1.58|
;;;76     
                          ENDP

00005e  0000              DCW      0x0000
                  |L1.96|
                          DCD      0x00007ff9
                  |L1.100|
                          DCD      0x0000a965
                  |L1.104|
                          DCD      0x40008000

                          AREA ||i.RTC_Close||, CODE, READONLY, ALIGN=2

                  RTC_Close PROC
;;;762     */
;;;763    void RTC_Close (void)
000000  4803              LDR      r0,|L2.16|
;;;764    {
;;;765        CLK->APBCLK0  &= ~CLK_APBCLK0_RTCCKEN_Msk;
000002  6880              LDR      r0,[r0,#8]
000004  2120              MOVS     r1,#0x20
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L2.16|
00000a  6088              STR      r0,[r1,#8]
;;;766    }
00000c  4770              BX       lr
;;;767    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x50000200

                          AREA ||i.RTC_DisableInt||, CODE, READONLY, ALIGN=2

                  RTC_DisableInt PROC
;;;714     */
;;;715    void RTC_DisableInt(uint32_t u32IntFlagMask)
000000  4915              LDR      r1,|L3.88|
;;;716    {
;;;717        RTC->RWEN = RTC_WRITE_KEY;
000002  4a16              LDR      r2,|L3.92|
000004  6051              STR      r1,[r2,#4]
;;;718        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000006  bf00              NOP      
                  |L3.8|
000008  4914              LDR      r1,|L3.92|
00000a  6849              LDR      r1,[r1,#4]
00000c  2201              MOVS     r2,#1
00000e  0412              LSLS     r2,r2,#16
000010  4011              ANDS     r1,r1,r2
000012  2900              CMP      r1,#0
000014  d0f8              BEQ      |L3.8|
;;;719    
;;;720        if(u32IntFlagMask & RTC_INTEN_TICKIEN_Msk) {
000016  2102              MOVS     r1,#2
000018  4001              ANDS     r1,r1,r0
00001a  2900              CMP      r1,#0
00001c  d00b              BEQ      |L3.54|
;;;721            RTC->INTEN  &= ~RTC_INTEN_TICKIEN_Msk;
00001e  490f              LDR      r1,|L3.92|
000020  6a89              LDR      r1,[r1,#0x28]
000022  2202              MOVS     r2,#2
000024  4391              BICS     r1,r1,r2
000026  4a0d              LDR      r2,|L3.92|
000028  6291              STR      r1,[r2,#0x28]
;;;722            RTC->INTSTS |= RTC_INTSTS_TICKIF_Msk;
00002a  4611              MOV      r1,r2
00002c  6ac9              LDR      r1,[r1,#0x2c]
00002e  2202              MOVS     r2,#2
000030  4311              ORRS     r1,r1,r2
000032  4a0a              LDR      r2,|L3.92|
000034  62d1              STR      r1,[r2,#0x2c]
                  |L3.54|
;;;723        }
;;;724    
;;;725        if(u32IntFlagMask & RTC_INTEN_ALMIEN_Msk) {
000036  07c1              LSLS     r1,r0,#31
000038  0fc9              LSRS     r1,r1,#31
00003a  2900              CMP      r1,#0
00003c  d00b              BEQ      |L3.86|
;;;726            RTC->INTEN &= ~RTC_INTEN_ALMIEN_Msk;
00003e  4907              LDR      r1,|L3.92|
000040  6a89              LDR      r1,[r1,#0x28]
000042  0849              LSRS     r1,r1,#1
000044  0049              LSLS     r1,r1,#1
000046  4a05              LDR      r2,|L3.92|
000048  6291              STR      r1,[r2,#0x28]
;;;727            RTC->INTSTS |= RTC_INTSTS_ALMIF_Msk;
00004a  4611              MOV      r1,r2
00004c  6ac9              LDR      r1,[r1,#0x2c]
00004e  2201              MOVS     r2,#1
000050  4311              ORRS     r1,r1,r2
000052  4a02              LDR      r2,|L3.92|
000054  62d1              STR      r1,[r2,#0x2c]
                  |L3.86|
;;;728        }
;;;729    
;;;730    }
000056  4770              BX       lr
;;;731    
                          ENDP

                  |L3.88|
                          DCD      0x0000a965
                  |L3.92|
                          DCD      0x40008000

                          AREA ||i.RTC_DisableWakeUp||, CODE, READONLY, ALIGN=2

                  RTC_DisableWakeUp PROC
;;;749     */
;;;750    void RTC_DisableWakeUp(void)
000000  4808              LDR      r0,|L4.36|
;;;751    {
;;;752    	RTC->RWEN = RTC_WRITE_KEY;
000002  4909              LDR      r1,|L4.40|
000004  6048              STR      r0,[r1,#4]
;;;753    	while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000006  bf00              NOP      
                  |L4.8|
000008  4807              LDR      r0,|L4.40|
00000a  6840              LDR      r0,[r0,#4]
00000c  2101              MOVS     r1,#1
00000e  0409              LSLS     r1,r1,#16
000010  4008              ANDS     r0,r0,r1
000012  2800              CMP      r0,#0
000014  d0f8              BEQ      |L4.8|
;;;754    	
;;;755    	RTC->TICK &= ~RTC_TICK_TWKEN_Msk;
000016  4804              LDR      r0,|L4.40|
000018  6b00              LDR      r0,[r0,#0x30]
00001a  2108              MOVS     r1,#8
00001c  4388              BICS     r0,r0,r1
00001e  4902              LDR      r1,|L4.40|
000020  6308              STR      r0,[r1,#0x30]
;;;756    }
000022  4770              BX       lr
;;;757    
                          ENDP

                  |L4.36|
                          DCD      0x0000a965
                  |L4.40|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableInt||, CODE, READONLY, ALIGN=2

                  RTC_EnableInt PROC
;;;696     */
;;;697    void RTC_EnableInt(uint32_t u32IntFlagMask)
000000  4908              LDR      r1,|L5.36|
;;;698    {
;;;699        RTC->RWEN = RTC_WRITE_KEY;
000002  4a09              LDR      r2,|L5.40|
000004  6051              STR      r1,[r2,#4]
;;;700        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000006  bf00              NOP      
                  |L5.8|
000008  4907              LDR      r1,|L5.40|
00000a  6849              LDR      r1,[r1,#4]
00000c  2201              MOVS     r2,#1
00000e  0412              LSLS     r2,r2,#16
000010  4011              ANDS     r1,r1,r2
000012  2900              CMP      r1,#0
000014  d0f8              BEQ      |L5.8|
;;;701    
;;;702        RTC->INTEN |= u32IntFlagMask;
000016  4904              LDR      r1,|L5.40|
000018  6a89              LDR      r1,[r1,#0x28]
00001a  4301              ORRS     r1,r1,r0
00001c  4a02              LDR      r2,|L5.40|
00001e  6291              STR      r1,[r2,#0x28]
;;;703    }
000020  4770              BX       lr
;;;704    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      0x0000a965
                  |L5.40|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableWakeUp||, CODE, READONLY, ALIGN=2

                  RTC_EnableWakeUp PROC
;;;736     */
;;;737    void RTC_EnableWakeUp(void)
000000  4808              LDR      r0,|L6.36|
;;;738    {
;;;739    	RTC->RWEN = RTC_WRITE_KEY;
000002  4909              LDR      r1,|L6.40|
000004  6048              STR      r0,[r1,#4]
;;;740    	while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000006  bf00              NOP      
                  |L6.8|
000008  4807              LDR      r0,|L6.40|
00000a  6840              LDR      r0,[r0,#4]
00000c  2101              MOVS     r1,#1
00000e  0409              LSLS     r1,r1,#16
000010  4008              ANDS     r0,r0,r1
000012  2800              CMP      r0,#0
000014  d0f8              BEQ      |L6.8|
;;;741    	
;;;742    	RTC->TICK |= RTC_TICK_TWKEN_Msk;
000016  4804              LDR      r0,|L6.40|
000018  6b00              LDR      r0,[r0,#0x30]
00001a  2108              MOVS     r1,#8
00001c  4308              ORRS     r0,r0,r1
00001e  4902              LDR      r1,|L6.40|
000020  6308              STR      r0,[r1,#0x30]
;;;743    }
000022  4770              BX       lr
;;;744    
                          ENDP

                  |L6.36|
                          DCD      0x0000a965
                  |L6.40|
                          DCD      0x40008000

                          AREA ||i.RTC_GetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetAlarmDateAndTime PROC
;;;278     */
;;;279    void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  4a6b              LDR      r2,|L7.432|
;;;280    {
;;;281        uint32_t u32Tmp;
;;;282    
;;;283        sPt->u32TimeScale = RTC->CLKFMT & RTC_CLKFMT_24HEN_Msk;  /* 12/24-hour */
000002  6952              LDR      r2,[r2,#0x14]
000004  07d2              LSLS     r2,r2,#31
000006  0fd2              LSRS     r2,r2,#31
000008  61c2              STR      r2,[r0,#0x1c]
;;;284        sPt->u32DayOfWeek = RTC->WEEKDAY & RTC_WEEKDAY_WEEKDAY_Msk;        /* Day of week */
00000a  4a69              LDR      r2,|L7.432|
00000c  6992              LDR      r2,[r2,#0x18]
00000e  0752              LSLS     r2,r2,#29
000010  0f52              LSRS     r2,r2,#29
000012  60c2              STR      r2,[r0,#0xc]
;;;285    
;;;286        RTC->RWEN = RTC_WRITE_KEY;
000014  4a67              LDR      r2,|L7.436|
000016  4b66              LDR      r3,|L7.432|
000018  605a              STR      r2,[r3,#4]
;;;287        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
00001a  bf00              NOP      
                  |L7.28|
00001c  4a64              LDR      r2,|L7.432|
00001e  6852              LDR      r2,[r2,#4]
000020  2301              MOVS     r3,#1
000022  041b              LSLS     r3,r3,#16
000024  401a              ANDS     r2,r2,r3
000026  2a00              CMP      r2,#0
000028  d0f8              BEQ      |L7.28|
;;;288    
;;;289        g_u32hiYear  = (RTC->CALM & RTC_CALM_TENYEAR_Msk) >> RTC_CALM_TENYEAR_Pos;
00002a  4a61              LDR      r2,|L7.432|
00002c  6a12              LDR      r2,[r2,#0x20]
00002e  230f              MOVS     r3,#0xf
000030  051b              LSLS     r3,r3,#20
000032  401a              ANDS     r2,r2,r3
000034  0d12              LSRS     r2,r2,#20
000036  4b60              LDR      r3,|L7.440|
000038  601a              STR      r2,[r3,#0]  ; g_u32hiYear
;;;290        g_u32loYear  = (RTC->CALM & RTC_CALM_YEAR_Msk)    >> RTC_CALM_YEAR_Pos;
00003a  4a5d              LDR      r2,|L7.432|
00003c  6a12              LDR      r2,[r2,#0x20]
00003e  230f              MOVS     r3,#0xf
000040  041b              LSLS     r3,r3,#16
000042  401a              ANDS     r2,r2,r3
000044  0c12              LSRS     r2,r2,#16
000046  4b5d              LDR      r3,|L7.444|
000048  601a              STR      r2,[r3,#0]  ; g_u32loYear
;;;291        g_u32hiMonth = (RTC->CALM & RTC_CALM_TENMON_Msk)  >> RTC_CALM_TENMON_Pos;
00004a  4a59              LDR      r2,|L7.432|
00004c  6a12              LDR      r2,[r2,#0x20]
00004e  2301              MOVS     r3,#1
000050  031b              LSLS     r3,r3,#12
000052  401a              ANDS     r2,r2,r3
000054  0b12              LSRS     r2,r2,#12
000056  4b5a              LDR      r3,|L7.448|
000058  601a              STR      r2,[r3,#0]  ; g_u32hiMonth
;;;292        g_u32loMonth = (RTC->CALM & RTC_CALM_MON_Msk)     >> RTC_CALM_MON_Pos;
00005a  4a55              LDR      r2,|L7.432|
00005c  6a12              LDR      r2,[r2,#0x20]
00005e  230f              MOVS     r3,#0xf
000060  021b              LSLS     r3,r3,#8
000062  401a              ANDS     r2,r2,r3
000064  0a12              LSRS     r2,r2,#8
000066  4b57              LDR      r3,|L7.452|
000068  601a              STR      r2,[r3,#0]  ; g_u32loMonth
;;;293        g_u32hiDay   = (RTC->CALM & RTC_CALM_TENDAY_Msk)  >> RTC_CALM_TENDAY_Pos;
00006a  4a51              LDR      r2,|L7.432|
00006c  6a12              LDR      r2,[r2,#0x20]
00006e  2330              MOVS     r3,#0x30
000070  401a              ANDS     r2,r2,r3
000072  0912              LSRS     r2,r2,#4
000074  4b54              LDR      r3,|L7.456|
000076  601a              STR      r2,[r3,#0]  ; g_u32hiDay
;;;294        g_u32loDay   = (RTC->CALM & RTC_CALM_DAY_Msk);
000078  4a4d              LDR      r2,|L7.432|
00007a  6a12              LDR      r2,[r2,#0x20]
00007c  0712              LSLS     r2,r2,#28
00007e  0f12              LSRS     r2,r2,#28
000080  4b52              LDR      r3,|L7.460|
000082  601a              STR      r2,[r3,#0]  ; g_u32loDay
;;;295    
;;;296        RTC->RWEN = RTC_WRITE_KEY;
000084  4a4b              LDR      r2,|L7.436|
000086  4b4a              LDR      r3,|L7.432|
000088  605a              STR      r2,[r3,#4]
;;;297        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
00008a  bf00              NOP      
                  |L7.140|
00008c  4a48              LDR      r2,|L7.432|
00008e  6852              LDR      r2,[r2,#4]
000090  2301              MOVS     r3,#1
000092  041b              LSLS     r3,r3,#16
000094  401a              ANDS     r2,r2,r3
000096  2a00              CMP      r2,#0
000098  d0f8              BEQ      |L7.140|
;;;298    
;;;299        g_u32hiHour   =  (RTC->TALM & RTC_TALM_TENHR_Msk)  >> RTC_TALM_TENHR_Pos;
00009a  4a45              LDR      r2,|L7.432|
00009c  69d2              LDR      r2,[r2,#0x1c]
00009e  2303              MOVS     r3,#3
0000a0  051b              LSLS     r3,r3,#20
0000a2  401a              ANDS     r2,r2,r3
0000a4  0d12              LSRS     r2,r2,#20
0000a6  4b4a              LDR      r3,|L7.464|
0000a8  601a              STR      r2,[r3,#0]  ; g_u32hiHour
;;;300        g_u32loHour   =  (RTC->TALM & RTC_TALM_HR_Msk)     >> RTC_TALM_HR_Pos;
0000aa  4a41              LDR      r2,|L7.432|
0000ac  69d2              LDR      r2,[r2,#0x1c]
0000ae  230f              MOVS     r3,#0xf
0000b0  041b              LSLS     r3,r3,#16
0000b2  401a              ANDS     r2,r2,r3
0000b4  0c12              LSRS     r2,r2,#16
0000b6  4b47              LDR      r3,|L7.468|
0000b8  601a              STR      r2,[r3,#0]  ; g_u32loHour
;;;301        g_u32hiMin    =  (RTC->TALM & RTC_TALM_TENMIN_Msk) >> RTC_TALM_TENMIN_Pos;
0000ba  4a3d              LDR      r2,|L7.432|
0000bc  69d2              LDR      r2,[r2,#0x1c]
0000be  2307              MOVS     r3,#7
0000c0  031b              LSLS     r3,r3,#12
0000c2  401a              ANDS     r2,r2,r3
0000c4  0b12              LSRS     r2,r2,#12
0000c6  4b44              LDR      r3,|L7.472|
0000c8  601a              STR      r2,[r3,#0]  ; g_u32hiMin
;;;302        g_u32loMin    =  (RTC->TALM & RTC_TALM_MIN_Msk)    >> RTC_TALM_MIN_Pos;
0000ca  4a39              LDR      r2,|L7.432|
0000cc  69d2              LDR      r2,[r2,#0x1c]
0000ce  230f              MOVS     r3,#0xf
0000d0  021b              LSLS     r3,r3,#8
0000d2  401a              ANDS     r2,r2,r3
0000d4  0a12              LSRS     r2,r2,#8
0000d6  4b41              LDR      r3,|L7.476|
0000d8  601a              STR      r2,[r3,#0]  ; g_u32loMin
;;;303        g_u32hiSec    =  (RTC->TALM & RTC_TALM_TENSEC_Msk) >> RTC_TALM_TENSEC_Pos;
0000da  4a35              LDR      r2,|L7.432|
0000dc  69d2              LDR      r2,[r2,#0x1c]
0000de  2370              MOVS     r3,#0x70
0000e0  401a              ANDS     r2,r2,r3
0000e2  0912              LSRS     r2,r2,#4
0000e4  4b3e              LDR      r3,|L7.480|
0000e6  601a              STR      r2,[r3,#0]  ; g_u32hiSec
;;;304        g_u32loSec    =  (RTC->TALM & RTC_TALM_SEC_Msk);
0000e8  4a31              LDR      r2,|L7.432|
0000ea  69d2              LDR      r2,[r2,#0x1c]
0000ec  0712              LSLS     r2,r2,#28
0000ee  0f12              LSRS     r2,r2,#28
0000f0  4b3c              LDR      r3,|L7.484|
0000f2  601a              STR      r2,[r3,#0]  ; g_u32loSec
;;;305    
;;;306        u32Tmp  = (g_u32hiYear * 10);                                    /* Compute to 20XX year */
0000f4  4a30              LDR      r2,|L7.440|
0000f6  6812              LDR      r2,[r2,#0]  ; g_u32hiYear
0000f8  230a              MOVS     r3,#0xa
0000fa  435a              MULS     r2,r3,r2
0000fc  4611              MOV      r1,r2
;;;307        u32Tmp += g_u32loYear;
0000fe  4a2f              LDR      r2,|L7.444|
000100  6812              LDR      r2,[r2,#0]  ; g_u32loYear
000102  1889              ADDS     r1,r1,r2
;;;308        sPt->u32Year = u32Tmp + RTC_YEAR2000;
000104  227d              MOVS     r2,#0x7d
000106  0112              LSLS     r2,r2,#4
000108  188a              ADDS     r2,r1,r2
00010a  6002              STR      r2,[r0,#0]
;;;309    
;;;310        u32Tmp = (g_u32hiMonth * 10);                                    /* Compute 0~12 month */
00010c  4a2c              LDR      r2,|L7.448|
00010e  6812              LDR      r2,[r2,#0]  ; g_u32hiMonth
000110  435a              MULS     r2,r3,r2
000112  4611              MOV      r1,r2
;;;311        sPt->u32Month = u32Tmp + g_u32loMonth;
000114  4a2b              LDR      r2,|L7.452|
000116  6812              LDR      r2,[r2,#0]  ; g_u32loMonth
000118  188a              ADDS     r2,r1,r2
00011a  6042              STR      r2,[r0,#4]
;;;312    
;;;313        u32Tmp = (g_u32hiDay * 10);                                        /* Compute 0~31 day */
00011c  4a2a              LDR      r2,|L7.456|
00011e  6812              LDR      r2,[r2,#0]  ; g_u32hiDay
000120  435a              MULS     r2,r3,r2
000122  4611              MOV      r1,r2
;;;314        sPt->u32Day = u32Tmp + g_u32loDay;
000124  4a29              LDR      r2,|L7.460|
000126  6812              LDR      r2,[r2,#0]  ; g_u32loDay
000128  188a              ADDS     r2,r1,r2
00012a  6082              STR      r2,[r0,#8]
;;;315    
;;;316        if (sPt->u32TimeScale == RTC_CLOCK_12) {                /* Compute12/24 hour */
00012c  69c2              LDR      r2,[r0,#0x1c]
00012e  2a00              CMP      r2,#0
000130  d124              BNE      |L7.380|
;;;317            u32Tmp  = (g_u32hiHour * 10);
000132  4a27              LDR      r2,|L7.464|
000134  6812              LDR      r2,[r2,#0]  ; g_u32hiHour
000136  435a              MULS     r2,r3,r2
000138  4611              MOV      r1,r2
;;;318            u32Tmp += g_u32loHour;
00013a  4a26              LDR      r2,|L7.468|
00013c  6812              LDR      r2,[r2,#0]  ; g_u32loHour
00013e  1889              ADDS     r1,r1,r2
;;;319            sPt->u32Hour = u32Tmp;                                        /* AM: 1~12. PM: 21~32. */
000140  6101              STR      r1,[r0,#0x10]
;;;320    
;;;321            if (sPt->u32Hour >= 21) {
000142  6902              LDR      r2,[r0,#0x10]
000144  2a15              CMP      r2,#0x15
000146  d305              BCC      |L7.340|
;;;322                sPt->u32AmPm  = RTC_PM;
000148  2202              MOVS     r2,#2
00014a  6202              STR      r2,[r0,#0x20]
;;;323                sPt->u32Hour -= 20;
00014c  6902              LDR      r2,[r0,#0x10]
00014e  3a14              SUBS     r2,r2,#0x14
000150  6102              STR      r2,[r0,#0x10]
000152  e001              B        |L7.344|
                  |L7.340|
;;;324            } else {
;;;325                sPt->u32AmPm = RTC_AM;
000154  2201              MOVS     r2,#1
000156  6202              STR      r2,[r0,#0x20]
                  |L7.344|
;;;326            }
;;;327    
;;;328            u32Tmp  = (g_u32hiMin * 10);
000158  4a1f              LDR      r2,|L7.472|
00015a  6812              LDR      r2,[r2,#0]  ; g_u32hiMin
00015c  230a              MOVS     r3,#0xa
00015e  435a              MULS     r2,r3,r2
000160  4611              MOV      r1,r2
;;;329            u32Tmp += g_u32loMin;
000162  4a1e              LDR      r2,|L7.476|
000164  6812              LDR      r2,[r2,#0]  ; g_u32loMin
000166  1889              ADDS     r1,r1,r2
;;;330            sPt->u32Minute = u32Tmp;
000168  6141              STR      r1,[r0,#0x14]
;;;331    
;;;332            u32Tmp  = (g_u32hiSec * 10);
00016a  4a1d              LDR      r2,|L7.480|
00016c  6812              LDR      r2,[r2,#0]  ; g_u32hiSec
00016e  435a              MULS     r2,r3,r2
000170  4611              MOV      r1,r2
;;;333            u32Tmp += g_u32loSec;
000172  4a1c              LDR      r2,|L7.484|
000174  6812              LDR      r2,[r2,#0]  ; g_u32loSec
000176  1889              ADDS     r1,r1,r2
;;;334            sPt->u32Second = u32Tmp;
000178  6181              STR      r1,[r0,#0x18]
00017a  e018              B        |L7.430|
                  |L7.380|
;;;335    
;;;336        } else {
;;;337            /* RTC_CLOCK_24 */
;;;338            u32Tmp  = (g_u32hiHour * 10);
00017c  4a14              LDR      r2,|L7.464|
00017e  6812              LDR      r2,[r2,#0]  ; g_u32hiHour
000180  230a              MOVS     r3,#0xa
000182  435a              MULS     r2,r3,r2
000184  4611              MOV      r1,r2
;;;339            u32Tmp +=  g_u32loHour;
000186  4a13              LDR      r2,|L7.468|
000188  6812              LDR      r2,[r2,#0]  ; g_u32loHour
00018a  1889              ADDS     r1,r1,r2
;;;340            sPt->u32Hour = u32Tmp;
00018c  6101              STR      r1,[r0,#0x10]
;;;341    
;;;342            u32Tmp = (g_u32hiMin * 10);
00018e  4a12              LDR      r2,|L7.472|
000190  6812              LDR      r2,[r2,#0]  ; g_u32hiMin
000192  435a              MULS     r2,r3,r2
000194  4611              MOV      r1,r2
;;;343            u32Tmp+= g_u32loMin;
000196  4a11              LDR      r2,|L7.476|
000198  6812              LDR      r2,[r2,#0]  ; g_u32loMin
00019a  1889              ADDS     r1,r1,r2
;;;344            sPt->u32Minute = u32Tmp;
00019c  6141              STR      r1,[r0,#0x14]
;;;345    
;;;346            u32Tmp  = (g_u32hiSec * 10);
00019e  4a10              LDR      r2,|L7.480|
0001a0  6812              LDR      r2,[r2,#0]  ; g_u32hiSec
0001a2  435a              MULS     r2,r3,r2
0001a4  4611              MOV      r1,r2
;;;347            u32Tmp += g_u32loSec;
0001a6  4a0f              LDR      r2,|L7.484|
0001a8  6812              LDR      r2,[r2,#0]  ; g_u32loSec
0001aa  1889              ADDS     r1,r1,r2
;;;348            sPt->u32Second = u32Tmp;
0001ac  6181              STR      r1,[r0,#0x18]
                  |L7.430|
;;;349        }
;;;350    
;;;351    }
0001ae  4770              BX       lr
;;;352    
                          ENDP

                  |L7.432|
                          DCD      0x40008000
                  |L7.436|
                          DCD      0x0000a965
                  |L7.440|
                          DCD      g_u32hiYear
                  |L7.444|
                          DCD      g_u32loYear
                  |L7.448|
                          DCD      g_u32hiMonth
                  |L7.452|
                          DCD      g_u32loMonth
                  |L7.456|
                          DCD      g_u32hiDay
                  |L7.460|
                          DCD      g_u32loDay
                  |L7.464|
                          DCD      g_u32hiHour
                  |L7.468|
                          DCD      g_u32loHour
                  |L7.472|
                          DCD      g_u32hiMin
                  |L7.476|
                          DCD      g_u32loMin
                  |L7.480|
                          DCD      g_u32hiSec
                  |L7.484|
                          DCD      g_u32loSec

                          AREA ||i.RTC_GetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetDateAndTime PROC
;;;190     */
;;;191    void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  4a60              LDR      r2,|L8.388|
;;;192    {
;;;193        uint32_t u32Tmp;
;;;194    
;;;195        sPt->u32TimeScale = RTC->CLKFMT & RTC_CLKFMT_24HEN_Msk;    /* 12/24-hour */
000002  6952              LDR      r2,[r2,#0x14]
000004  07d2              LSLS     r2,r2,#31
000006  0fd2              LSRS     r2,r2,#31
000008  61c2              STR      r2,[r0,#0x1c]
;;;196        sPt->u32DayOfWeek = RTC->WEEKDAY & RTC_WEEKDAY_WEEKDAY_Msk;          /* Day of week */
00000a  4a5e              LDR      r2,|L8.388|
00000c  6992              LDR      r2,[r2,#0x18]
00000e  0752              LSLS     r2,r2,#29
000010  0f52              LSRS     r2,r2,#29
000012  60c2              STR      r2,[r0,#0xc]
;;;197    
;;;198        g_u32hiYear  = (RTC->CAL & RTC_CAL_TENYEAR_Msk) >> RTC_CAL_TENYEAR_Pos;
000014  4a5b              LDR      r2,|L8.388|
000016  6912              LDR      r2,[r2,#0x10]
000018  230f              MOVS     r3,#0xf
00001a  051b              LSLS     r3,r3,#20
00001c  401a              ANDS     r2,r2,r3
00001e  0d12              LSRS     r2,r2,#20
000020  4b59              LDR      r3,|L8.392|
000022  601a              STR      r2,[r3,#0]  ; g_u32hiYear
;;;199        g_u32loYear  = (RTC->CAL & RTC_CAL_YEAR_Msk)    >> RTC_CAL_YEAR_Pos;
000024  4a57              LDR      r2,|L8.388|
000026  6912              LDR      r2,[r2,#0x10]
000028  230f              MOVS     r3,#0xf
00002a  041b              LSLS     r3,r3,#16
00002c  401a              ANDS     r2,r2,r3
00002e  0c12              LSRS     r2,r2,#16
000030  4b56              LDR      r3,|L8.396|
000032  601a              STR      r2,[r3,#0]  ; g_u32loYear
;;;200        g_u32hiMonth = (RTC->CAL & RTC_CAL_TENMON_Msk)  >> RTC_CAL_TENMON_Pos;
000034  4a53              LDR      r2,|L8.388|
000036  6912              LDR      r2,[r2,#0x10]
000038  2301              MOVS     r3,#1
00003a  031b              LSLS     r3,r3,#12
00003c  401a              ANDS     r2,r2,r3
00003e  0b12              LSRS     r2,r2,#12
000040  4b53              LDR      r3,|L8.400|
000042  601a              STR      r2,[r3,#0]  ; g_u32hiMonth
;;;201        g_u32loMonth = (RTC->CAL & RTC_CAL_MON_Msk)     >> RTC_CAL_MON_Pos;
000044  4a4f              LDR      r2,|L8.388|
000046  6912              LDR      r2,[r2,#0x10]
000048  230f              MOVS     r3,#0xf
00004a  021b              LSLS     r3,r3,#8
00004c  401a              ANDS     r2,r2,r3
00004e  0a12              LSRS     r2,r2,#8
000050  4b50              LDR      r3,|L8.404|
000052  601a              STR      r2,[r3,#0]  ; g_u32loMonth
;;;202        g_u32hiDay   = (RTC->CAL & RTC_CAL_TENDAY_Msk)  >> RTC_CAL_TENDAY_Pos;
000054  4a4b              LDR      r2,|L8.388|
000056  6912              LDR      r2,[r2,#0x10]
000058  2330              MOVS     r3,#0x30
00005a  401a              ANDS     r2,r2,r3
00005c  0912              LSRS     r2,r2,#4
00005e  4b4e              LDR      r3,|L8.408|
000060  601a              STR      r2,[r3,#0]  ; g_u32hiDay
;;;203        g_u32loDay   = (RTC->CAL & RTC_CAL_DAY_Msk);
000062  4a48              LDR      r2,|L8.388|
000064  6912              LDR      r2,[r2,#0x10]
000066  0712              LSLS     r2,r2,#28
000068  0f12              LSRS     r2,r2,#28
00006a  4b4c              LDR      r3,|L8.412|
00006c  601a              STR      r2,[r3,#0]  ; g_u32loDay
;;;204    
;;;205        g_u32hiHour =  (RTC->TIME & RTC_TIME_TENHR_Msk)  >> RTC_TIME_TENHR_Pos;
00006e  4a45              LDR      r2,|L8.388|
000070  68d2              LDR      r2,[r2,#0xc]
000072  2303              MOVS     r3,#3
000074  051b              LSLS     r3,r3,#20
000076  401a              ANDS     r2,r2,r3
000078  0d12              LSRS     r2,r2,#20
00007a  4b49              LDR      r3,|L8.416|
00007c  601a              STR      r2,[r3,#0]  ; g_u32hiHour
;;;206        g_u32loHour =  (RTC->TIME & RTC_TIME_HR_Msk)     >> RTC_TIME_HR_Pos;
00007e  4a41              LDR      r2,|L8.388|
000080  68d2              LDR      r2,[r2,#0xc]
000082  230f              MOVS     r3,#0xf
000084  041b              LSLS     r3,r3,#16
000086  401a              ANDS     r2,r2,r3
000088  0c12              LSRS     r2,r2,#16
00008a  4b46              LDR      r3,|L8.420|
00008c  601a              STR      r2,[r3,#0]  ; g_u32loHour
;;;207        g_u32hiMin  =  (RTC->TIME & RTC_TIME_TENMIN_Msk) >> RTC_TIME_TENMIN_Pos;
00008e  4a3d              LDR      r2,|L8.388|
000090  68d2              LDR      r2,[r2,#0xc]
000092  2307              MOVS     r3,#7
000094  031b              LSLS     r3,r3,#12
000096  401a              ANDS     r2,r2,r3
000098  0b12              LSRS     r2,r2,#12
00009a  4b43              LDR      r3,|L8.424|
00009c  601a              STR      r2,[r3,#0]  ; g_u32hiMin
;;;208        g_u32loMin  =  (RTC->TIME & RTC_TIME_MIN_Msk)    >> RTC_TIME_MIN_Pos;
00009e  4a39              LDR      r2,|L8.388|
0000a0  68d2              LDR      r2,[r2,#0xc]
0000a2  230f              MOVS     r3,#0xf
0000a4  021b              LSLS     r3,r3,#8
0000a6  401a              ANDS     r2,r2,r3
0000a8  0a12              LSRS     r2,r2,#8
0000aa  4b40              LDR      r3,|L8.428|
0000ac  601a              STR      r2,[r3,#0]  ; g_u32loMin
;;;209        g_u32hiSec  =  (RTC->TIME & RTC_TIME_TENSEC_Msk) >> RTC_TIME_TENSEC_Pos;
0000ae  4a35              LDR      r2,|L8.388|
0000b0  68d2              LDR      r2,[r2,#0xc]
0000b2  2370              MOVS     r3,#0x70
0000b4  401a              ANDS     r2,r2,r3
0000b6  0912              LSRS     r2,r2,#4
0000b8  4b3d              LDR      r3,|L8.432|
0000ba  601a              STR      r2,[r3,#0]  ; g_u32hiSec
;;;210        g_u32loSec  =  (RTC->TIME & RTC_TIME_SEC_Msk);
0000bc  4a31              LDR      r2,|L8.388|
0000be  68d2              LDR      r2,[r2,#0xc]
0000c0  0712              LSLS     r2,r2,#28
0000c2  0f12              LSRS     r2,r2,#28
0000c4  4b3b              LDR      r3,|L8.436|
0000c6  601a              STR      r2,[r3,#0]  ; g_u32loSec
;;;211    
;;;212        u32Tmp  = (g_u32hiYear * 10);              /* Compute to 20XX year */
0000c8  4a2f              LDR      r2,|L8.392|
0000ca  6812              LDR      r2,[r2,#0]  ; g_u32hiYear
0000cc  230a              MOVS     r3,#0xa
0000ce  435a              MULS     r2,r3,r2
0000d0  4611              MOV      r1,r2
;;;213        u32Tmp += g_u32loYear;
0000d2  4a2e              LDR      r2,|L8.396|
0000d4  6812              LDR      r2,[r2,#0]  ; g_u32loYear
0000d6  1889              ADDS     r1,r1,r2
;;;214        sPt->u32Year = u32Tmp + RTC_YEAR2000;
0000d8  227d              MOVS     r2,#0x7d
0000da  0112              LSLS     r2,r2,#4
0000dc  188a              ADDS     r2,r1,r2
0000de  6002              STR      r2,[r0,#0]
;;;215    
;;;216        u32Tmp = (g_u32hiMonth * 10);              /* Compute 0~12 month */
0000e0  4a2b              LDR      r2,|L8.400|
0000e2  6812              LDR      r2,[r2,#0]  ; g_u32hiMonth
0000e4  435a              MULS     r2,r3,r2
0000e6  4611              MOV      r1,r2
;;;217        sPt->u32Month = u32Tmp + g_u32loMonth;
0000e8  4a2a              LDR      r2,|L8.404|
0000ea  6812              LDR      r2,[r2,#0]  ; g_u32loMonth
0000ec  188a              ADDS     r2,r1,r2
0000ee  6042              STR      r2,[r0,#4]
;;;218    
;;;219        u32Tmp = (g_u32hiDay * 10);                /* Compute 0~31 day */
0000f0  4a29              LDR      r2,|L8.408|
0000f2  6812              LDR      r2,[r2,#0]  ; g_u32hiDay
0000f4  435a              MULS     r2,r3,r2
0000f6  4611              MOV      r1,r2
;;;220        sPt->u32Day   =  u32Tmp  + g_u32loDay;
0000f8  4a28              LDR      r2,|L8.412|
0000fa  6812              LDR      r2,[r2,#0]  ; g_u32loDay
0000fc  188a              ADDS     r2,r1,r2
0000fe  6082              STR      r2,[r0,#8]
;;;221    
;;;222        if (sPt->u32TimeScale == RTC_CLOCK_12) { /* Compute12/24 hour */
000100  69c2              LDR      r2,[r0,#0x1c]
000102  2a00              CMP      r2,#0
000104  d124              BNE      |L8.336|
;;;223            u32Tmp = (g_u32hiHour * 10);
000106  4a26              LDR      r2,|L8.416|
000108  6812              LDR      r2,[r2,#0]  ; g_u32hiHour
00010a  435a              MULS     r2,r3,r2
00010c  4611              MOV      r1,r2
;;;224            u32Tmp+= g_u32loHour;
00010e  4a25              LDR      r2,|L8.420|
000110  6812              LDR      r2,[r2,#0]  ; g_u32loHour
000112  1889              ADDS     r1,r1,r2
;;;225            sPt->u32Hour = u32Tmp;                 /* AM: 1~12. PM: 21~32. */
000114  6101              STR      r1,[r0,#0x10]
;;;226    
;;;227            if (sPt->u32Hour >= 21) {
000116  6902              LDR      r2,[r0,#0x10]
000118  2a15              CMP      r2,#0x15
00011a  d305              BCC      |L8.296|
;;;228                sPt->u32AmPm = RTC_PM;
00011c  2202              MOVS     r2,#2
00011e  6202              STR      r2,[r0,#0x20]
;;;229                sPt->u32Hour -= 20;
000120  6902              LDR      r2,[r0,#0x10]
000122  3a14              SUBS     r2,r2,#0x14
000124  6102              STR      r2,[r0,#0x10]
000126  e001              B        |L8.300|
                  |L8.296|
;;;230            } else {
;;;231                sPt->u32AmPm = RTC_AM;
000128  2201              MOVS     r2,#1
00012a  6202              STR      r2,[r0,#0x20]
                  |L8.300|
;;;232            }
;;;233    
;;;234            u32Tmp = (g_u32hiMin  * 10);
00012c  4a1e              LDR      r2,|L8.424|
00012e  6812              LDR      r2,[r2,#0]  ; g_u32hiMin
000130  230a              MOVS     r3,#0xa
000132  435a              MULS     r2,r3,r2
000134  4611              MOV      r1,r2
;;;235            u32Tmp+= g_u32loMin;
000136  4a1d              LDR      r2,|L8.428|
000138  6812              LDR      r2,[r2,#0]  ; g_u32loMin
00013a  1889              ADDS     r1,r1,r2
;;;236            sPt->u32Minute = u32Tmp;
00013c  6141              STR      r1,[r0,#0x14]
;;;237    
;;;238            u32Tmp = (g_u32hiSec  * 10);
00013e  4a1c              LDR      r2,|L8.432|
000140  6812              LDR      r2,[r2,#0]  ; g_u32hiSec
000142  435a              MULS     r2,r3,r2
000144  4611              MOV      r1,r2
;;;239            u32Tmp+= g_u32loSec;
000146  4a1b              LDR      r2,|L8.436|
000148  6812              LDR      r2,[r2,#0]  ; g_u32loSec
00014a  1889              ADDS     r1,r1,r2
;;;240            sPt->u32Second = u32Tmp;
00014c  6181              STR      r1,[r0,#0x18]
00014e  e018              B        |L8.386|
                  |L8.336|
;;;241    
;;;242        } else {
;;;243            /* RTC_CLOCK_24 */
;;;244            u32Tmp  = (g_u32hiHour * 10);
000150  4a13              LDR      r2,|L8.416|
000152  6812              LDR      r2,[r2,#0]  ; g_u32hiHour
000154  230a              MOVS     r3,#0xa
000156  435a              MULS     r2,r3,r2
000158  4611              MOV      r1,r2
;;;245            u32Tmp += g_u32loHour;
00015a  4a12              LDR      r2,|L8.420|
00015c  6812              LDR      r2,[r2,#0]  ; g_u32loHour
00015e  1889              ADDS     r1,r1,r2
;;;246            sPt->u32Hour = u32Tmp;
000160  6101              STR      r1,[r0,#0x10]
;;;247    
;;;248            u32Tmp  = (g_u32hiMin * 10);
000162  4a11              LDR      r2,|L8.424|
000164  6812              LDR      r2,[r2,#0]  ; g_u32hiMin
000166  435a              MULS     r2,r3,r2
000168  4611              MOV      r1,r2
;;;249            u32Tmp +=  g_u32loMin;
00016a  4a10              LDR      r2,|L8.428|
00016c  6812              LDR      r2,[r2,#0]  ; g_u32loMin
00016e  1889              ADDS     r1,r1,r2
;;;250            sPt->u32Minute = u32Tmp;
000170  6141              STR      r1,[r0,#0x14]
;;;251    
;;;252            u32Tmp  = (g_u32hiSec * 10);
000172  4a0f              LDR      r2,|L8.432|
000174  6812              LDR      r2,[r2,#0]  ; g_u32hiSec
000176  435a              MULS     r2,r3,r2
000178  4611              MOV      r1,r2
;;;253            u32Tmp += g_u32loSec;
00017a  4a0e              LDR      r2,|L8.436|
00017c  6812              LDR      r2,[r2,#0]  ; g_u32loSec
00017e  1889              ADDS     r1,r1,r2
;;;254            sPt->u32Second = u32Tmp;
000180  6181              STR      r1,[r0,#0x18]
                  |L8.386|
;;;255        }
;;;256    
;;;257    }
000182  4770              BX       lr
;;;258    
                          ENDP

                  |L8.388|
                          DCD      0x40008000
                  |L8.392|
                          DCD      g_u32hiYear
                  |L8.396|
                          DCD      g_u32loYear
                  |L8.400|
                          DCD      g_u32hiMonth
                  |L8.404|
                          DCD      g_u32loMonth
                  |L8.408|
                          DCD      g_u32hiDay
                  |L8.412|
                          DCD      g_u32loDay
                  |L8.416|
                          DCD      g_u32hiHour
                  |L8.420|
                          DCD      g_u32loHour
                  |L8.424|
                          DCD      g_u32hiMin
                  |L8.428|
                          DCD      g_u32loMin
                  |L8.432|
                          DCD      g_u32hiSec
                  |L8.436|
                          DCD      g_u32loSec

                          AREA ||i.RTC_GetDayOfWeek||, CODE, READONLY, ALIGN=2

                  RTC_GetDayOfWeek PROC
;;;654    
;;;655    uint32_t RTC_GetDayOfWeek(void)
000000  4802              LDR      r0,|L9.12|
;;;656    {
;;;657        return (RTC->WEEKDAY & RTC_WEEKDAY_WEEKDAY_Msk);
000002  6980              LDR      r0,[r0,#0x18]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;658    }
000008  4770              BX       lr
;;;659    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40008000

                          AREA ||i.RTC_Open||, CODE, READONLY, ALIGN=2

                  RTC_Open PROC
;;;99      */
;;;100    void RTC_Open (S_RTC_TIME_DATA_T *sPt)
000000  b538              PUSH     {r3-r5,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102        uint32_t u32Reg;
;;;103    
;;;104        volatile int32_t i32delay=1000;
000004  207d              MOVS     r0,#0x7d
000006  00c0              LSLS     r0,r0,#3
000008  9000              STR      r0,[sp,#0]
;;;105    
;;;106        if(RTC->INIT != 0x1) {
00000a  4858              LDR      r0,|L10.364|
00000c  6800              LDR      r0,[r0,#0]
00000e  2801              CMP      r0,#1
000010  d007              BEQ      |L10.34|
;;;107            RTC->INIT = RTC_INIT_KEY;
000012  4857              LDR      r0,|L10.368|
000014  4955              LDR      r1,|L10.364|
000016  6008              STR      r0,[r1,#0]
;;;108    
;;;109            while(RTC->INIT != 0x1);
000018  bf00              NOP      
                  |L10.26|
00001a  4854              LDR      r0,|L10.364|
00001c  6800              LDR      r0,[r0,#0]
00001e  2801              CMP      r0,#1
000020  d1fb              BNE      |L10.26|
                  |L10.34|
;;;110        }
;;;111    
;;;112        if(sPt == NULL)
000022  2c00              CMP      r4,#0
000024  d100              BNE      |L10.40|
                  |L10.38|
;;;113            return;
;;;114    
;;;115        /*-----------------------------------------------------------------------------------------------------*/
;;;116        /* Second, set RTC 24/12 hour setting                                                                  */
;;;117        /*-----------------------------------------------------------------------------------------------------*/
;;;118        if (sPt->u32TimeScale == RTC_CLOCK_12) {
;;;119            RTC->RWEN = RTC_WRITE_KEY;
;;;120            while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
;;;121            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
;;;122    
;;;123            /*-------------------------------------------------------------------------------------------------*/
;;;124            /* important, range of 12-hour PM mode is 21 up to 32                                               */
;;;125            /*-------------------------------------------------------------------------------------------------*/
;;;126            if (sPt->u32AmPm == RTC_PM)
;;;127                sPt->u32Hour += 20;
;;;128        } else {                                                                           /* RTC_CLOCK_24 */
;;;129            RTC->RWEN = RTC_WRITE_KEY;
;;;130            while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
;;;131            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
;;;132        }
;;;133    
;;;134        /*-----------------------------------------------------------------------------------------------------*/
;;;135        /* Set RTC Calender Loading                                                                            */
;;;136        /*-----------------------------------------------------------------------------------------------------*/
;;;137        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
;;;138        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
;;;139        u32Reg    |= ((sPt->u32Month  / 10) << 12);
;;;140        u32Reg    |= ((sPt->u32Month  % 10) << 8);
;;;141        u32Reg    |= ((sPt->u32Day    / 10) << 4);
;;;142        u32Reg    |= (sPt->u32Day     % 10);
;;;143        g_u32Reg = u32Reg;
;;;144    
;;;145        RTC->RWEN = RTC_WRITE_KEY;
;;;146        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
;;;147    
;;;148        RTC->CAL = (uint32_t)g_u32Reg;
;;;149    
;;;150        /*-----------------------------------------------------------------------------------------------------*/
;;;151        /* Set RTC Time Loading                                                                                */
;;;152        /*-----------------------------------------------------------------------------------------------------*/
;;;153        u32Reg     = ((sPt->u32Hour / 10) << 20);
;;;154        u32Reg    |= ((sPt->u32Hour % 10) << 16);
;;;155        u32Reg    |= ((sPt->u32Minute / 10) << 12);
;;;156        u32Reg    |= ((sPt->u32Minute % 10) << 8);
;;;157        u32Reg    |= ((sPt->u32Second / 10) << 4);
;;;158        u32Reg    |= (sPt->u32Second % 10);
;;;159        g_u32Reg = u32Reg;
;;;160    
;;;161        RTC->RWEN = RTC_WRITE_KEY;
;;;162        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
;;;163    
;;;164        RTC->TIME = (uint32_t)g_u32Reg;
;;;165    
;;;166        RTC->WEEKDAY = sPt->u32DayOfWeek;
;;;167    
;;;168        /* Waiting for RTC settings stable */
;;;169        while(i32delay--);
;;;170    
;;;171    }
000026  bd38              POP      {r3-r5,pc}
                  |L10.40|
000028  69e0              LDR      r0,[r4,#0x1c]         ;118
00002a  2800              CMP      r0,#0                 ;118
00002c  d117              BNE      |L10.94|
00002e  4851              LDR      r0,|L10.372|
000030  494e              LDR      r1,|L10.364|
000032  6048              STR      r0,[r1,#4]            ;119
000034  bf00              NOP                            ;120
                  |L10.54|
000036  484d              LDR      r0,|L10.364|
000038  6840              LDR      r0,[r0,#4]            ;120
00003a  2101              MOVS     r1,#1                 ;120
00003c  0409              LSLS     r1,r1,#16             ;120
00003e  4008              ANDS     r0,r0,r1              ;120
000040  2800              CMP      r0,#0                 ;120
000042  d0f8              BEQ      |L10.54|
000044  4849              LDR      r0,|L10.364|
000046  6940              LDR      r0,[r0,#0x14]         ;121
000048  0840              LSRS     r0,r0,#1              ;121
00004a  0040              LSLS     r0,r0,#1              ;121
00004c  4947              LDR      r1,|L10.364|
00004e  6148              STR      r0,[r1,#0x14]         ;121
000050  6a20              LDR      r0,[r4,#0x20]         ;126
000052  2802              CMP      r0,#2                 ;126
000054  d114              BNE      |L10.128|
000056  6920              LDR      r0,[r4,#0x10]         ;127
000058  3014              ADDS     r0,r0,#0x14           ;127
00005a  6120              STR      r0,[r4,#0x10]         ;127
00005c  e010              B        |L10.128|
                  |L10.94|
00005e  4845              LDR      r0,|L10.372|
000060  4942              LDR      r1,|L10.364|
000062  6048              STR      r0,[r1,#4]            ;129
000064  bf00              NOP                            ;130
                  |L10.102|
000066  4841              LDR      r0,|L10.364|
000068  6840              LDR      r0,[r0,#4]            ;130
00006a  2101              MOVS     r1,#1                 ;130
00006c  0409              LSLS     r1,r1,#16             ;130
00006e  4008              ANDS     r0,r0,r1              ;130
000070  2800              CMP      r0,#0                 ;130
000072  d0f8              BEQ      |L10.102|
000074  483d              LDR      r0,|L10.364|
000076  6940              LDR      r0,[r0,#0x14]         ;131
000078  2101              MOVS     r1,#1                 ;131
00007a  4308              ORRS     r0,r0,r1              ;131
00007c  493b              LDR      r1,|L10.364|
00007e  6148              STR      r0,[r1,#0x14]         ;131
                  |L10.128|
000080  227d              MOVS     r2,#0x7d              ;137
000082  0112              LSLS     r2,r2,#4              ;137
000084  6821              LDR      r1,[r4,#0]            ;137
000086  1a88              SUBS     r0,r1,r2              ;137
000088  210a              MOVS     r1,#0xa               ;137
00008a  f7fffffe          BL       __aeabi_uidivmod
00008e  0505              LSLS     r5,r0,#20             ;137
000090  227d              MOVS     r2,#0x7d              ;138
000092  0112              LSLS     r2,r2,#4              ;138
000094  6821              LDR      r1,[r4,#0]            ;138
000096  1a88              SUBS     r0,r1,r2              ;138
000098  210a              MOVS     r1,#0xa               ;138
00009a  f7fffffe          BL       __aeabi_uidivmod
00009e  0408              LSLS     r0,r1,#16             ;138
0000a0  4305              ORRS     r5,r5,r0              ;138
0000a2  210a              MOVS     r1,#0xa               ;139
0000a4  6860              LDR      r0,[r4,#4]            ;139
0000a6  f7fffffe          BL       __aeabi_uidivmod
0000aa  0300              LSLS     r0,r0,#12             ;139
0000ac  4305              ORRS     r5,r5,r0              ;139
0000ae  210a              MOVS     r1,#0xa               ;140
0000b0  6860              LDR      r0,[r4,#4]            ;140
0000b2  f7fffffe          BL       __aeabi_uidivmod
0000b6  0208              LSLS     r0,r1,#8              ;140
0000b8  4305              ORRS     r5,r5,r0              ;140
0000ba  210a              MOVS     r1,#0xa               ;141
0000bc  68a0              LDR      r0,[r4,#8]            ;141
0000be  f7fffffe          BL       __aeabi_uidivmod
0000c2  0100              LSLS     r0,r0,#4              ;141
0000c4  4305              ORRS     r5,r5,r0              ;141
0000c6  210a              MOVS     r1,#0xa               ;142
0000c8  68a0              LDR      r0,[r4,#8]            ;142
0000ca  f7fffffe          BL       __aeabi_uidivmod
0000ce  430d              ORRS     r5,r5,r1              ;142
0000d0  4829              LDR      r0,|L10.376|
0000d2  6005              STR      r5,[r0,#0]            ;143  ; g_u32Reg
0000d4  4827              LDR      r0,|L10.372|
0000d6  4925              LDR      r1,|L10.364|
0000d8  6048              STR      r0,[r1,#4]            ;145
0000da  bf00              NOP                            ;146
                  |L10.220|
0000dc  4823              LDR      r0,|L10.364|
0000de  6840              LDR      r0,[r0,#4]            ;146
0000e0  2101              MOVS     r1,#1                 ;146
0000e2  0409              LSLS     r1,r1,#16             ;146
0000e4  4008              ANDS     r0,r0,r1              ;146
0000e6  2800              CMP      r0,#0                 ;146
0000e8  d0f8              BEQ      |L10.220|
0000ea  4823              LDR      r0,|L10.376|
0000ec  6800              LDR      r0,[r0,#0]            ;148  ; g_u32Reg
0000ee  491f              LDR      r1,|L10.364|
0000f0  6108              STR      r0,[r1,#0x10]         ;148
0000f2  210a              MOVS     r1,#0xa               ;153
0000f4  6920              LDR      r0,[r4,#0x10]         ;153
0000f6  f7fffffe          BL       __aeabi_uidivmod
0000fa  0505              LSLS     r5,r0,#20             ;153
0000fc  210a              MOVS     r1,#0xa               ;154
0000fe  6920              LDR      r0,[r4,#0x10]         ;154
000100  f7fffffe          BL       __aeabi_uidivmod
000104  0408              LSLS     r0,r1,#16             ;154
000106  4305              ORRS     r5,r5,r0              ;154
000108  210a              MOVS     r1,#0xa               ;155
00010a  6960              LDR      r0,[r4,#0x14]         ;155
00010c  f7fffffe          BL       __aeabi_uidivmod
000110  0300              LSLS     r0,r0,#12             ;155
000112  4305              ORRS     r5,r5,r0              ;155
000114  210a              MOVS     r1,#0xa               ;156
000116  6960              LDR      r0,[r4,#0x14]         ;156
000118  f7fffffe          BL       __aeabi_uidivmod
00011c  0208              LSLS     r0,r1,#8              ;156
00011e  4305              ORRS     r5,r5,r0              ;156
000120  210a              MOVS     r1,#0xa               ;157
000122  69a0              LDR      r0,[r4,#0x18]         ;157
000124  f7fffffe          BL       __aeabi_uidivmod
000128  0100              LSLS     r0,r0,#4              ;157
00012a  4305              ORRS     r5,r5,r0              ;157
00012c  210a              MOVS     r1,#0xa               ;158
00012e  69a0              LDR      r0,[r4,#0x18]         ;158
000130  f7fffffe          BL       __aeabi_uidivmod
000134  430d              ORRS     r5,r5,r1              ;158
000136  4810              LDR      r0,|L10.376|
000138  6005              STR      r5,[r0,#0]            ;159  ; g_u32Reg
00013a  480e              LDR      r0,|L10.372|
00013c  490b              LDR      r1,|L10.364|
00013e  6048              STR      r0,[r1,#4]            ;161
000140  bf00              NOP                            ;162
                  |L10.322|
000142  480a              LDR      r0,|L10.364|
000144  6840              LDR      r0,[r0,#4]            ;162
000146  2101              MOVS     r1,#1                 ;162
000148  0409              LSLS     r1,r1,#16             ;162
00014a  4008              ANDS     r0,r0,r1              ;162
00014c  2800              CMP      r0,#0                 ;162
00014e  d0f8              BEQ      |L10.322|
000150  4809              LDR      r0,|L10.376|
000152  6800              LDR      r0,[r0,#0]            ;164  ; g_u32Reg
000154  4905              LDR      r1,|L10.364|
000156  60c8              STR      r0,[r1,#0xc]          ;164
000158  68e0              LDR      r0,[r4,#0xc]          ;166
00015a  6188              STR      r0,[r1,#0x18]         ;166
00015c  bf00              NOP                            ;169
                  |L10.350|
00015e  9800              LDR      r0,[sp,#0]            ;169
000160  1e41              SUBS     r1,r0,#1              ;169
000162  9100              STR      r1,[sp,#0]            ;169
000164  2800              CMP      r0,#0                 ;169
000166  d1fa              BNE      |L10.350|
000168  bf00              NOP      
00016a  e75c              B        |L10.38|
;;;172    
                          ENDP

                  |L10.364|
                          DCD      0x40008000
                  |L10.368|
                          DCD      0xa5eb1357
                  |L10.372|
                          DCD      0x0000a965
                  |L10.376|
                          DCD      g_u32Reg

                          AREA ||i.RTC_SetAlarmDate||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDate PROC
;;;587     */
;;;588    void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day)
000000  b5f8              PUSH     {r3-r7,lr}
;;;589    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;590        __IO uint32_t u32Reg;
;;;591    
;;;592        RTC->RWEN = RTC_WRITE_KEY;
000008  4827              LDR      r0,|L11.168|
00000a  4928              LDR      r1,|L11.172|
00000c  6048              STR      r0,[r1,#4]
;;;593        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
00000e  bf00              NOP      
                  |L11.16|
000010  4826              LDR      r0,|L11.172|
000012  6840              LDR      r0,[r0,#4]
000014  2101              MOVS     r1,#1
000016  0409              LSLS     r1,r1,#16
000018  4008              ANDS     r0,r0,r1
00001a  2800              CMP      r0,#0
00001c  d0f8              BEQ      |L11.16|
;;;594    
;;;595        u32Reg       = ((u32Year - RTC_YEAR2000) / 10) << 20;
00001e  217d              MOVS     r1,#0x7d
000020  0109              LSLS     r1,r1,#4
000022  1a60              SUBS     r0,r4,r1
000024  210a              MOVS     r1,#0xa
000026  f7fffffe          BL       __aeabi_uidivmod
00002a  0500              LSLS     r0,r0,#20
00002c  9000              STR      r0,[sp,#0]
;;;596        u32Reg      |= (((u32Year - RTC_YEAR2000) % 10) << 16);
00002e  217d              MOVS     r1,#0x7d
000030  0109              LSLS     r1,r1,#4
000032  1a60              SUBS     r0,r4,r1
000034  210a              MOVS     r1,#0xa
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  0408              LSLS     r0,r1,#16
00003c  9900              LDR      r1,[sp,#0]
00003e  4308              ORRS     r0,r0,r1
000040  9000              STR      r0,[sp,#0]
;;;597        u32Reg      |= ((u32Month  / 10) << 12);
000042  210a              MOVS     r1,#0xa
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  0300              LSLS     r0,r0,#12
00004c  9900              LDR      r1,[sp,#0]
00004e  4308              ORRS     r0,r0,r1
000050  9000              STR      r0,[sp,#0]
;;;598        u32Reg      |= ((u32Month  % 10) << 8);
000052  210a              MOVS     r1,#0xa
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       __aeabi_uidivmod
00005a  0208              LSLS     r0,r1,#8
00005c  9900              LDR      r1,[sp,#0]
00005e  4308              ORRS     r0,r0,r1
000060  9000              STR      r0,[sp,#0]
;;;599        u32Reg      |= ((u32Day    / 10) << 4);
000062  210a              MOVS     r1,#0xa
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       __aeabi_uidivmod
00006a  0100              LSLS     r0,r0,#4
00006c  9900              LDR      r1,[sp,#0]
00006e  4308              ORRS     r0,r0,r1
000070  9000              STR      r0,[sp,#0]
;;;600        u32Reg      |=  (u32Day    % 10);
000072  210a              MOVS     r1,#0xa
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       __aeabi_uidivmod
00007a  9800              LDR      r0,[sp,#0]
00007c  4301              ORRS     r1,r1,r0
00007e  9100              STR      r1,[sp,#0]
;;;601        g_u32Reg   = u32Reg;
000080  490b              LDR      r1,|L11.176|
000082  9800              LDR      r0,[sp,#0]
000084  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;602    
;;;603        RTC->RWEN = RTC_WRITE_KEY;
000086  4808              LDR      r0,|L11.168|
000088  4908              LDR      r1,|L11.172|
00008a  6048              STR      r0,[r1,#4]
;;;604        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
00008c  bf00              NOP      
                  |L11.142|
00008e  4807              LDR      r0,|L11.172|
000090  6840              LDR      r0,[r0,#4]
000092  2101              MOVS     r1,#1
000094  0409              LSLS     r1,r1,#16
000096  4008              ANDS     r0,r0,r1
000098  2800              CMP      r0,#0
00009a  d0f8              BEQ      |L11.142|
;;;605    
;;;606        RTC->CALM = (uint32_t)g_u32Reg;
00009c  4804              LDR      r0,|L11.176|
00009e  6800              LDR      r0,[r0,#0]  ; g_u32Reg
0000a0  4902              LDR      r1,|L11.172|
0000a2  6208              STR      r0,[r1,#0x20]
;;;607    
;;;608    }
0000a4  bdf8              POP      {r3-r7,pc}
;;;609    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L11.168|
                          DCD      0x0000a965
                  |L11.172|
                          DCD      0x40008000
                  |L11.176|
                          DCD      g_u32Reg

                          AREA ||i.RTC_SetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDateAndTime PROC
;;;445     */
;;;446    void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b570              PUSH     {r4-r6,lr}
;;;447    {
000002  4604              MOV      r4,r0
;;;448        uint32_t u32Reg;
;;;449    
;;;450        RTC->RWEN = RTC_WRITE_KEY;
000004  4849              LDR      r0,|L12.300|
000006  494a              LDR      r1,|L12.304|
000008  6048              STR      r0,[r1,#4]
;;;451        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
00000a  bf00              NOP      
                  |L12.12|
00000c  4848              LDR      r0,|L12.304|
00000e  6840              LDR      r0,[r0,#4]
000010  2101              MOVS     r1,#1
000012  0409              LSLS     r1,r1,#16
000014  4008              ANDS     r0,r0,r1
000016  2800              CMP      r0,#0
000018  d0f8              BEQ      |L12.12|
;;;452    
;;;453        if (sPt->u32TimeScale == RTC_CLOCK_12) {
00001a  69e0              LDR      r0,[r4,#0x1c]
00001c  2800              CMP      r0,#0
00001e  d10c              BNE      |L12.58|
;;;454            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
000020  4843              LDR      r0,|L12.304|
000022  6940              LDR      r0,[r0,#0x14]
000024  0840              LSRS     r0,r0,#1
000026  0040              LSLS     r0,r0,#1
000028  4941              LDR      r1,|L12.304|
00002a  6148              STR      r0,[r1,#0x14]
;;;455    
;;;456            /*-----------------------------------------------------------------------------------------*/
;;;457            /* important, range of 12-hour PM mode is 21 up to 32                                       */
;;;458            /*-----------------------------------------------------------------------------------------*/
;;;459            if (sPt->u32AmPm == RTC_PM)
00002c  6a20              LDR      r0,[r4,#0x20]
00002e  2802              CMP      r0,#2
000030  d109              BNE      |L12.70|
;;;460                sPt->u32Hour += 20;
000032  6920              LDR      r0,[r4,#0x10]
000034  3014              ADDS     r0,r0,#0x14
000036  6120              STR      r0,[r4,#0x10]
000038  e005              B        |L12.70|
                  |L12.58|
;;;461        } else {                                                              /* RTC_CLOCK_24 */
;;;462            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
00003a  483d              LDR      r0,|L12.304|
00003c  6940              LDR      r0,[r0,#0x14]
00003e  2101              MOVS     r1,#1
000040  4308              ORRS     r0,r0,r1
000042  493b              LDR      r1,|L12.304|
000044  6148              STR      r0,[r1,#0x14]
                  |L12.70|
;;;463        }
;;;464    
;;;465        RTC->WEEKDAY = sPt->u32DayOfWeek & RTC_WEEKDAY_WEEKDAY_Msk;
000046  7b20              LDRB     r0,[r4,#0xc]
000048  0740              LSLS     r0,r0,#29
00004a  0f40              LSRS     r0,r0,#29
00004c  4938              LDR      r1,|L12.304|
00004e  6188              STR      r0,[r1,#0x18]
;;;466    
;;;467    
;;;468        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
000050  227d              MOVS     r2,#0x7d
000052  0112              LSLS     r2,r2,#4
000054  6821              LDR      r1,[r4,#0]
000056  1a88              SUBS     r0,r1,r2
000058  210a              MOVS     r1,#0xa
00005a  f7fffffe          BL       __aeabi_uidivmod
00005e  0505              LSLS     r5,r0,#20
;;;469        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000060  227d              MOVS     r2,#0x7d
000062  0112              LSLS     r2,r2,#4
000064  6821              LDR      r1,[r4,#0]
000066  1a88              SUBS     r0,r1,r2
000068  210a              MOVS     r1,#0xa
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  0408              LSLS     r0,r1,#16
000070  4305              ORRS     r5,r5,r0
;;;470        u32Reg    |= ((sPt->u32Month  / 10) << 12);
000072  210a              MOVS     r1,#0xa
000074  6860              LDR      r0,[r4,#4]
000076  f7fffffe          BL       __aeabi_uidivmod
00007a  0300              LSLS     r0,r0,#12
00007c  4305              ORRS     r5,r5,r0
;;;471        u32Reg    |= ((sPt->u32Month  % 10) << 8);
00007e  210a              MOVS     r1,#0xa
000080  6860              LDR      r0,[r4,#4]
000082  f7fffffe          BL       __aeabi_uidivmod
000086  0208              LSLS     r0,r1,#8
000088  4305              ORRS     r5,r5,r0
;;;472        u32Reg    |= ((sPt->u32Day     / 10) << 4);
00008a  210a              MOVS     r1,#0xa
00008c  68a0              LDR      r0,[r4,#8]
00008e  f7fffffe          BL       __aeabi_uidivmod
000092  0100              LSLS     r0,r0,#4
000094  4305              ORRS     r5,r5,r0
;;;473        u32Reg    |=  (sPt->u32Day    % 10);
000096  210a              MOVS     r1,#0xa
000098  68a0              LDR      r0,[r4,#8]
00009a  f7fffffe          BL       __aeabi_uidivmod
00009e  430d              ORRS     r5,r5,r1
;;;474        g_u32Reg   = u32Reg;
0000a0  4824              LDR      r0,|L12.308|
0000a2  6005              STR      r5,[r0,#0]  ; g_u32Reg
;;;475    
;;;476        RTC->RWEN = RTC_WRITE_KEY;
0000a4  4821              LDR      r0,|L12.300|
0000a6  4922              LDR      r1,|L12.304|
0000a8  6048              STR      r0,[r1,#4]
;;;477        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
0000aa  bf00              NOP      
                  |L12.172|
0000ac  4820              LDR      r0,|L12.304|
0000ae  6840              LDR      r0,[r0,#4]
0000b0  2101              MOVS     r1,#1
0000b2  0409              LSLS     r1,r1,#16
0000b4  4008              ANDS     r0,r0,r1
0000b6  2800              CMP      r0,#0
0000b8  d0f8              BEQ      |L12.172|
;;;478    
;;;479        RTC->CALM = (uint32_t)g_u32Reg;
0000ba  481e              LDR      r0,|L12.308|
0000bc  6800              LDR      r0,[r0,#0]  ; g_u32Reg
0000be  491c              LDR      r1,|L12.304|
0000c0  6208              STR      r0,[r1,#0x20]
;;;480    
;;;481        u32Reg     = ((sPt->u32Hour   / 10) << 20);
0000c2  210a              MOVS     r1,#0xa
0000c4  6920              LDR      r0,[r4,#0x10]
0000c6  f7fffffe          BL       __aeabi_uidivmod
0000ca  0505              LSLS     r5,r0,#20
;;;482        u32Reg    |= ((sPt->u32Hour   % 10) << 16);
0000cc  210a              MOVS     r1,#0xa
0000ce  6920              LDR      r0,[r4,#0x10]
0000d0  f7fffffe          BL       __aeabi_uidivmod
0000d4  0408              LSLS     r0,r1,#16
0000d6  4305              ORRS     r5,r5,r0
;;;483        u32Reg    |= ((sPt->u32Minute / 10) << 12);
0000d8  210a              MOVS     r1,#0xa
0000da  6960              LDR      r0,[r4,#0x14]
0000dc  f7fffffe          BL       __aeabi_uidivmod
0000e0  0300              LSLS     r0,r0,#12
0000e2  4305              ORRS     r5,r5,r0
;;;484        u32Reg    |= ((sPt->u32Minute % 10) << 8);
0000e4  210a              MOVS     r1,#0xa
0000e6  6960              LDR      r0,[r4,#0x14]
0000e8  f7fffffe          BL       __aeabi_uidivmod
0000ec  0208              LSLS     r0,r1,#8
0000ee  4305              ORRS     r5,r5,r0
;;;485        u32Reg    |= ((sPt->u32Second / 10) << 4);
0000f0  210a              MOVS     r1,#0xa
0000f2  69a0              LDR      r0,[r4,#0x18]
0000f4  f7fffffe          BL       __aeabi_uidivmod
0000f8  0100              LSLS     r0,r0,#4
0000fa  4305              ORRS     r5,r5,r0
;;;486        u32Reg    |=  (sPt->u32Second % 10);
0000fc  210a              MOVS     r1,#0xa
0000fe  69a0              LDR      r0,[r4,#0x18]
000100  f7fffffe          BL       __aeabi_uidivmod
000104  430d              ORRS     r5,r5,r1
;;;487        g_u32Reg = u32Reg;
000106  480b              LDR      r0,|L12.308|
000108  6005              STR      r5,[r0,#0]  ; g_u32Reg
;;;488    
;;;489        RTC->RWEN = RTC_WRITE_KEY;
00010a  4808              LDR      r0,|L12.300|
00010c  4908              LDR      r1,|L12.304|
00010e  6048              STR      r0,[r1,#4]
;;;490        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000110  bf00              NOP      
                  |L12.274|
000112  4807              LDR      r0,|L12.304|
000114  6840              LDR      r0,[r0,#4]
000116  2101              MOVS     r1,#1
000118  0409              LSLS     r1,r1,#16
00011a  4008              ANDS     r0,r0,r1
00011c  2800              CMP      r0,#0
00011e  d0f8              BEQ      |L12.274|
;;;491    
;;;492        RTC->TALM = (uint32_t)g_u32Reg;
000120  4804              LDR      r0,|L12.308|
000122  6800              LDR      r0,[r0,#0]  ; g_u32Reg
000124  4902              LDR      r1,|L12.304|
000126  61c8              STR      r0,[r1,#0x1c]
;;;493    
;;;494    }
000128  bd70              POP      {r4-r6,pc}
;;;495    
                          ENDP

00012a  0000              DCW      0x0000
                  |L12.300|
                          DCD      0x0000a965
                  |L12.304|
                          DCD      0x40008000
                  |L12.308|
                          DCD      g_u32Reg

                          AREA ||i.RTC_SetAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmTime PROC
;;;621     */
;;;622    void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;623    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461c              MOV      r4,r3
;;;624        __IO uint32_t u32Reg;
;;;625    
;;;626        RTC->RWEN = RTC_WRITE_KEY;
00000a  4830              LDR      r0,|L13.204|
00000c  4930              LDR      r1,|L13.208|
00000e  6048              STR      r0,[r1,#4]
;;;627        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000010  bf00              NOP      
                  |L13.18|
000012  482f              LDR      r0,|L13.208|
000014  6840              LDR      r0,[r0,#4]
000016  2101              MOVS     r1,#1
000018  0409              LSLS     r1,r1,#16
00001a  4008              ANDS     r0,r0,r1
00001c  2800              CMP      r0,#0
00001e  d0f8              BEQ      |L13.18|
;;;628    
;;;629        if (u32TimeMode == RTC_CLOCK_12) {
000020  2c00              CMP      r4,#0
000022  d10a              BNE      |L13.58|
;;;630            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
000024  482a              LDR      r0,|L13.208|
000026  6940              LDR      r0,[r0,#0x14]
000028  0840              LSRS     r0,r0,#1
00002a  0040              LSLS     r0,r0,#1
00002c  4928              LDR      r1,|L13.208|
00002e  6148              STR      r0,[r1,#0x14]
;;;631    
;;;632            if (u32AmPm == RTC_PM)    /* important, range of 12-hour PM mode is 21 up to 32 */
000030  9806              LDR      r0,[sp,#0x18]
000032  2802              CMP      r0,#2
000034  d109              BNE      |L13.74|
;;;633                u32Hour += 20;
000036  3514              ADDS     r5,r5,#0x14
000038  e007              B        |L13.74|
                  |L13.58|
;;;634        } else if(u32TimeMode == RTC_CLOCK_24) {
00003a  2c01              CMP      r4,#1
00003c  d105              BNE      |L13.74|
;;;635            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
00003e  4824              LDR      r0,|L13.208|
000040  6940              LDR      r0,[r0,#0x14]
000042  2101              MOVS     r1,#1
000044  4308              ORRS     r0,r0,r1
000046  4922              LDR      r1,|L13.208|
000048  6148              STR      r0,[r1,#0x14]
                  |L13.74|
;;;636        }
;;;637    
;;;638        u32Reg     = ((u32Hour   / 10) << 20);
00004a  210a              MOVS     r1,#0xa
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0500              LSLS     r0,r0,#20
000054  9000              STR      r0,[sp,#0]
;;;639        u32Reg    |= ((u32Hour   % 10) << 16);
000056  210a              MOVS     r1,#0xa
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       __aeabi_uidivmod
00005e  0408              LSLS     r0,r1,#16
000060  9900              LDR      r1,[sp,#0]
000062  4308              ORRS     r0,r0,r1
000064  9000              STR      r0,[sp,#0]
;;;640        u32Reg    |= ((u32Minute / 10) << 12);
000066  210a              MOVS     r1,#0xa
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  0300              LSLS     r0,r0,#12
000070  9900              LDR      r1,[sp,#0]
000072  4308              ORRS     r0,r0,r1
000074  9000              STR      r0,[sp,#0]
;;;641        u32Reg    |= ((u32Minute % 10) <<  8);
000076  210a              MOVS     r1,#0xa
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       __aeabi_uidivmod
00007e  0208              LSLS     r0,r1,#8
000080  9900              LDR      r1,[sp,#0]
000082  4308              ORRS     r0,r0,r1
000084  9000              STR      r0,[sp,#0]
;;;642        u32Reg    |= ((u32Second / 10) <<  4);
000086  210a              MOVS     r1,#0xa
000088  4638              MOV      r0,r7
00008a  f7fffffe          BL       __aeabi_uidivmod
00008e  0100              LSLS     r0,r0,#4
000090  9900              LDR      r1,[sp,#0]
000092  4308              ORRS     r0,r0,r1
000094  9000              STR      r0,[sp,#0]
;;;643        u32Reg    |=  (u32Second % 10);
000096  210a              MOVS     r1,#0xa
000098  4638              MOV      r0,r7
00009a  f7fffffe          BL       __aeabi_uidivmod
00009e  9800              LDR      r0,[sp,#0]
0000a0  4301              ORRS     r1,r1,r0
0000a2  9100              STR      r1,[sp,#0]
;;;644    
;;;645        g_u32Reg = u32Reg;
0000a4  490b              LDR      r1,|L13.212|
0000a6  9800              LDR      r0,[sp,#0]
0000a8  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;646    
;;;647        RTC->RWEN = RTC_WRITE_KEY;
0000aa  4808              LDR      r0,|L13.204|
0000ac  4908              LDR      r1,|L13.208|
0000ae  6048              STR      r0,[r1,#4]
;;;648        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
0000b0  bf00              NOP      
                  |L13.178|
0000b2  4807              LDR      r0,|L13.208|
0000b4  6840              LDR      r0,[r0,#4]
0000b6  2101              MOVS     r1,#1
0000b8  0409              LSLS     r1,r1,#16
0000ba  4008              ANDS     r0,r0,r1
0000bc  2800              CMP      r0,#0
0000be  d0f8              BEQ      |L13.178|
;;;649    
;;;650        RTC->TALM = (uint32_t)g_u32Reg;
0000c0  4804              LDR      r0,|L13.212|
0000c2  6800              LDR      r0,[r0,#0]  ; g_u32Reg
0000c4  4902              LDR      r1,|L13.208|
0000c6  61c8              STR      r0,[r1,#0x1c]
;;;651    
;;;652    }
0000c8  bdf8              POP      {r3-r7,pc}
;;;653    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L13.204|
                          DCD      0x0000a965
                  |L13.208|
                          DCD      0x40008000
                  |L13.212|
                          DCD      g_u32Reg

                          AREA ||i.RTC_SetDate||, CODE, READONLY, ALIGN=2

                  RTC_SetDate PROC
;;;509     */
;;;510    void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek)
000000  b5f8              PUSH     {r3-r7,lr}
;;;511    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;512        __IO uint32_t u32Reg;
;;;513    
;;;514        RTC->RWEN = RTC_WRITE_KEY;
00000a  4829              LDR      r0,|L14.176|
00000c  4929              LDR      r1,|L14.180|
00000e  6048              STR      r0,[r1,#4]
;;;515        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000010  bf00              NOP      
                  |L14.18|
000012  4828              LDR      r0,|L14.180|
000014  6840              LDR      r0,[r0,#4]
000016  2101              MOVS     r1,#1
000018  0409              LSLS     r1,r1,#16
00001a  4008              ANDS     r0,r0,r1
00001c  2800              CMP      r0,#0
00001e  d0f8              BEQ      |L14.18|
;;;516    
;;;517        RTC->WEEKDAY = u32DayOfWeek & RTC_WEEKDAY_WEEKDAY_Msk;
000020  0778              LSLS     r0,r7,#29
000022  0f40              LSRS     r0,r0,#29
000024  4923              LDR      r1,|L14.180|
000026  6188              STR      r0,[r1,#0x18]
;;;518    
;;;519        u32Reg     = ((u32Year - RTC_YEAR2000) / 10) << 20;
000028  217d              MOVS     r1,#0x7d
00002a  0109              LSLS     r1,r1,#4
00002c  1a60              SUBS     r0,r4,r1
00002e  210a              MOVS     r1,#0xa
000030  f7fffffe          BL       __aeabi_uidivmod
000034  0500              LSLS     r0,r0,#20
000036  9000              STR      r0,[sp,#0]
;;;520        u32Reg    |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000038  217d              MOVS     r1,#0x7d
00003a  0109              LSLS     r1,r1,#4
00003c  1a60              SUBS     r0,r4,r1
00003e  210a              MOVS     r1,#0xa
000040  f7fffffe          BL       __aeabi_uidivmod
000044  0408              LSLS     r0,r1,#16
000046  9900              LDR      r1,[sp,#0]
000048  4308              ORRS     r0,r0,r1
00004a  9000              STR      r0,[sp,#0]
;;;521        u32Reg    |= ((u32Month  / 10) << 12);
00004c  210a              MOVS     r1,#0xa
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       __aeabi_uidivmod
000054  0300              LSLS     r0,r0,#12
000056  9900              LDR      r1,[sp,#0]
000058  4308              ORRS     r0,r0,r1
00005a  9000              STR      r0,[sp,#0]
;;;522        u32Reg    |= ((u32Month  % 10) << 8);
00005c  210a              MOVS     r1,#0xa
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       __aeabi_uidivmod
000064  0208              LSLS     r0,r1,#8
000066  9900              LDR      r1,[sp,#0]
000068  4308              ORRS     r0,r0,r1
00006a  9000              STR      r0,[sp,#0]
;;;523        u32Reg    |= ((u32Day    / 10) << 4);
00006c  210a              MOVS     r1,#0xa
00006e  4630              MOV      r0,r6
000070  f7fffffe          BL       __aeabi_uidivmod
000074  0100              LSLS     r0,r0,#4
000076  9900              LDR      r1,[sp,#0]
000078  4308              ORRS     r0,r0,r1
00007a  9000              STR      r0,[sp,#0]
;;;524        u32Reg    |=  (u32Day    % 10);
00007c  210a              MOVS     r1,#0xa
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       __aeabi_uidivmod
000084  9800              LDR      r0,[sp,#0]
000086  4301              ORRS     r1,r1,r0
000088  9100              STR      r1,[sp,#0]
;;;525        g_u32Reg   = u32Reg;
00008a  490b              LDR      r1,|L14.184|
00008c  9800              LDR      r0,[sp,#0]
00008e  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;526    
;;;527        RTC->RWEN = RTC_WRITE_KEY;
000090  4807              LDR      r0,|L14.176|
000092  4908              LDR      r1,|L14.180|
000094  6048              STR      r0,[r1,#4]
;;;528        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000096  bf00              NOP      
                  |L14.152|
000098  4806              LDR      r0,|L14.180|
00009a  6840              LDR      r0,[r0,#4]
00009c  2101              MOVS     r1,#1
00009e  0409              LSLS     r1,r1,#16
0000a0  4008              ANDS     r0,r0,r1
0000a2  2800              CMP      r0,#0
0000a4  d0f8              BEQ      |L14.152|
;;;529    
;;;530        RTC->CAL = (uint32_t)g_u32Reg;
0000a6  4804              LDR      r0,|L14.184|
0000a8  6800              LDR      r0,[r0,#0]  ; g_u32Reg
0000aa  4902              LDR      r1,|L14.180|
0000ac  6108              STR      r0,[r1,#0x10]
;;;531    
;;;532    }
0000ae  bdf8              POP      {r3-r7,pc}
;;;533    
                          ENDP

                  |L14.176|
                          DCD      0x0000a965
                  |L14.180|
                          DCD      0x40008000
                  |L14.184|
                          DCD      g_u32Reg

                          AREA ||i.RTC_SetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetDateAndTime PROC
;;;376     */
;;;377    void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b570              PUSH     {r4-r6,lr}
;;;378    {
000002  4604              MOV      r4,r0
;;;379        uint32_t u32Reg;
;;;380    
;;;381        RTC->RWEN = RTC_WRITE_KEY;
000004  4849              LDR      r0,|L15.300|
000006  494a              LDR      r1,|L15.304|
000008  6048              STR      r0,[r1,#4]
;;;382        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
00000a  bf00              NOP      
                  |L15.12|
00000c  4848              LDR      r0,|L15.304|
00000e  6840              LDR      r0,[r0,#4]
000010  2101              MOVS     r1,#1
000012  0409              LSLS     r1,r1,#16
000014  4008              ANDS     r0,r0,r1
000016  2800              CMP      r0,#0
000018  d0f8              BEQ      |L15.12|
;;;383    
;;;384        if (sPt->u32TimeScale == RTC_CLOCK_12) {
00001a  69e0              LDR      r0,[r4,#0x1c]
00001c  2800              CMP      r0,#0
00001e  d10c              BNE      |L15.58|
;;;385            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
000020  4843              LDR      r0,|L15.304|
000022  6940              LDR      r0,[r0,#0x14]
000024  0840              LSRS     r0,r0,#1
000026  0040              LSLS     r0,r0,#1
000028  4941              LDR      r1,|L15.304|
00002a  6148              STR      r0,[r1,#0x14]
;;;386    
;;;387            /*-----------------------------------------------------------------------------------------*/
;;;388            /* important, range of 12-hour PM mode is 21 up to 32                                       */
;;;389            /*-----------------------------------------------------------------------------------------*/
;;;390            if (sPt->u32AmPm == RTC_PM)
00002c  6a20              LDR      r0,[r4,#0x20]
00002e  2802              CMP      r0,#2
000030  d109              BNE      |L15.70|
;;;391                sPt->u32Hour += 20;
000032  6920              LDR      r0,[r4,#0x10]
000034  3014              ADDS     r0,r0,#0x14
000036  6120              STR      r0,[r4,#0x10]
000038  e005              B        |L15.70|
                  |L15.58|
;;;392        } else {                                                              /* RTC_CLOCK_24 */
;;;393            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
00003a  483d              LDR      r0,|L15.304|
00003c  6940              LDR      r0,[r0,#0x14]
00003e  2101              MOVS     r1,#1
000040  4308              ORRS     r0,r0,r1
000042  493b              LDR      r1,|L15.304|
000044  6148              STR      r0,[r1,#0x14]
                  |L15.70|
;;;394        }
;;;395    
;;;396        RTC->WEEKDAY = sPt->u32DayOfWeek & RTC_WEEKDAY_WEEKDAY_Msk;
000046  7b20              LDRB     r0,[r4,#0xc]
000048  0740              LSLS     r0,r0,#29
00004a  0f40              LSRS     r0,r0,#29
00004c  4938              LDR      r1,|L15.304|
00004e  6188              STR      r0,[r1,#0x18]
;;;397    
;;;398        u32Reg     = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
000050  227d              MOVS     r2,#0x7d
000052  0112              LSLS     r2,r2,#4
000054  6821              LDR      r1,[r4,#0]
000056  1a88              SUBS     r0,r1,r2
000058  210a              MOVS     r1,#0xa
00005a  f7fffffe          BL       __aeabi_uidivmod
00005e  0505              LSLS     r5,r0,#20
;;;399        u32Reg    |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
000060  227d              MOVS     r2,#0x7d
000062  0112              LSLS     r2,r2,#4
000064  6821              LDR      r1,[r4,#0]
000066  1a88              SUBS     r0,r1,r2
000068  210a              MOVS     r1,#0xa
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  0408              LSLS     r0,r1,#16
000070  4305              ORRS     r5,r5,r0
;;;400        u32Reg    |= ((sPt->u32Month  / 10) << 12);
000072  210a              MOVS     r1,#0xa
000074  6860              LDR      r0,[r4,#4]
000076  f7fffffe          BL       __aeabi_uidivmod
00007a  0300              LSLS     r0,r0,#12
00007c  4305              ORRS     r5,r5,r0
;;;401        u32Reg    |= ((sPt->u32Month  % 10) << 8);
00007e  210a              MOVS     r1,#0xa
000080  6860              LDR      r0,[r4,#4]
000082  f7fffffe          BL       __aeabi_uidivmod
000086  0208              LSLS     r0,r1,#8
000088  4305              ORRS     r5,r5,r0
;;;402        u32Reg    |= ((sPt->u32Day    / 10) << 4);
00008a  210a              MOVS     r1,#0xa
00008c  68a0              LDR      r0,[r4,#8]
00008e  f7fffffe          BL       __aeabi_uidivmod
000092  0100              LSLS     r0,r0,#4
000094  4305              ORRS     r5,r5,r0
;;;403        u32Reg    |=  (sPt->u32Day    % 10);
000096  210a              MOVS     r1,#0xa
000098  68a0              LDR      r0,[r4,#8]
00009a  f7fffffe          BL       __aeabi_uidivmod
00009e  430d              ORRS     r5,r5,r1
;;;404        g_u32Reg = u32Reg;
0000a0  4824              LDR      r0,|L15.308|
0000a2  6005              STR      r5,[r0,#0]  ; g_u32Reg
;;;405    
;;;406        RTC->RWEN = RTC_WRITE_KEY;
0000a4  4821              LDR      r0,|L15.300|
0000a6  4922              LDR      r1,|L15.304|
0000a8  6048              STR      r0,[r1,#4]
;;;407        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
0000aa  bf00              NOP      
                  |L15.172|
0000ac  4820              LDR      r0,|L15.304|
0000ae  6840              LDR      r0,[r0,#4]
0000b0  2101              MOVS     r1,#1
0000b2  0409              LSLS     r1,r1,#16
0000b4  4008              ANDS     r0,r0,r1
0000b6  2800              CMP      r0,#0
0000b8  d0f8              BEQ      |L15.172|
;;;408    
;;;409        RTC->CAL = (uint32_t)g_u32Reg;
0000ba  481e              LDR      r0,|L15.308|
0000bc  6800              LDR      r0,[r0,#0]  ; g_u32Reg
0000be  491c              LDR      r1,|L15.304|
0000c0  6108              STR      r0,[r1,#0x10]
;;;410    
;;;411        u32Reg     = ((sPt->u32Hour   / 10) << 20);
0000c2  210a              MOVS     r1,#0xa
0000c4  6920              LDR      r0,[r4,#0x10]
0000c6  f7fffffe          BL       __aeabi_uidivmod
0000ca  0505              LSLS     r5,r0,#20
;;;412        u32Reg    |= ((sPt->u32Hour   % 10) << 16);
0000cc  210a              MOVS     r1,#0xa
0000ce  6920              LDR      r0,[r4,#0x10]
0000d0  f7fffffe          BL       __aeabi_uidivmod
0000d4  0408              LSLS     r0,r1,#16
0000d6  4305              ORRS     r5,r5,r0
;;;413        u32Reg    |= ((sPt->u32Minute / 10) << 12);
0000d8  210a              MOVS     r1,#0xa
0000da  6960              LDR      r0,[r4,#0x14]
0000dc  f7fffffe          BL       __aeabi_uidivmod
0000e0  0300              LSLS     r0,r0,#12
0000e2  4305              ORRS     r5,r5,r0
;;;414        u32Reg    |= ((sPt->u32Minute % 10) << 8);
0000e4  210a              MOVS     r1,#0xa
0000e6  6960              LDR      r0,[r4,#0x14]
0000e8  f7fffffe          BL       __aeabi_uidivmod
0000ec  0208              LSLS     r0,r1,#8
0000ee  4305              ORRS     r5,r5,r0
;;;415        u32Reg    |= ((sPt->u32Second / 10) << 4);
0000f0  210a              MOVS     r1,#0xa
0000f2  69a0              LDR      r0,[r4,#0x18]
0000f4  f7fffffe          BL       __aeabi_uidivmod
0000f8  0100              LSLS     r0,r0,#4
0000fa  4305              ORRS     r5,r5,r0
;;;416        u32Reg    |=  (sPt->u32Second % 10);
0000fc  210a              MOVS     r1,#0xa
0000fe  69a0              LDR      r0,[r4,#0x18]
000100  f7fffffe          BL       __aeabi_uidivmod
000104  430d              ORRS     r5,r5,r1
;;;417        g_u32Reg = u32Reg;
000106  480b              LDR      r0,|L15.308|
000108  6005              STR      r5,[r0,#0]  ; g_u32Reg
;;;418    
;;;419        RTC->RWEN = RTC_WRITE_KEY;
00010a  4808              LDR      r0,|L15.300|
00010c  4908              LDR      r1,|L15.304|
00010e  6048              STR      r0,[r1,#4]
;;;420        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000110  bf00              NOP      
                  |L15.274|
000112  4807              LDR      r0,|L15.304|
000114  6840              LDR      r0,[r0,#4]
000116  2101              MOVS     r1,#1
000118  0409              LSLS     r1,r1,#16
00011a  4008              ANDS     r0,r0,r1
00011c  2800              CMP      r0,#0
00011e  d0f8              BEQ      |L15.274|
;;;421    
;;;422        RTC->TIME = (uint32_t)g_u32Reg;
000120  4804              LDR      r0,|L15.308|
000122  6800              LDR      r0,[r0,#0]  ; g_u32Reg
000124  4902              LDR      r1,|L15.304|
000126  60c8              STR      r0,[r1,#0xc]
;;;423    
;;;424    }
000128  bd70              POP      {r4-r6,pc}
;;;425    
                          ENDP

00012a  0000              DCW      0x0000
                  |L15.300|
                          DCD      0x0000a965
                  |L15.304|
                          DCD      0x40008000
                  |L15.308|
                          DCD      g_u32Reg

                          AREA ||i.RTC_SetTickPeriod||, CODE, READONLY, ALIGN=2

                  RTC_SetTickPeriod PROC
;;;678     */
;;;679    void RTC_SetTickPeriod(uint32_t u32TickSelection)
000000  4909              LDR      r1,|L16.40|
;;;680    {
;;;681        RTC->RWEN = RTC_WRITE_KEY;
000002  4a0a              LDR      r2,|L16.44|
000004  6051              STR      r1,[r2,#4]
;;;682        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000006  bf00              NOP      
                  |L16.8|
000008  4908              LDR      r1,|L16.44|
00000a  6849              LDR      r1,[r1,#4]
00000c  2201              MOVS     r2,#1
00000e  0412              LSLS     r2,r2,#16
000010  4011              ANDS     r1,r1,r2
000012  2900              CMP      r1,#0
000014  d0f8              BEQ      |L16.8|
;;;683    
;;;684        RTC->TICK = RTC->TICK & ~RTC_TICK_TICKSEL_Msk | u32TickSelection;
000016  4905              LDR      r1,|L16.44|
000018  6b09              LDR      r1,[r1,#0x30]
00001a  08c9              LSRS     r1,r1,#3
00001c  00c9              LSLS     r1,r1,#3
00001e  4301              ORRS     r1,r1,r0
000020  4a02              LDR      r2,|L16.44|
000022  6311              STR      r1,[r2,#0x30]
;;;685    }
000024  4770              BX       lr
;;;686    
                          ENDP

000026  0000              DCW      0x0000
                  |L16.40|
                          DCD      0x0000a965
                  |L16.44|
                          DCD      0x40008000

                          AREA ||i.RTC_SetTime||, CODE, READONLY, ALIGN=2

                  RTC_SetTime PROC
;;;545     */
;;;546    void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;547    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461c              MOV      r4,r3
;;;548        __IO uint32_t u32Reg;
;;;549    
;;;550        RTC->RWEN = RTC_WRITE_KEY;
00000a  4830              LDR      r0,|L17.204|
00000c  4930              LDR      r1,|L17.208|
00000e  6048              STR      r0,[r1,#4]
;;;551        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000010  bf00              NOP      
                  |L17.18|
000012  482f              LDR      r0,|L17.208|
000014  6840              LDR      r0,[r0,#4]
000016  2101              MOVS     r1,#1
000018  0409              LSLS     r1,r1,#16
00001a  4008              ANDS     r0,r0,r1
00001c  2800              CMP      r0,#0
00001e  d0f8              BEQ      |L17.18|
;;;552    
;;;553        if (u32TimeMode == RTC_CLOCK_12) {
000020  2c00              CMP      r4,#0
000022  d10a              BNE      |L17.58|
;;;554            RTC->CLKFMT &= ~RTC_CLKFMT_24HEN_Msk;
000024  482a              LDR      r0,|L17.208|
000026  6940              LDR      r0,[r0,#0x14]
000028  0840              LSRS     r0,r0,#1
00002a  0040              LSLS     r0,r0,#1
00002c  4928              LDR      r1,|L17.208|
00002e  6148              STR      r0,[r1,#0x14]
;;;555    
;;;556            if (u32AmPm == RTC_PM)    /* important, range of 12-hour PM mode is 21 up to 32 */
000030  9806              LDR      r0,[sp,#0x18]
000032  2802              CMP      r0,#2
000034  d109              BNE      |L17.74|
;;;557                u32Hour += 20;
000036  3514              ADDS     r5,r5,#0x14
000038  e007              B        |L17.74|
                  |L17.58|
;;;558        } else if(u32TimeMode == RTC_CLOCK_24) {
00003a  2c01              CMP      r4,#1
00003c  d105              BNE      |L17.74|
;;;559            RTC->CLKFMT |= RTC_CLKFMT_24HEN_Msk;
00003e  4824              LDR      r0,|L17.208|
000040  6940              LDR      r0,[r0,#0x14]
000042  2101              MOVS     r1,#1
000044  4308              ORRS     r0,r0,r1
000046  4922              LDR      r1,|L17.208|
000048  6148              STR      r0,[r1,#0x14]
                  |L17.74|
;;;560        }
;;;561    
;;;562        u32Reg     = ((u32Hour   / 10) << 20);
00004a  210a              MOVS     r1,#0xa
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       __aeabi_uidivmod
000052  0500              LSLS     r0,r0,#20
000054  9000              STR      r0,[sp,#0]
;;;563        u32Reg    |= ((u32Hour   % 10) << 16);
000056  210a              MOVS     r1,#0xa
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       __aeabi_uidivmod
00005e  0408              LSLS     r0,r1,#16
000060  9900              LDR      r1,[sp,#0]
000062  4308              ORRS     r0,r0,r1
000064  9000              STR      r0,[sp,#0]
;;;564        u32Reg    |= ((u32Minute / 10) << 12);
000066  210a              MOVS     r1,#0xa
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  0300              LSLS     r0,r0,#12
000070  9900              LDR      r1,[sp,#0]
000072  4308              ORRS     r0,r0,r1
000074  9000              STR      r0,[sp,#0]
;;;565        u32Reg    |= ((u32Minute % 10) << 8);
000076  210a              MOVS     r1,#0xa
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       __aeabi_uidivmod
00007e  0208              LSLS     r0,r1,#8
000080  9900              LDR      r1,[sp,#0]
000082  4308              ORRS     r0,r0,r1
000084  9000              STR      r0,[sp,#0]
;;;566        u32Reg    |= ((u32Second / 10) << 4);
000086  210a              MOVS     r1,#0xa
000088  4638              MOV      r0,r7
00008a  f7fffffe          BL       __aeabi_uidivmod
00008e  0100              LSLS     r0,r0,#4
000090  9900              LDR      r1,[sp,#0]
000092  4308              ORRS     r0,r0,r1
000094  9000              STR      r0,[sp,#0]
;;;567        u32Reg    |=  (u32Second % 10);
000096  210a              MOVS     r1,#0xa
000098  4638              MOV      r0,r7
00009a  f7fffffe          BL       __aeabi_uidivmod
00009e  9800              LDR      r0,[sp,#0]
0000a0  4301              ORRS     r1,r1,r0
0000a2  9100              STR      r1,[sp,#0]
;;;568    
;;;569        g_u32Reg = u32Reg;
0000a4  490b              LDR      r1,|L17.212|
0000a6  9800              LDR      r0,[sp,#0]
0000a8  6008              STR      r0,[r1,#0]  ; g_u32Reg
;;;570    
;;;571        RTC->RWEN = RTC_WRITE_KEY;
0000aa  4808              LDR      r0,|L17.204|
0000ac  4908              LDR      r1,|L17.208|
0000ae  6048              STR      r0,[r1,#4]
;;;572        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
0000b0  bf00              NOP      
                  |L17.178|
0000b2  4807              LDR      r0,|L17.208|
0000b4  6840              LDR      r0,[r0,#4]
0000b6  2101              MOVS     r1,#1
0000b8  0409              LSLS     r1,r1,#16
0000ba  4008              ANDS     r0,r0,r1
0000bc  2800              CMP      r0,#0
0000be  d0f8              BEQ      |L17.178|
;;;573    
;;;574        RTC->TIME = (uint32_t)g_u32Reg;
0000c0  4804              LDR      r0,|L17.212|
0000c2  6800              LDR      r0,[r0,#0]  ; g_u32Reg
0000c4  4902              LDR      r1,|L17.208|
0000c6  60c8              STR      r0,[r1,#0xc]
;;;575    
;;;576    }
0000c8  bdf8              POP      {r3-r7,pc}
;;;577    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L17.204|
                          DCD      0x0000a965
                  |L17.208|
                          DCD      0x40008000
                  |L17.212|
                          DCD      g_u32Reg

                          AREA ||.data||, DATA, ALIGN=2

                  g_u32Reg
                          DCD      0x00000000
                  g_u32Reg1
                          DCD      0x00000000
                  g_u32hiYear
                          DCD      0x00000000
                  g_u32loYear
                          DCD      0x00000000
                  g_u32hiMonth
                          DCD      0x00000000
                  g_u32loMonth
                          DCD      0x00000000
                  g_u32hiDay
                          DCD      0x00000000
                  g_u32loDay
                          DCD      0x00000000
                  g_u32hiHour
                          DCD      0x00000000
                  g_u32loHour
                          DCD      0x00000000
                  g_u32hiMin
                          DCD      0x00000000
                  g_u32loMin
                          DCD      0x00000000
                  g_u32hiSec
                          DCD      0x00000000
                  g_u32loSec
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_f2e3968a____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_rtc_c_f2e3968a____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_f2e3968a____REVSH|
#line 132
|__asm___5_rtc_c_f2e3968a____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
