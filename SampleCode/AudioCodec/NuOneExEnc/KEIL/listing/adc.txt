; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\adc.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\adc.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\adc.crf ..\..\..\..\Library\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  ADC_ClearIntFlag PROC
;;;185      */
;;;186    void ADC_ClearIntFlag(uint32_t u32Mask)
000000  2102              MOVS     r1,#2
;;;187    {
;;;188    	if (u32Mask&ADC_CMP0_INT)
000002  4001              ANDS     r1,r1,r0
000004  2900              CMP      r1,#0
000006  d005              BEQ      |L1.20|
;;;189    		ADC->CMP0 |= ADC_CMP0_CMPFLAG_Msk;
000008  490d              LDR      r1,|L1.64|
00000a  6989              LDR      r1,[r1,#0x18]
00000c  2280              MOVS     r2,#0x80
00000e  4311              ORRS     r1,r1,r2
000010  4a0b              LDR      r2,|L1.64|
000012  6191              STR      r1,[r2,#0x18]
                  |L1.20|
;;;190    	
;;;191    	if (u32Mask&ADC_CMP1_INT)
000014  2104              MOVS     r1,#4
000016  4001              ANDS     r1,r1,r0
000018  2900              CMP      r1,#0
00001a  d005              BEQ      |L1.40|
;;;192    		ADC->CMP1 |= ADC_CMP1_CMPFLAG_Msk;
00001c  4908              LDR      r1,|L1.64|
00001e  69c9              LDR      r1,[r1,#0x1c]
000020  2280              MOVS     r2,#0x80
000022  4311              ORRS     r1,r1,r2
000024  4a06              LDR      r2,|L1.64|
000026  61d1              STR      r1,[r2,#0x1c]
                  |L1.40|
;;;193    	
;;;194    	if (u32Mask&ADC_ALC_INT)
000028  2108              MOVS     r1,#8
00002a  4001              ANDS     r1,r1,r0
00002c  2900              CMP      r1,#0
00002e  d005              BEQ      |L1.60|
;;;195    		ALC->INTSTS |= (ALC_INTSTS_INTFLAG_Msk);
000030  4904              LDR      r1,|L1.68|
000032  6909              LDR      r1,[r1,#0x10]
000034  2201              MOVS     r2,#1
000036  4311              ORRS     r1,r1,r2
000038  4a02              LDR      r2,|L1.68|
00003a  6111              STR      r1,[r2,#0x10]
                  |L1.60|
;;;196    }
00003c  4770              BX       lr
;;;197    
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      0x400e0000
                  |L1.68|
                          DCD      0x400b0040

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;40       */
;;;41     void ADC_Close(void)
000000  4770              BX       lr
;;;42     {   
;;;43           
;;;44     }
;;;45     
                          ENDP


                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=2

                  ADC_DisableInt PROC
;;;139      */
;;;140    void ADC_DisableInt(uint32_t u32Mask)
000000  07c1              LSLS     r1,r0,#31
;;;141    {
;;;142    	if (u32Mask&ADC_FIFO_INT)
000002  0fc9              LSRS     r1,r1,#31
000004  2900              CMP      r1,#0
000006  d005              BEQ      |L3.20|
;;;143    		ADC->INTCTL &= (~ADC_INTCTL_INTEN_Msk);
000008  4912              LDR      r1,|L3.84|
00000a  6909              LDR      r1,[r1,#0x10]
00000c  0049              LSLS     r1,r1,#1
00000e  0849              LSRS     r1,r1,#1
000010  4a10              LDR      r2,|L3.84|
000012  6111              STR      r1,[r2,#0x10]
                  |L3.20|
;;;144    		
;;;145    	if (u32Mask&ADC_CMP0_INT)
000014  2102              MOVS     r1,#2
000016  4001              ANDS     r1,r1,r0
000018  2900              CMP      r1,#0
00001a  d005              BEQ      |L3.40|
;;;146    		ADC->CMP0 &= (~ADC_CMP0_ADCMPIE_Msk);
00001c  490d              LDR      r1,|L3.84|
00001e  6989              LDR      r1,[r1,#0x18]
000020  2202              MOVS     r2,#2
000022  4391              BICS     r1,r1,r2
000024  4a0b              LDR      r2,|L3.84|
000026  6191              STR      r1,[r2,#0x18]
                  |L3.40|
;;;147    	
;;;148    	if (u32Mask&ADC_CMP1_INT)
000028  2104              MOVS     r1,#4
00002a  4001              ANDS     r1,r1,r0
00002c  2900              CMP      r1,#0
00002e  d005              BEQ      |L3.60|
;;;149    		ADC->CMP1 &= (~ADC_CMP1_ADCMPIE_Msk);
000030  4908              LDR      r1,|L3.84|
000032  69c9              LDR      r1,[r1,#0x1c]
000034  2202              MOVS     r2,#2
000036  4391              BICS     r1,r1,r2
000038  4a06              LDR      r2,|L3.84|
00003a  61d1              STR      r1,[r2,#0x1c]
                  |L3.60|
;;;150    		
;;;151    	if (u32Mask&ADC_ALC_INT)
00003c  2108              MOVS     r1,#8
00003e  4001              ANDS     r1,r1,r0
000040  2900              CMP      r1,#0
000042  d005              BEQ      |L3.80|
;;;152    		ALC->INTCTL &= (~ALC_INTCTL_INTEN_Msk);
000044  4904              LDR      r1,|L3.88|
000046  6949              LDR      r1,[r1,#0x14]
000048  0849              LSRS     r1,r1,#1
00004a  0049              LSLS     r1,r1,#1
00004c  4a02              LDR      r2,|L3.88|
00004e  6151              STR      r1,[r2,#0x14]
                  |L3.80|
;;;153    }
000050  4770              BX       lr
;;;154    
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      0x400e0000
                  |L3.88|
                          DCD      0x400b0040

                          AREA ||i.ADC_DisableMICBias||, CODE, READONLY, ALIGN=2

                  ADC_DisableMICBias PROC
;;;297      */
;;;298    void ADC_DisableMICBias(void)  
000000  2000              MOVS     r0,#0
;;;299    {
;;;300    	ANA->MICBSEL = 0x0;
000002  4902              LDR      r1,|L4.12|
000004  6288              STR      r0,[r1,#0x28]
;;;301    	ANA->MICBEN = 0x0;
000006  62c8              STR      r0,[r1,#0x2c]
;;;302    }
000008  4770              BX       lr
;;;303    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x40080000

                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=2

                  ADC_EnableInt PROC
;;;93       */
;;;94     void ADC_EnableInt(uint32_t u32Mask)
000000  07c1              LSLS     r1,r0,#31
;;;95     {
;;;96     	if (u32Mask&ADC_FIFO_INT)
000002  0fc9              LSRS     r1,r1,#31
000004  2900              CMP      r1,#0
000006  d008              BEQ      |L5.26|
;;;97     	{
;;;98     		/* ADC FIFO interrupt and PDMA don't coexist */
;;;99     		ADC->PDMACTL = 0;
000008  2100              MOVS     r1,#0
00000a  4a1c              LDR      r2,|L5.124|
00000c  6151              STR      r1,[r2,#0x14]
;;;100    		ADC->INTCTL |= ADC_INTCTL_INTEN_Msk;
00000e  4611              MOV      r1,r2
000010  6909              LDR      r1,[r1,#0x10]
000012  0392              LSLS     r2,r2,#14
000014  4311              ORRS     r1,r1,r2
000016  4a19              LDR      r2,|L5.124|
000018  6111              STR      r1,[r2,#0x10]
                  |L5.26|
;;;101    	}
;;;102    	
;;;103    	if (u32Mask&ADC_CMP0_INT)
00001a  2102              MOVS     r1,#2
00001c  4001              ANDS     r1,r1,r0
00001e  2900              CMP      r1,#0
000020  d00b              BEQ      |L5.58|
;;;104    	{
;;;105    		/* clear the CMP interrupt flags for safe */
;;;106    		ADC->CMP0 |= (ADC_CMP0_CMPFLAG_Msk);
000022  4916              LDR      r1,|L5.124|
000024  6989              LDR      r1,[r1,#0x18]
000026  2280              MOVS     r2,#0x80
000028  4311              ORRS     r1,r1,r2
00002a  4a14              LDR      r2,|L5.124|
00002c  6191              STR      r1,[r2,#0x18]
;;;107    		ADC->CMP0 |= (ADC_CMP0_ADCMPIE_Msk);
00002e  4611              MOV      r1,r2
000030  6989              LDR      r1,[r1,#0x18]
000032  2202              MOVS     r2,#2
000034  4311              ORRS     r1,r1,r2
000036  4a11              LDR      r2,|L5.124|
000038  6191              STR      r1,[r2,#0x18]
                  |L5.58|
;;;108    	}
;;;109    	
;;;110    	if (u32Mask&ADC_CMP1_INT)
00003a  2104              MOVS     r1,#4
00003c  4001              ANDS     r1,r1,r0
00003e  2900              CMP      r1,#0
000040  d00b              BEQ      |L5.90|
;;;111    	{
;;;112    		/* clear the CMP interrupt flags for safe */
;;;113    		ADC->CMP1 |= (ADC_CMP1_CMPFLAG_Msk);
000042  490e              LDR      r1,|L5.124|
000044  69c9              LDR      r1,[r1,#0x1c]
000046  2280              MOVS     r2,#0x80
000048  4311              ORRS     r1,r1,r2
00004a  4a0c              LDR      r2,|L5.124|
00004c  61d1              STR      r1,[r2,#0x1c]
;;;114    		ADC->CMP1 |= (ADC_CMP1_ADCMPIE_Msk);
00004e  4611              MOV      r1,r2
000050  69c9              LDR      r1,[r1,#0x1c]
000052  2202              MOVS     r2,#2
000054  4311              ORRS     r1,r1,r2
000056  4a09              LDR      r2,|L5.124|
000058  61d1              STR      r1,[r2,#0x1c]
                  |L5.90|
;;;115    	}
;;;116    	
;;;117    	if (u32Mask&ADC_ALC_INT)
00005a  2108              MOVS     r1,#8
00005c  4001              ANDS     r1,r1,r0
00005e  2900              CMP      r1,#0
000060  d00b              BEQ      |L5.122|
;;;118    	{
;;;119    		/* clear the ALC interrupt flags for safe */
;;;120    		ALC->INTSTS |= (ALC_INTSTS_INTFLAG_Msk);
000062  4907              LDR      r1,|L5.128|
000064  6909              LDR      r1,[r1,#0x10]
000066  2201              MOVS     r2,#1
000068  4311              ORRS     r1,r1,r2
00006a  4a05              LDR      r2,|L5.128|
00006c  6111              STR      r1,[r2,#0x10]
;;;121    		ALC->INTCTL |= (ALC_INTCTL_INTEN_Msk);
00006e  4611              MOV      r1,r2
000070  6949              LDR      r1,[r1,#0x14]
000072  2201              MOVS     r2,#1
000074  4311              ORRS     r1,r1,r2
000076  4a02              LDR      r2,|L5.128|
000078  6151              STR      r1,[r2,#0x14]
                  |L5.122|
;;;122    	}
;;;123    }
00007a  4770              BX       lr
;;;124    
                          ENDP

                  |L5.124|
                          DCD      0x400e0000
                  |L5.128|
                          DCD      0x400b0040

                          AREA ||i.ADC_EnableMICBias||, CODE, READONLY, ALIGN=2

                  ADC_EnableMICBias PROC
;;;287      */
;;;288    void ADC_EnableMICBias(uint32_t u32BiasSel)  
000000  4903              LDR      r1,|L6.16|
;;;289    {
;;;290    	ANA->MICBSEL = (ANA->MICBSEL&0x0)|u32BiasSel;
000002  6a89              LDR      r1,[r1,#0x28]
000004  4a02              LDR      r2,|L6.16|
000006  6290              STR      r0,[r2,#0x28]
;;;291    	ANA->MICBEN = ANA_MICBEN_MICBEN_Msk;
000008  2101              MOVS     r1,#1
00000a  62d1              STR      r1,[r2,#0x2c]
;;;292    } 
00000c  4770              BX       lr
;;;293    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40080000

                          AREA ||i.ADC_GetIntFlag||, CODE, READONLY, ALIGN=2

                  ADC_GetIntFlag PROC
;;;162      */
;;;163    uint32_t ADC_GetIntFlag(uint32_t u32Mask)
000000  4601              MOV      r1,r0
;;;164    {
;;;165    	if (u32Mask&ADC_CMP0_INT)
000002  2002              MOVS     r0,#2
000004  4008              ANDS     r0,r0,r1
000006  2800              CMP      r0,#0
000008  d004              BEQ      |L7.20|
;;;166    		return ADC->CMP0&ADC_CMP0_CMPFLAG_Msk;
00000a  480c              LDR      r0,|L7.60|
00000c  6980              LDR      r0,[r0,#0x18]
00000e  2280              MOVS     r2,#0x80
000010  4010              ANDS     r0,r0,r2
                  |L7.18|
;;;167    	
;;;168    	if (u32Mask&ADC_CMP1_INT)
;;;169    		return ADC->CMP1&ADC_CMP1_CMPFLAG_Msk;
;;;170    	
;;;171    	if (u32Mask&ADC_ALC_INT)
;;;172    		return ALC->INTSTS&0x1;
;;;173    	
;;;174    	return 0;
;;;175    }
000012  4770              BX       lr
                  |L7.20|
000014  2004              MOVS     r0,#4                 ;168
000016  4008              ANDS     r0,r0,r1              ;168
000018  2800              CMP      r0,#0                 ;168
00001a  d004              BEQ      |L7.38|
00001c  4807              LDR      r0,|L7.60|
00001e  69c0              LDR      r0,[r0,#0x1c]         ;169
000020  2280              MOVS     r2,#0x80              ;169
000022  4010              ANDS     r0,r0,r2              ;169
000024  e7f5              B        |L7.18|
                  |L7.38|
000026  2008              MOVS     r0,#8                 ;171
000028  4008              ANDS     r0,r0,r1              ;171
00002a  2800              CMP      r0,#0                 ;171
00002c  d004              BEQ      |L7.56|
00002e  4804              LDR      r0,|L7.64|
000030  6900              LDR      r0,[r0,#0x10]         ;172
000032  07c0              LSLS     r0,r0,#31             ;172
000034  0fc0              LSRS     r0,r0,#31             ;172
000036  e7ec              B        |L7.18|
                  |L7.56|
000038  2000              MOVS     r0,#0                 ;174
00003a  e7ea              B        |L7.18|
;;;176    
                          ENDP

                  |L7.60|
                          DCD      0x400e0000
                  |L7.64|
                          DCD      0x400b0040

                          AREA ||i.ADC_GetPGAGaindB||, CODE, READONLY, ALIGN=2

                  ADC_GetPGAGaindB PROC
;;;426      */
;;;427    int32_t ADC_GetPGAGaindB(void)
000000  4804              LDR      r0,|L8.20|
;;;428    {
;;;429    	int32_t i32Gain;
;;;430    	
;;;431    	i32Gain = ANA->PGAGAIN;
000002  6a81              LDR      r1,[r0,#0x28]
;;;432    	i32Gain >>= (ANA_PGAGAIN_GAINREAD_Pos);
000004  1209              ASRS     r1,r1,#8
;;;433    	return (i32Gain*75-1200);
000006  204b              MOVS     r0,#0x4b
000008  4348              MULS     r0,r1,r0
00000a  224b              MOVS     r2,#0x4b
00000c  0112              LSLS     r2,r2,#4
00000e  1a80              SUBS     r0,r0,r2
;;;434    }
000010  4770              BX       lr
;;;435    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40080040

                          AREA ||i.ADC_GetSampleRate||, CODE, READONLY, ALIGN=2

                  ADC_GetSampleRate PROC
;;;52       */
;;;53     uint32_t ADC_GetSampleRate(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;54     {
;;;55         uint32_t u32OSR, u32ADCClk, u32Div;
;;;56     
;;;57         switch(ADC->DCICTL)
000002  4815              LDR      r0,|L9.88|
000004  68c0              LDR      r0,[r0,#0xc]
000006  2800              CMP      r0,#0
000008  d006              BEQ      |L9.24|
00000a  2801              CMP      r0,#1
00000c  d006              BEQ      |L9.28|
00000e  2802              CMP      r0,#2
000010  d006              BEQ      |L9.32|
000012  2803              CMP      r0,#3
000014  d109              BNE      |L9.42|
000016  e005              B        |L9.36|
                  |L9.24|
;;;58         {
;;;59             case ADC_OSR_RATION_64:
;;;60                 u32OSR=64;
000018  2440              MOVS     r4,#0x40
;;;61                 break;
00001a  e008              B        |L9.46|
                  |L9.28|
;;;62             case ADC_OSR_RATION_128:
;;;63                 u32OSR=128;
00001c  2480              MOVS     r4,#0x80
;;;64                 break;
00001e  e006              B        |L9.46|
                  |L9.32|
;;;65             case ADC_OSR_RATION_192:
;;;66                 u32OSR=192;
000020  24c0              MOVS     r4,#0xc0
;;;67                 break;
000022  e004              B        |L9.46|
                  |L9.36|
;;;68             case ADC_OSR_RATION_384:
;;;69                 u32OSR=384;
000024  24ff              MOVS     r4,#0xff
000026  3481              ADDS     r4,r4,#0x81
;;;70                 break;
000028  e001              B        |L9.46|
                  |L9.42|
;;;71             default:
;;;72                 u32OSR=64;
00002a  2440              MOVS     r4,#0x40
00002c  bf00              NOP                            ;57
                  |L9.46|
00002e  bf00              NOP                            ;61
;;;73         }
;;;74         u32Div = (CLK->CLKDIV0&0xff00) >> CLK_CLKDIV0_ADCDIV_Pos;
000030  480a              LDR      r0,|L9.92|
000032  6980              LDR      r0,[r0,#0x18]
000034  2600              MOVS     r6,#0
;;;75     	u32ADCClk = CLK_GetHCLKFreq()/(u32Div+1);
000036  f7fffffe          BL       CLK_GetHCLKFreq
00003a  4607              MOV      r7,r0
00003c  1c71              ADDS     r1,r6,#1
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  4605              MOV      r5,r0
;;;76         return (u32ADCClk/(ADC->CLKDIV)/u32OSR);
000044  4804              LDR      r0,|L9.88|
000046  6881              LDR      r1,[r0,#8]
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       __aeabi_uidivmod
00004e  4607              MOV      r7,r0
000050  4621              MOV      r1,r4
000052  f7fffffe          BL       __aeabi_uidivmod
;;;77     }
000056  bdf8              POP      {r3-r7,pc}
;;;78     
                          ENDP

                  |L9.88|
                          DCD      0x400e0000
                  |L9.92|
                          DCD      0x50000200

                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=1

                  ADC_Open PROC
;;;30       */
;;;31     void ADC_Open(void)
000000  4770              BX       lr
;;;32     {
;;;33     
;;;34     }
;;;35     
                          ENDP


                          AREA ||i.ADC_SetALCMaxGaindB||, CODE, READONLY, ALIGN=2

                  ADC_SetALCMaxGaindB PROC
;;;345      */
;;;346    int32_t ADC_SetALCMaxGaindB(int32_t i32MaxGaindB)
000000  b510              PUSH     {r4,lr}
;;;347    {
000002  4604              MOV      r4,r0
;;;348    	if(i32MaxGaindB < -675)
000004  4810              LDR      r0,|L11.72|
000006  4284              CMP      r4,r0
000008  da01              BGE      |L11.14|
;;;349    		i32MaxGaindB = -675;
00000a  4604              MOV      r4,r0
00000c  e003              B        |L11.22|
                  |L11.14|
;;;350    	else if(i32MaxGaindB > 3525)
00000e  480f              LDR      r0,|L11.76|
000010  4284              CMP      r4,r0
000012  dd00              BLE      |L11.22|
;;;351    		i32MaxGaindB = 3525;
000014  4604              MOV      r4,r0
                  |L11.22|
;;;352    	
;;;353    	i32MaxGaindB = ((i32MaxGaindB + 675) / 600);
000016  214b              MOVS     r1,#0x4b
000018  00c9              LSLS     r1,r1,#3
00001a  480b              LDR      r0,|L11.72|
00001c  4240              RSBS     r0,r0,#0
00001e  1820              ADDS     r0,r4,r0
000020  f7fffffe          BL       __aeabi_idivmod
000024  4604              MOV      r4,r0
;;;354    	ALC->CTL = (ALC->CTL&~ALC_CTL_MAXGAIN_Msk)|(i32MaxGaindB << ALC_CTL_MAXGAIN_Pos);
000026  480a              LDR      r0,|L11.80|
000028  6880              LDR      r0,[r0,#8]
00002a  2107              MOVS     r1,#7
00002c  0649              LSLS     r1,r1,#25
00002e  4388              BICS     r0,r0,r1
000030  0661              LSLS     r1,r4,#25
000032  4308              ORRS     r0,r0,r1
000034  4906              LDR      r1,|L11.80|
000036  6088              STR      r0,[r1,#8]
;;;355    	
;;;356    	return (i32MaxGaindB*600-675);
000038  204b              MOVS     r0,#0x4b
00003a  00c0              LSLS     r0,r0,#3
00003c  4360              MULS     r0,r4,r0
00003e  4902              LDR      r1,|L11.72|
000040  4249              RSBS     r1,r1,#0
000042  1a40              SUBS     r0,r0,r1
;;;357    }
000044  bd10              POP      {r4,pc}
;;;358    
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
                          DCD      0xfffffd5d
                  |L11.76|
                          DCD      0x00000dc5
                  |L11.80|
                          DCD      0x400b0040

                          AREA ||i.ADC_SetALCMinGaindB||, CODE, READONLY, ALIGN=2

                  ADC_SetALCMinGaindB PROC
;;;373      */
;;;374    int32_t ADC_SetALCMinGaindB(int32_t i32MinGaindB)
000000  b510              PUSH     {r4,lr}
;;;375    {
000002  4604              MOV      r4,r0
;;;376    	if(i32MinGaindB < -1200)
000004  480f              LDR      r0,|L12.68|
000006  4284              CMP      r4,r0
000008  da01              BGE      |L12.14|
;;;377    		i32MinGaindB = -1200;
00000a  4604              MOV      r4,r0
00000c  e003              B        |L12.22|
                  |L12.14|
;;;378    	else if(i32MinGaindB > 3000)
00000e  480e              LDR      r0,|L12.72|
000010  4284              CMP      r4,r0
000012  dd00              BLE      |L12.22|
;;;379    		i32MinGaindB = 3000;
000014  4604              MOV      r4,r0
                  |L12.22|
;;;380    	
;;;381    	i32MinGaindB = ((i32MinGaindB + 1200) / 600);
000016  214b              MOVS     r1,#0x4b
000018  00c9              LSLS     r1,r1,#3
00001a  0048              LSLS     r0,r1,#1
00001c  1820              ADDS     r0,r4,r0
00001e  f7fffffe          BL       __aeabi_idivmod
000022  4604              MOV      r4,r0
;;;382    	ALC->CTL = (ALC->CTL&~ALC_CTL_MINGAIN_Msk)|(i32MinGaindB << ALC_CTL_MINGAIN_Pos);
000024  4809              LDR      r0,|L12.76|
000026  6880              LDR      r0,[r0,#8]
000028  2107              MOVS     r1,#7
00002a  0589              LSLS     r1,r1,#22
00002c  4388              BICS     r0,r0,r1
00002e  05a1              LSLS     r1,r4,#22
000030  4308              ORRS     r0,r0,r1
000032  4906              LDR      r1,|L12.76|
000034  6088              STR      r0,[r1,#8]
;;;383    	
;;;384    	return (i32MinGaindB*600-1200);
000036  204b              MOVS     r0,#0x4b
000038  00c0              LSLS     r0,r0,#3
00003a  4360              MULS     r0,r4,r0
00003c  214b              MOVS     r1,#0x4b
00003e  0109              LSLS     r1,r1,#4
000040  1a40              SUBS     r0,r0,r1
;;;385    }
000042  bd10              POP      {r4,pc}
;;;386    
                          ENDP

                  |L12.68|
                          DCD      0xfffffb50
                  |L12.72|
                          DCD      0x00000bb8
                  |L12.76|
                          DCD      0x400b0040

                          AREA ||i.ADC_SetALCTargetLevel||, CODE, READONLY, ALIGN=2

                  ADC_SetALCTargetLevel PROC
;;;399      */
;;;400    int32_t ADC_SetALCTargetLevel(int32_t i32TargetLevel)
000000  b510              PUSH     {r4,lr}
;;;401    {
000002  4604              MOV      r4,r0
;;;402    	if(i32TargetLevel < -2850)
000004  480f              LDR      r0,|L13.68|
000006  4284              CMP      r4,r0
000008  da01              BGE      |L13.14|
;;;403    		i32TargetLevel = -2850;
00000a  4604              MOV      r4,r0
00000c  e003              B        |L13.22|
                  |L13.14|
;;;404    	else if(i32TargetLevel > -600)
00000e  480e              LDR      r0,|L13.72|
000010  4284              CMP      r4,r0
000012  dd00              BLE      |L13.22|
;;;405    		i32TargetLevel = -600;
000014  4604              MOV      r4,r0
                  |L13.22|
;;;406    	
;;;407    	i32TargetLevel = ((i32TargetLevel + 2850) / 150);
000016  2196              MOVS     r1,#0x96
000018  480a              LDR      r0,|L13.68|
00001a  4240              RSBS     r0,r0,#0
00001c  1820              ADDS     r0,r4,r0
00001e  f7fffffe          BL       __aeabi_idivmod
000022  4604              MOV      r4,r0
;;;408    	ALC->CTL = (ALC->CTL&~ALC_CTL_TARGETLV_Msk)|(i32TargetLevel << ALC_CTL_TARGETLV_Pos);
000024  4809              LDR      r0,|L13.76|
000026  6880              LDR      r0,[r0,#8]
000028  210f              MOVS     r1,#0xf
00002a  0349              LSLS     r1,r1,#13
00002c  4388              BICS     r0,r0,r1
00002e  0361              LSLS     r1,r4,#13
000030  4308              ORRS     r0,r0,r1
000032  4906              LDR      r1,|L13.76|
000034  6088              STR      r0,[r1,#8]
;;;409    	
;;;410    	return (i32TargetLevel*150-2850);
000036  2096              MOVS     r0,#0x96
000038  4360              MULS     r0,r4,r0
00003a  4902              LDR      r1,|L13.68|
00003c  4249              RSBS     r1,r1,#0
00003e  1a40              SUBS     r0,r0,r1
;;;411    }
000040  bd10              POP      {r4,pc}
;;;412    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      0xfffff4de
                  |L13.72|
                          DCD      0xfffffda8
                  |L13.76|
                          DCD      0x400b0040

                          AREA ||i.ADC_SetAMUX||, CODE, READONLY, ALIGN=2

                  ADC_SetAMUX PROC
;;;223      */
;;;224    void ADC_SetAMUX(uint32_t u32AMUXSel, uint32_t u32MUXPSel, uint32_t u32MUXNSel)
000000  b510              PUSH     {r4,lr}
;;;225    {
;;;226    	ANA->MUXCTL &= 0x0000;
000002  4b15              LDR      r3,|L14.88|
000004  691b              LDR      r3,[r3,#0x10]
000006  2300              MOVS     r3,#0
000008  4c13              LDR      r4,|L14.88|
00000a  6123              STR      r3,[r4,#0x10]
;;;227    	
;;;228    	if (u32AMUXSel == ADC_MUXCTL_MIC_PATH)
00000c  2301              MOVS     r3,#1
00000e  035b              LSLS     r3,r3,#13
000010  4298              CMP      r0,r3
000012  d107              BNE      |L14.36|
;;;229    	{ 
;;;230    		ANA->MUXCTL |= (ANA_MUXCTL_MUXEN_Msk|ADC_MUXCTL_MIC_PATH);
000014  4623              MOV      r3,r4
000016  691b              LDR      r3,[r3,#0x10]
000018  2403              MOVS     r4,#3
00001a  0364              LSLS     r4,r4,#13
00001c  4323              ORRS     r3,r3,r4
00001e  4c0e              LDR      r4,|L14.88|
000020  6123              STR      r3,[r4,#0x10]
000022  e017              B        |L14.84|
                  |L14.36|
;;;231    	}
;;;232    	else if (u32AMUXSel == ADC_MUXCTL_TEMP_PATH)
000024  2301              MOVS     r3,#1
000026  031b              LSLS     r3,r3,#12
000028  4298              CMP      r0,r3
00002a  d107              BNE      |L14.60|
;;;233    	{
;;;234    		ANA->MUXCTL |= (ANA_MUXCTL_MUXEN_Msk|ADC_MUXCTL_TEMP_PATH);
00002c  4b0a              LDR      r3,|L14.88|
00002e  691b              LDR      r3,[r3,#0x10]
000030  2405              MOVS     r4,#5
000032  0324              LSLS     r4,r4,#12
000034  4323              ORRS     r3,r3,r4
000036  4c08              LDR      r4,|L14.88|
000038  6123              STR      r3,[r4,#0x10]
00003a  e00b              B        |L14.84|
                  |L14.60|
;;;235    	}
;;;236    	else if (u32AMUXSel == ADC_MUXCTL_GPIO_PATH)
00003c  4b07              LDR      r3,|L14.92|
00003e  4298              CMP      r0,r3
000040  d108              BNE      |L14.84|
;;;237    	{
;;;238    		ANA->MUXCTL |= (ANA_MUXCTL_MUXEN_Msk|u32MUXPSel|u32MUXNSel);
000042  4b05              LDR      r3,|L14.88|
000044  691c              LDR      r4,[r3,#0x10]
000046  2301              MOVS     r3,#1
000048  039b              LSLS     r3,r3,#14
00004a  430b              ORRS     r3,r3,r1
00004c  4313              ORRS     r3,r3,r2
00004e  431c              ORRS     r4,r4,r3
000050  4b01              LDR      r3,|L14.88|
000052  611c              STR      r4,[r3,#0x10]
                  |L14.84|
;;;239    	}    
;;;240    }
000054  bd10              POP      {r4,pc}
;;;241    
                          ENDP

000056  0000              DCW      0x0000
                  |L14.88|
                          DCD      0x40080040
                  |L14.92|
                          DCD      0x00000fff

                          AREA ||i.ADC_SetGPIOChannel||, CODE, READONLY, ALIGN=2

                  ADC_SetGPIOChannel PROC
;;;264      */
;;;265    void ADC_SetGPIOChannel(uint32_t u32Mode)
000000  b510              PUSH     {r4,lr}
;;;266    {
000002  4604              MOV      r4,r0
;;;267    	ADC_SetAMUX(ADC_MUXCTL_GPIO_PATH, u32Mode&0x0f00, u32Mode&0x00ff);
000004  b2e2              UXTB     r2,r4
000006  200f              MOVS     r0,#0xf
000008  0200              LSLS     r0,r0,#8
00000a  4020              ANDS     r0,r0,r4
00000c  4601              MOV      r1,r0
00000e  4805              LDR      r0,|L15.36|
000010  f7fffffe          BL       ADC_SetAMUX
;;;268    	u32Mode = u32Mode >> 12;
000014  0b24              LSRS     r4,r4,#12
;;;269    	GPIO_SetMode(PB, u32Mode, GPIO_MODE_INPUT); // Set GIPO as input mode
000016  2200              MOVS     r2,#0
000018  4621              MOV      r1,r4
00001a  4803              LDR      r0,|L15.40|
00001c  f7fffffe          BL       GPIO_SetMode
;;;270    }
000020  bd10              POP      {r4,pc}
;;;271    
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      0x00000fff
                  |L15.40|
                          DCD      0x50004040

                          AREA ||i.ADC_SetPGAGaindB||, CODE, READONLY, ALIGN=2

                  ADC_SetPGAGaindB PROC
;;;318      */
;;;319    int32_t ADC_SetPGAGaindB(int32_t i32PGAGainIndB)
000000  b510              PUSH     {r4,lr}
;;;320    {
000002  4604              MOV      r4,r0
;;;321    	if(i32PGAGainIndB < -1200)
000004  480b              LDR      r0,|L16.52|
000006  4284              CMP      r4,r0
000008  da01              BGE      |L16.14|
;;;322    		i32PGAGainIndB = -1200;
00000a  4604              MOV      r4,r0
00000c  e003              B        |L16.22|
                  |L16.14|
;;;323    	else if(i32PGAGainIndB > 3525)
00000e  480a              LDR      r0,|L16.56|
000010  4284              CMP      r4,r0
000012  dd00              BLE      |L16.22|
;;;324    		i32PGAGainIndB = 3525;
000014  4604              MOV      r4,r0
                  |L16.22|
;;;325    	i32PGAGainIndB = ((i32PGAGainIndB + 1200) / 75)&ANA_PGAGAIN_GAINSET_Msk;
000016  214b              MOVS     r1,#0x4b
000018  0108              LSLS     r0,r1,#4
00001a  1820              ADDS     r0,r4,r0
00001c  f7fffffe          BL       __aeabi_idivmod
000020  0684              LSLS     r4,r0,#26
000022  0ea4              LSRS     r4,r4,#26
;;;326    	ANA->PGAGAIN = i32PGAGainIndB;
000024  4805              LDR      r0,|L16.60|
000026  6284              STR      r4,[r0,#0x28]
;;;327    	
;;;328    	return (i32PGAGainIndB*75-1200);
000028  204b              MOVS     r0,#0x4b
00002a  4360              MULS     r0,r4,r0
00002c  214b              MOVS     r1,#0x4b
00002e  0109              LSLS     r1,r1,#4
000030  1a40              SUBS     r0,r0,r1
;;;329    }
000032  bd10              POP      {r4,pc}
;;;330    
                          ENDP

                  |L16.52|
                          DCD      0xfffffb50
                  |L16.56|
                          DCD      0x00000dc5
                  |L16.60|
                          DCD      0x40080040

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 132
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
