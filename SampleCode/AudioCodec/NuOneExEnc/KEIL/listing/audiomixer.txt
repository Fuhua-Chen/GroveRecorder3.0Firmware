; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\audiomixer.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\audiomixer.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\audiomixer.crf ..\..\..\..\Library\Framework\src\AudioMixer.c]
                          THUMB

                          AREA ||i.AudioMixer_ChangeSR||, CODE, READONLY, ALIGN=1

                  AudioMixer_ChangeSR PROC
;;;213    //---------------------------------------------------------------------------------------------------------
;;;214    UINT32 AudioMixer_ChangeSR(S_BUF_CTRL **ppsInBufCtrlList)
000000  b5f8              PUSH     {r3-r7,lr}
;;;215    {
000002  4607              MOV      r7,r0
;;;216    	UINT32 u32MaxSampleRate;
;;;217    	S_BUF_CTRL *psInBufCtrl;
;;;218    	S_BUF_CTRL **ppsInBufCtrlListTemp;
;;;219    	UINT8 u8DupSmampleRatio;
;;;220    	
;;;221    	u32MaxSampleRate = 0;
000004  2600              MOVS     r6,#0
;;;222    	ppsInBufCtrlListTemp = ppsInBufCtrlList;
000006  463d              MOV      r5,r7
;;;223    	while( (psInBufCtrl =*ppsInBufCtrlListTemp ++)!= AUDIOMIXER_BUL_CTRL_END )
000008  e011              B        |L1.46|
                  |L1.10|
;;;224    	{
;;;225    		if ( (psInBufCtrl == NULL) || BUF_CTRL_IS_INACTIVE(psInBufCtrl) )
00000a  2c00              CMP      r4,#0
00000c  d004              BEQ      |L1.24|
00000e  7820              LDRB     r0,[r4,#0]
000010  2102              MOVS     r1,#2
000012  4008              ANDS     r0,r0,r1
000014  2800              CMP      r0,#0
000016  d000              BEQ      |L1.26|
                  |L1.24|
;;;226    			continue;
000018  e009              B        |L1.46|
                  |L1.26|
;;;227    		if (psInBufCtrl->u16SampleRate == 0)
00001a  89a0              LDRH     r0,[r4,#0xc]
00001c  2800              CMP      r0,#0
00001e  d101              BNE      |L1.36|
;;;228    		{
;;;229    			*ppsInBufCtrlListTemp = NULL;
000020  6028              STR      r0,[r5,#0]
;;;230    			continue;
000022  e004              B        |L1.46|
                  |L1.36|
;;;231    		}
;;;232    		if ( psInBufCtrl->u16SampleRate > u32MaxSampleRate )
000024  89a0              LDRH     r0,[r4,#0xc]
000026  42b0              CMP      r0,r6
000028  d900              BLS      |L1.44|
;;;233    			u32MaxSampleRate = psInBufCtrl->u16SampleRate;
00002a  89a6              LDRH     r6,[r4,#0xc]
                  |L1.44|
00002c  bf00              NOP                            ;226
                  |L1.46|
00002e  cd10              LDM      r5!,{r4}              ;223
000030  1c60              ADDS     r0,r4,#1              ;223
000032  2800              CMP      r0,#0                 ;223
000034  d1e9              BNE      |L1.10|
;;;234    	}
;;;235    
;;;236    	ppsInBufCtrlListTemp = ppsInBufCtrlList;
000036  463d              MOV      r5,r7
;;;237    	while( (psInBufCtrl =*ppsInBufCtrlListTemp ++)!= AUDIOMIXER_BUL_CTRL_END )
000038  e019              B        |L1.110|
                  |L1.58|
;;;238    	{
;;;239    		if ( (psInBufCtrl == NULL) || BUF_CTRL_IS_INACTIVE(psInBufCtrl) )
00003a  2c00              CMP      r4,#0
00003c  d004              BEQ      |L1.72|
00003e  7820              LDRB     r0,[r4,#0]
000040  2102              MOVS     r1,#2
000042  4008              ANDS     r0,r0,r1
000044  2800              CMP      r0,#0
000046  d000              BEQ      |L1.74|
                  |L1.72|
;;;240    			continue;
000048  e011              B        |L1.110|
                  |L1.74|
;;;241    		
;;;242    		if ( psInBufCtrl->u16SampleRate < u32MaxSampleRate )
00004a  89a0              LDRH     r0,[r4,#0xc]
00004c  42b0              CMP      r0,r6
00004e  d20b              BCS      |L1.104|
;;;243    		{
;;;244    #ifdef AUDIOMIXER_DUPLICATE
;;;245    			u8DupSmampleRatio = (UINT8)(((u32MaxSampleRate<<16)/psInBufCtrl->u16SampleRate)>>12);
;;;246    			psInBufCtrl->u16UpSamplingCalculation = (u8DupSmampleRatio<<8) | u8DupSmampleRatio;
;;;247    #else
;;;248    			u8DupSmampleRatio = (UINT8)(((((UINT32)psInBufCtrl->u16SampleRate)<<16)/u32MaxSampleRate)>>8);
000050  89a1              LDRH     r1,[r4,#0xc]
000052  0408              LSLS     r0,r1,#16
000054  4631              MOV      r1,r6
000056  f7fffffe          BL       __aeabi_uidivmod
00005a  0400              LSLS     r0,r0,#16
00005c  0e00              LSRS     r0,r0,#24
00005e  9000              STR      r0,[sp,#0]
;;;249    			psInBufCtrl->u16ReSamplingCalculation = (u8DupSmampleRatio<<8);
000060  9800              LDR      r0,[sp,#0]
000062  0200              LSLS     r0,r0,#8
000064  8220              STRH     r0,[r4,#0x10]
000066  e001              B        |L1.108|
                  |L1.104|
;;;250    #endif			
;;;251    		}
;;;252    		else
;;;253    			psInBufCtrl->u16ReSamplingCalculation = AUDIOMIXER_SAME_SAMPLE_RATE;
000068  2000              MOVS     r0,#0
00006a  8220              STRH     r0,[r4,#0x10]
                  |L1.108|
00006c  bf00              NOP                            ;240
                  |L1.110|
00006e  cd01              LDM      r5!,{r0}              ;237
000070  4604              MOV      r4,r0                 ;237
000072  1c40              ADDS     r0,r0,#1              ;237
000074  2800              CMP      r0,#0                 ;237
000076  d1e0              BNE      |L1.58|
;;;254    	}
;;;255    	
;;;256    	return u32MaxSampleRate;
000078  4630              MOV      r0,r6
;;;257    }
00007a  bdf8              POP      {r3-r7,pc}
;;;258    
                          ENDP


                          AREA ||i.AudioMixer_Initiate||, CODE, READONLY, ALIGN=2

                  AudioMixer_Initiate PROC
;;;260    //---------------------------------------------------------------------------------------------------------
;;;261    UINT32 AudioMixer_Initiate(S_BUF_CTRL_CALLBACK *psMixerCtl, S_BUF_CTRL **ppsInBufCtrlList)
000000  b570              PUSH     {r4-r6,lr}
;;;262    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;263    	psMixerCtl->u8Flag = S_BUF_CTRL_FLAG_CALLBACK;
000006  2001              MOVS     r0,#1
000008  7020              STRB     r0,[r4,#0]
;;;264    	psMixerCtl->pfnFunc = (PFN_DATA_REQUEST_CALLBACK)AudioMixer_MixProcess;
00000a  4803              LDR      r0,|L2.24|
00000c  6060              STR      r0,[r4,#4]
;;;265    	psMixerCtl->pu8Param = (void *)ppsInBufCtrlList;
00000e  60a5              STR      r5,[r4,#8]
;;;266    
;;;267    	return AudioMixer_ChangeSR(ppsInBufCtrlList);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       AudioMixer_ChangeSR
;;;268    }
000016  bd70              POP      {r4-r6,pc}
;;;269    
                          ENDP

                  |L2.24|
                          DCD      AudioMixer_MixProcess

                          AREA ||i.AudioMixer_MixProcess||, CODE, READONLY, ALIGN=2

                  AudioMixer_MixProcess PROC
;;;83     #else
;;;84     UINT8 AudioMixer_MixProcess(S_BUF_CTRL **ppInBufCtrlList, INT16 i16DataBufCount, INT16 ai16DataBuf[])
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;85     {
000002  b086              SUB      sp,sp,#0x18
000004  4617              MOV      r7,r2
;;;86     	S_BUF_CTRL *psInBufCtrl;
;;;87     	INT32 i32Temp;
;;;88     	INT16 *pi16Src, i;
;;;89     	UINT8 u8Ch = 0;
000006  2000              MOVS     r0,#0
000008  9004              STR      r0,[sp,#0x10]
;;;90     	UINT16 u16DupSampleCalculate, u16DupSampleRatio;
;;;91     	
;;;92     	for( i = 0; i < i16DataBufCount; i ++)
00000a  2500              MOVS     r5,#0
00000c  e004              B        |L3.24|
                  |L3.14|
;;;93     		ai16DataBuf[i] = 0;
00000e  2000              MOVS     r0,#0
000010  0069              LSLS     r1,r5,#1
000012  5278              STRH     r0,[r7,r1]
000014  1c68              ADDS     r0,r5,#1              ;92
000016  b205              SXTH     r5,r0                 ;92
                  |L3.24|
000018  9807              LDR      r0,[sp,#0x1c]         ;92
00001a  4285              CMP      r5,r0                 ;92
00001c  dbf7              BLT      |L3.14|
;;;94     	
;;;95     	while( (psInBufCtrl = *ppInBufCtrlList ++) != AUDIOMIXER_BUL_CTRL_END )
00001e  e0ac              B        |L3.378|
                  |L3.32|
;;;96     	{
;;;97     		if ( (psInBufCtrl == NULL) || BUF_CTRL_IS_INACTIVE(psInBufCtrl) )
000020  2c00              CMP      r4,#0
000022  d004              BEQ      |L3.46|
000024  7820              LDRB     r0,[r4,#0]
000026  2102              MOVS     r1,#2
000028  4008              ANDS     r0,r0,r1
00002a  2800              CMP      r0,#0
00002c  d000              BEQ      |L3.48|
                  |L3.46|
;;;98     			continue;
00002e  e0a4              B        |L3.378|
                  |L3.48|
;;;99     		
;;;100    		if (BUF_CTRL_IS_PAUSE(psInBufCtrl))
000030  7820              LDRB     r0,[r4,#0]
000032  2108              MOVS     r1,#8
000034  4008              ANDS     r0,r0,r1
000036  2800              CMP      r0,#0
000038  d005              BEQ      |L3.70|
;;;101    		{
;;;102    			if (Playback_IsTargetVolume(u8Ch))
00003a  9804              LDR      r0,[sp,#0x10]
00003c  f7fffffe          BL       Playback_IsTargetVolume
000040  2800              CMP      r0,#0
000042  d000              BEQ      |L3.70|
;;;103    				continue;
000044  e099              B        |L3.378|
                  |L3.70|
;;;104    		}		
;;;105    			
;;;106    		pi16Src = &psInBufCtrl->pi16Buf[psInBufCtrl->u16BufReadIdx];
000046  8921              LDRH     r1,[r4,#8]
000048  0049              LSLS     r1,r1,#1
00004a  6860              LDR      r0,[r4,#4]
00004c  1840              ADDS     r0,r0,r1
00004e  9005              STR      r0,[sp,#0x14]
;;;107    		if (  psInBufCtrl->u16ReSamplingCalculation == AUDIOMIXER_SAME_SAMPLE_RATE )
000050  8a20              LDRH     r0,[r4,#0x10]
000052  2800              CMP      r0,#0
000054  d12c              BNE      |L3.176|
;;;108    		{
;;;109    			// The sample rate is the same as DAC playback. 
;;;110    			// No need to duplicate samples
;;;111    			i = 0;
000056  2500              MOVS     r5,#0
;;;112    			do 
000058  bf00              NOP      
                  |L3.90|
;;;113    			{
;;;114    				Playback_ProcessVolume(u8Ch, pi16Src);
00005a  9905              LDR      r1,[sp,#0x14]
00005c  9804              LDR      r0,[sp,#0x10]
00005e  f7fffffe          BL       Playback_ProcessVolume
;;;115    				i32Temp = ai16DataBuf[i]; 
000062  0068              LSLS     r0,r5,#1
000064  5e3e              LDRSH    r6,[r7,r0]
;;;116    				i32Temp += *pi16Src++;
000066  2100              MOVS     r1,#0
000068  9805              LDR      r0,[sp,#0x14]
00006a  5e41              LDRSH    r1,[r0,r1]
00006c  1c80              ADDS     r0,r0,#2
00006e  198e              ADDS     r6,r1,r6
000070  9005              STR      r0,[sp,#0x14]
;;;117    				if (i32Temp> APU_MAX_RESOULTION) // overflow, positive->negative
000072  4847              LDR      r0,|L3.400|
000074  4286              CMP      r6,r0
000076  dd01              BLE      |L3.124|
;;;118    					i32Temp = APU_MAX_RESOULTION;
000078  4606              MOV      r6,r0
00007a  e004              B        |L3.134|
                  |L3.124|
;;;119    				else if (i32Temp < APU_MIN_RESOULTION) // overflow, negative->positive
00007c  4844              LDR      r0,|L3.400|
00007e  43c0              MVNS     r0,r0
000080  4286              CMP      r6,r0
000082  da00              BGE      |L3.134|
;;;120    					i32Temp = APU_MIN_RESOULTION;
000084  4606              MOV      r6,r0
                  |L3.134|
;;;121    				ai16DataBuf[i] = i32Temp;
000086  b230              SXTH     r0,r6
000088  0069              LSLS     r1,r5,#1
00008a  5278              STRH     r0,[r7,r1]
;;;122    
;;;123    				if ((psInBufCtrl->u16BufReadIdx+=1) >= psInBufCtrl->u16BufCount)
00008c  8920              LDRH     r0,[r4,#8]
00008e  1c40              ADDS     r0,r0,#1
000090  b280              UXTH     r0,r0
000092  8120              STRH     r0,[r4,#8]
000094  8861              LDRH     r1,[r4,#2]
000096  4288              CMP      r0,r1
000098  db03              BLT      |L3.162|
;;;124    				{	
;;;125    					psInBufCtrl->u16BufReadIdx = 0;
00009a  2000              MOVS     r0,#0
00009c  8120              STRH     r0,[r4,#8]
;;;126    					pi16Src = &psInBufCtrl->pi16Buf[0];
00009e  6860              LDR      r0,[r4,#4]
0000a0  9005              STR      r0,[sp,#0x14]
                  |L3.162|
;;;127    				}
;;;128    			}while(++i < i16DataBufCount);
0000a2  1c68              ADDS     r0,r5,#1
0000a4  b201              SXTH     r1,r0
0000a6  460d              MOV      r5,r1
0000a8  9807              LDR      r0,[sp,#0x1c]
0000aa  4281              CMP      r1,r0
0000ac  dbd5              BLT      |L3.90|
;;;129    				
;;;130    			continue;
0000ae  e064              B        |L3.378|
                  |L3.176|
;;;131    		}
;;;132    			// For AUDIOMIXER_DUPLICATE defined:
;;;133    			// 		Sample Ratio (8bits): represent 1 sample(low sample rate) should be duplicated to how many samples(high sample rate)
;;;134    			//			bit7~bit4: integer part
;;;135    			//			bit3~bit0: fraction part
;;;136    			// 		Sample Calculate (8bit): represent how many samples should be duplicated from current sample(low sample rate)
;;;137    			//			bit7~bit4: integer part
;;;138    			//			bit3~bit0: fraction part
;;;139    			// For MIXER_DUPLICATE not defined:
;;;140    			// 		Sample Ratio (8bits):
;;;141    			//			bit7~bit0: fraction part
;;;142    			// 		Sample Calculate (8bit):
;;;143    			//			bit7~bit0: fraction part
;;;144    		u16DupSampleRatio = psInBufCtrl->u16ReSamplingCalculation >> 8;
0000b0  8a20              LDRH     r0,[r4,#0x10]
0000b2  1200              ASRS     r0,r0,#8
0000b4  9002              STR      r0,[sp,#8]
;;;145    		u16DupSampleCalculate = psInBufCtrl->u16ReSamplingCalculation & 0xff;
0000b6  7c20              LDRB     r0,[r4,#0x10]
0000b8  9003              STR      r0,[sp,#0xc]
;;;146    		
;;;147    		for( i = 0; i < i16DataBufCount; i ++)
0000ba  2500              MOVS     r5,#0
0000bc  e052              B        |L3.356|
                  |L3.190|
;;;148    		{
;;;149    #ifdef AUDIOMIXER_DUPLICATE	
;;;150    			if ( u16DupSampleCalculate >= 0x10 )
;;;151    			{
;;;152    				// Duplicate same PCM.
;;;153    				u16DupSampleCalculate -= 0x10;
;;;154    				ai16DataBuf[i] += *pi16Src;
;;;155    			}
;;;156    			else
;;;157    			{
;;;158    				INT16 i16PrevPCM;
;;;159    				// Use intrpolation to caclulate new PCM.
;;;160    				{
;;;161    					i16PrevPCM = *pi16Src++;
;;;162    					if ((++psInBufCtrl->u16BufReadIdx) >= psInBufCtrl->u16BufCount)
;;;163    					{
;;;164    						psInBufCtrl->u16BufReadIdx = 0;
;;;165    						pi16Src = &psInBufCtrl->pi16Buf[0];
;;;166    					}
;;;167    					i32Temp = ai16DataBuf[i];
;;;168    					i32Temp  += (((INT32)i16PrevPCM*u16DupSampleCalculate + (INT32)(*pi16Src)*(0x10 - u16DupSampleCalculate)))>>4;
;;;169    					u16DupSampleCalculate = (u16DupSampleCalculate-0x10)+u16DupSampleRatio;
;;;170    				}
;;;171    			}
;;;172    #else
;;;173    			// Use intrpolation to caclulate new PCM.
;;;174    			INT32 i32PrevPCM, i32NextPCM;
;;;175    			i32PrevPCM = *pi16Src;
0000be  2100              MOVS     r1,#0
0000c0  9805              LDR      r0,[sp,#0x14]
0000c2  5e41              LDRSH    r1,[r0,r1]
0000c4  9101              STR      r1,[sp,#4]
;;;176    			if ((psInBufCtrl->u16BufReadIdx+1) >= psInBufCtrl->u16BufCount)
0000c6  8920              LDRH     r0,[r4,#8]
0000c8  1c40              ADDS     r0,r0,#1
0000ca  8861              LDRH     r1,[r4,#2]
0000cc  4288              CMP      r0,r1
0000ce  db04              BLT      |L3.218|
;;;177    				i32NextPCM = psInBufCtrl->pi16Buf[0];
0000d0  2100              MOVS     r1,#0
0000d2  6860              LDR      r0,[r4,#4]
0000d4  5e41              LDRSH    r1,[r0,r1]
0000d6  9100              STR      r1,[sp,#0]
0000d8  e003              B        |L3.226|
                  |L3.218|
;;;178    			else
;;;179    				i32NextPCM = *(pi16Src+1);
0000da  2102              MOVS     r1,#2
0000dc  9805              LDR      r0,[sp,#0x14]
0000de  5e41              LDRSH    r1,[r0,r1]
0000e0  9100              STR      r1,[sp,#0]
                  |L3.226|
;;;180    			
;;;181    			Playback_ProcessVolume(u8Ch, pi16Src);
0000e2  9905              LDR      r1,[sp,#0x14]
0000e4  9804              LDR      r0,[sp,#0x10]
0000e6  f7fffffe          BL       Playback_ProcessVolume
;;;182    			Playback_ProcessVolume(u8Ch, (INT16 *)&i32NextPCM);
0000ea  4669              MOV      r1,sp
0000ec  9804              LDR      r0,[sp,#0x10]
0000ee  f7fffffe          BL       Playback_ProcessVolume
;;;183    			
;;;184    			i32Temp = ai16DataBuf[i];
0000f2  0068              LSLS     r0,r5,#1
0000f4  5e3e              LDRSH    r6,[r7,r0]
;;;185    			i32Temp += ((i32PrevPCM*(0x100-u16DupSampleCalculate) + (i32NextPCM*u16DupSampleCalculate))>>8);
0000f6  21ff              MOVS     r1,#0xff
0000f8  3101              ADDS     r1,#1
0000fa  9803              LDR      r0,[sp,#0xc]
0000fc  1a08              SUBS     r0,r1,r0
0000fe  9901              LDR      r1,[sp,#4]
000100  4348              MULS     r0,r1,r0
000102  9a03              LDR      r2,[sp,#0xc]
000104  9900              LDR      r1,[sp,#0]
000106  4351              MULS     r1,r2,r1
000108  1840              ADDS     r0,r0,r1
00010a  1200              ASRS     r0,r0,#8
00010c  1986              ADDS     r6,r0,r6
;;;186    			u16DupSampleCalculate = u16DupSampleCalculate+u16DupSampleRatio;
00010e  9902              LDR      r1,[sp,#8]
000110  9803              LDR      r0,[sp,#0xc]
000112  1840              ADDS     r0,r0,r1
000114  b280              UXTH     r0,r0
000116  9003              STR      r0,[sp,#0xc]
;;;187    			if ( u16DupSampleCalculate >= 0x100 )
000118  9803              LDR      r0,[sp,#0xc]
00011a  28ff              CMP      r0,#0xff
00011c  dd13              BLE      |L3.326|
;;;188    			{
;;;189    				u16DupSampleCalculate -= 0x100;
00011e  9803              LDR      r0,[sp,#0xc]
000120  38ff              SUBS     r0,r0,#0xff
000122  3801              SUBS     r0,#1
000124  b280              UXTH     r0,r0
000126  9003              STR      r0,[sp,#0xc]
;;;190    				if ((++psInBufCtrl->u16BufReadIdx) >= psInBufCtrl->u16BufCount)
000128  8920              LDRH     r0,[r4,#8]
00012a  1c40              ADDS     r0,r0,#1
00012c  b280              UXTH     r0,r0
00012e  8120              STRH     r0,[r4,#8]
000130  8861              LDRH     r1,[r4,#2]
000132  4288              CMP      r0,r1
000134  db04              BLT      |L3.320|
;;;191    				{
;;;192    					psInBufCtrl->u16BufReadIdx = 0;
000136  2000              MOVS     r0,#0
000138  8120              STRH     r0,[r4,#8]
;;;193    					pi16Src = &psInBufCtrl->pi16Buf[0];
00013a  6860              LDR      r0,[r4,#4]
00013c  9005              STR      r0,[sp,#0x14]
00013e  e002              B        |L3.326|
                  |L3.320|
;;;194    				}
;;;195    				else
;;;196    					pi16Src ++;
000140  9805              LDR      r0,[sp,#0x14]
000142  1c80              ADDS     r0,r0,#2
000144  9005              STR      r0,[sp,#0x14]
                  |L3.326|
;;;197    			}
;;;198    #endif
;;;199    			
;;;200    			if (i32Temp > APU_MAX_RESOULTION) // overflow, positive->negative
000146  4812              LDR      r0,|L3.400|
000148  4286              CMP      r6,r0
00014a  dd01              BLE      |L3.336|
;;;201    				i32Temp = APU_MAX_RESOULTION;
00014c  4606              MOV      r6,r0
00014e  e004              B        |L3.346|
                  |L3.336|
;;;202    			else if (i32Temp < APU_MIN_RESOULTION) // overflow, negative->positive
000150  480f              LDR      r0,|L3.400|
000152  43c0              MVNS     r0,r0
000154  4286              CMP      r6,r0
000156  da00              BGE      |L3.346|
;;;203    				i32Temp = APU_MIN_RESOULTION;
000158  4606              MOV      r6,r0
                  |L3.346|
;;;204    			ai16DataBuf[i] = i32Temp; 
00015a  b230              SXTH     r0,r6
00015c  0069              LSLS     r1,r5,#1
00015e  5278              STRH     r0,[r7,r1]
000160  1c68              ADDS     r0,r5,#1              ;147
000162  b205              SXTH     r5,r0                 ;147
                  |L3.356|
000164  9807              LDR      r0,[sp,#0x1c]         ;147
000166  4285              CMP      r5,r0                 ;147
000168  dba9              BLT      |L3.190|
;;;205    		}
;;;206    			
;;;207    		psInBufCtrl->u16ReSamplingCalculation = (psInBufCtrl->u16ReSamplingCalculation&0xff00) | u16DupSampleCalculate;
00016a  8a20              LDRH     r0,[r4,#0x10]
00016c  21ff              MOVS     r1,#0xff
00016e  0209              LSLS     r1,r1,#8
000170  4008              ANDS     r0,r0,r1
000172  9903              LDR      r1,[sp,#0xc]
000174  4308              ORRS     r0,r0,r1
000176  8220              STRH     r0,[r4,#0x10]
000178  bf00              NOP                            ;98
                  |L3.378|
00017a  9806              LDR      r0,[sp,#0x18]         ;95
00017c  c810              LDM      r0!,{r4}              ;95
00017e  9006              STR      r0,[sp,#0x18]         ;95
000180  1c60              ADDS     r0,r4,#1              ;95
000182  2800              CMP      r0,#0                 ;95
000184  d000              BEQ      |L3.392|
000186  e74b              B        |L3.32|
                  |L3.392|
;;;208    	}
;;;209    			
;;;210    	return i16DataBufCount;
000188  9807              LDR      r0,[sp,#0x1c]
00018a  b2c0              UXTB     r0,r0
;;;211    }
00018c  b009              ADD      sp,sp,#0x24
00018e  bdf0              POP      {r4-r7,pc}
;;;212    
                          ENDP

                  |L3.400|
                          DCD      0x00007fff

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Framework\\src\\AudioMixer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_AudioMixer_c_2c64785d____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_AudioMixer_c_2c64785d____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_AudioMixer_c_2c64785d____REVSH|
#line 132
|__asm___12_AudioMixer_c_2c64785d____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
