; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\sys.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\sys.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\sys.crf ..\..\..\..\Library\StdDriver\src\sys.c]
                          THUMB

                          AREA ||i.SYS_ClearResetSrc||, CODE, READONLY, ALIGN=1

                  SYS_ClearResetSrc PROC
;;;30       */
;;;31     void SYS_ClearResetSrc(uint32_t u32Src)
000000  2105              MOVS     r1,#5
;;;32     {
;;;33         SYS->RSTSTS |= u32Src;
000002  0709              LSLS     r1,r1,#28
000004  6849              LDR      r1,[r1,#4]
000006  4301              ORRS     r1,r1,r0
000008  2205              MOVS     r2,#5
00000a  0712              LSLS     r2,r2,#28
00000c  6051              STR      r1,[r2,#4]
;;;34     }
00000e  4770              BX       lr
;;;35     
                          ENDP


                          AREA ||i.SYS_GetResetSrc||, CODE, READONLY, ALIGN=1

                  SYS_GetResetSrc PROC
;;;39       */
;;;40     uint32_t SYS_GetResetSrc(void)
000000  2005              MOVS     r0,#5
;;;41     {
;;;42         return (SYS->RSTSTS);
000002  0700              LSLS     r0,r0,#28
000004  6840              LDR      r0,[r0,#4]
;;;43     }
000006  4770              BX       lr
;;;44     
                          ENDP


                          AREA ||i.SYS_IsRegLocked||, CODE, READONLY, ALIGN=2

                  SYS_IsRegLocked PROC
;;;49       */
;;;50     uint32_t SYS_IsRegLocked(void)
000000  4803              LDR      r0,|L3.16|
;;;51     {
;;;52       return ( (SYS->REGLCTL & SYS_REGLCTL_REGLCTL_Msk)? 0:1 );
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  2101              MOVS     r1,#1
00000a  4048              EORS     r0,r0,r1
;;;53     }
00000c  4770              BX       lr
;;;54     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x50000100

                          AREA ||i.SYS_Lock||, CODE, READONLY, ALIGN=2

                  SYS_Lock PROC
;;;85       */
;;;86     void SYS_Lock(uint8_t u8Lock)
000000  2800              CMP      r0,#0
;;;87     {
;;;88     	if ( u8Lock )
000002  d002              BEQ      |L4.10|
;;;89     		SYS->REGLCTL = 0;
000004  2100              MOVS     r1,#0
000006  4a01              LDR      r2,|L4.12|
000008  6011              STR      r1,[r2,#0]
                  |L4.10|
;;;90     }
00000a  4770              BX       lr
;;;91     
                          ENDP

                  |L4.12|
                          DCD      0x50000100

                          AREA ||i.SYS_LockReg||, CODE, READONLY, ALIGN=2

                  SYS_LockReg PROC
;;;59       */
;;;60     void SYS_LockReg(void)
000000  2000              MOVS     r0,#0
;;;61     {
;;;62         SYS->REGLCTL = 0;
000002  4901              LDR      r1,|L5.8|
000004  6008              STR      r0,[r1,#0]
;;;63     }
000006  4770              BX       lr
;;;64     
                          ENDP

                  |L5.8|
                          DCD      0x50000100

                          AREA ||i.SYS_ReadPDID||, CODE, READONLY, ALIGN=1

                  SYS_ReadPDID PROC
;;;115      */
;;;116    uint32_t  SYS_ReadPDID(void)
000000  2005              MOVS     r0,#5
;;;117    {
;;;118        return SYS->PDID;
000002  0700              LSLS     r0,r0,#28
000004  6800              LDR      r0,[r0,#0]
;;;119    }
000006  4770              BX       lr
;;;120    
                          ENDP


                          AREA ||i.SYS_ResetCPU||, CODE, READONLY, ALIGN=1

                  SYS_ResetCPU PROC
;;;135      */
;;;136    void SYS_ResetCPU(void)
000000  b500              PUSH     {lr}
;;;137    {
;;;138    	uint8_t u8Lock = SYS_Unlock();
000002  f7fffffe          BL       SYS_Unlock
000006  4603              MOV      r3,r0
;;;139        SYS->IPRST0 |= SYS_IPRST0_CPURST_Msk;
000008  2005              MOVS     r0,#5
00000a  0700              LSLS     r0,r0,#28
00000c  6880              LDR      r0,[r0,#8]
00000e  2102              MOVS     r1,#2
000010  4308              ORRS     r0,r0,r1
000012  2105              MOVS     r1,#5
000014  0709              LSLS     r1,r1,#28
000016  6088              STR      r0,[r1,#8]
;;;140    	SYS_Lock(u8Lock);
000018  4618              MOV      r0,r3
00001a  f7fffffe          BL       SYS_Lock
;;;141    }
00001e  bd00              POP      {pc}
;;;142    
                          ENDP


                          AREA ||i.SYS_ResetChip||, CODE, READONLY, ALIGN=1

                  SYS_ResetChip PROC
;;;124      */
;;;125    void SYS_ResetChip(void)
000000  b500              PUSH     {lr}
;;;126    {
;;;127    	uint8_t u8Lock = SYS_Unlock();
000002  f7fffffe          BL       SYS_Unlock
000006  4603              MOV      r3,r0
;;;128        SYS->IPRST0 |= SYS_IPRST0_CHIPRST_Msk;
000008  2005              MOVS     r0,#5
00000a  0700              LSLS     r0,r0,#28
00000c  6880              LDR      r0,[r0,#8]
00000e  2101              MOVS     r1,#1
000010  4308              ORRS     r0,r0,r1
000012  2105              MOVS     r1,#5
000014  0709              LSLS     r1,r1,#28
000016  6088              STR      r0,[r1,#8]
;;;129    	SYS_Lock(u8Lock);
000018  4618              MOV      r0,r3
00001a  f7fffffe          BL       SYS_Lock
;;;130    }
00001e  bd00              POP      {pc}
;;;131    
                          ENDP


                          AREA ||i.SYS_ResetModule||, CODE, READONLY, ALIGN=1

                  SYS_ResetModule PROC
;;;163      */
;;;164    void SYS_ResetModule(uint32_t u32ModuleIndex)
000000  0e01              LSRS     r1,r0,#24
;;;165    {
;;;166        *(volatile uint32_t *)((uint32_t)&(SYS->IPRST0) + (u32ModuleIndex>>24)) |= 1<<(u32ModuleIndex & 0x00ffffff);
000002  2205              MOVS     r2,#5
000004  0712              LSLS     r2,r2,#28
000006  1889              ADDS     r1,r1,r2
000008  6889              LDR      r1,[r1,#8]
00000a  2201              MOVS     r2,#1
00000c  4082              LSLS     r2,r2,r0
00000e  4311              ORRS     r1,r1,r2
000010  0e02              LSRS     r2,r0,#24
000012  2305              MOVS     r3,#5
000014  071b              LSLS     r3,r3,#28
000016  18d2              ADDS     r2,r2,r3
000018  6091              STR      r1,[r2,#8]
;;;167        *(volatile uint32_t *)((uint32_t)&(SYS->IPRST0) + (u32ModuleIndex>>24)) &= ~(1<<(u32ModuleIndex & 0x00ffffff));
00001a  0e01              LSRS     r1,r0,#24
00001c  461a              MOV      r2,r3
00001e  1889              ADDS     r1,r1,r2
000020  688a              LDR      r2,[r1,#8]
000022  2101              MOVS     r1,#1
000024  4081              LSLS     r1,r1,r0
000026  438a              BICS     r2,r2,r1
000028  0e01              LSRS     r1,r0,#24
00002a  18c9              ADDS     r1,r1,r3
00002c  608a              STR      r2,[r1,#8]
;;;168    }
00002e  4770              BX       lr
;;;169    
                          ENDP


                          AREA ||i.SYS_Unlock||, CODE, READONLY, ALIGN=2

                  SYS_Unlock PROC
;;;96       */
;;;97     uint8_t SYS_Unlock(void)
000000  480a              LDR      r0,|L10.44|
;;;98     {
;;;99     	if ( ((SYS->REGLCTL)&SYS_REGLCTL_REGLCTL_Msk) == 1 )
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  0fc0              LSRS     r0,r0,#31
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L10.16|
;;;100    		return 0;
00000c  2000              MOVS     r0,#0
                  |L10.14|
;;;101    	
;;;102        while(SYS->REGLCTL != SYS_REGLCTL_REGLCTL_Msk) 
;;;103    	{
;;;104            SYS->REGLCTL = 0x59;
;;;105            SYS->REGLCTL = 0x16;
;;;106            SYS->REGLCTL = 0x88;
;;;107        }
;;;108    
;;;109    	return 1;
;;;110    }
00000e  4770              BX       lr
                  |L10.16|
000010  e006              B        |L10.32|
                  |L10.18|
000012  2059              MOVS     r0,#0x59              ;104
000014  4905              LDR      r1,|L10.44|
000016  6008              STR      r0,[r1,#0]            ;104
000018  2016              MOVS     r0,#0x16              ;105
00001a  6008              STR      r0,[r1,#0]            ;105
00001c  2088              MOVS     r0,#0x88              ;106
00001e  6008              STR      r0,[r1,#0]            ;106
                  |L10.32|
000020  4802              LDR      r0,|L10.44|
000022  6800              LDR      r0,[r0,#0]            ;102
000024  2801              CMP      r0,#1                 ;102
000026  d1f4              BNE      |L10.18|
000028  bf00              NOP                            ;109
00002a  e7f0              B        |L10.14|
;;;111    
                          ENDP

                  |L10.44|
                          DCD      0x50000100

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;69       */
;;;70     void SYS_UnlockReg(void)
000000  e006              B        |L11.16|
                  |L11.2|
;;;71     {
;;;72         while(SYS->REGLCTL != SYS_REGLCTL_REGLCTL_Msk) 
;;;73         {
;;;74             SYS->REGLCTL = 0x59;
000002  2059              MOVS     r0,#0x59
000004  4905              LDR      r1,|L11.28|
000006  6008              STR      r0,[r1,#0]
;;;75             SYS->REGLCTL = 0x16;
000008  2016              MOVS     r0,#0x16
00000a  6008              STR      r0,[r1,#0]
;;;76             SYS->REGLCTL = 0x88;
00000c  2088              MOVS     r0,#0x88
00000e  6008              STR      r0,[r1,#0]
                  |L11.16|
000010  4802              LDR      r0,|L11.28|
000012  6800              LDR      r0,[r0,#0]            ;72
000014  2801              CMP      r0,#1                 ;72
000016  d1f4              BNE      |L11.2|
;;;77         }
;;;78     }
000018  4770              BX       lr
;;;79     
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x50000100

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\sys.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_962b9fbe____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_sys_c_962b9fbe____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_962b9fbe____REVSH|
#line 132
|__asm___5_sys_c_962b9fbe____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
