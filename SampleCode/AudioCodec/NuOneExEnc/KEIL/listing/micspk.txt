; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\micspk.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\micspk.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\micspk.crf ..\..\..\..\Library\Framework\src\MicSpk.c]
                          THUMB

                          AREA ||i.BIQFilter_Setting||, CODE, READONLY, ALIGN=2

                  BIQFilter_Setting PROC
;;;65     
;;;66     static void BIQFilter_Setting(void)
000000  b510              PUSH     {r4,lr}
;;;67     {
;;;68     #if (ADC_FILTER_ENABLE == 2) || (APU_FILTER_ENABLE == 2)
;;;69     	UINT8	u8temp;
;;;70     	
;;;71     	/* Enable BIQ filter clock */
;;;72     	CLK_EnableModuleClock(BFAL_MODULE);
000002  480a              LDR      r0,|L1.44|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;73     	/* wait 32 internal system clocks */
;;;74     	for(u8temp=0; u8temp<32; u8temp++);
000008  2400              MOVS     r4,#0
00000a  e001              B        |L1.16|
                  |L1.12|
00000c  1c60              ADDS     r0,r4,#1
00000e  b2c4              UXTB     r4,r0
                  |L1.16|
000010  2c20              CMP      r4,#0x20
000012  dbfb              BLT      |L1.12|
;;;75     	BIQ_Reset();
000014  f7fffffe          BL       BIQ_Reset
;;;76     	BIQ_SetCoeff((UINT32 *)g_u32BiqCoeff);
000018  4805              LDR      r0,|L1.48|
00001a  f7fffffe          BL       BIQ_SetCoeff
;;;77     		
;;;78     	/* wait 32 internal system clocks */
;;;79     	for(u8temp=0; u8temp<32; u8temp++);
00001e  2400              MOVS     r4,#0
000020  e001              B        |L1.38|
                  |L1.34|
000022  1c60              ADDS     r0,r4,#1
000024  b2c4              UXTB     r4,r0
                  |L1.38|
000026  2c20              CMP      r4,#0x20
000028  dbfb              BLT      |L1.34|
;;;80     	
;;;81     #endif	
;;;82     }
00002a  bd10              POP      {r4,pc}
;;;83     
                          ENDP

                  |L1.44|
                          DCD      0x40000012
                  |L1.48|
                          DCD      g_u32BiqCoeff

                          AREA ||i.MIC_ChangeSR||, CODE, READONLY, ALIGN=2

                  MIC_ChangeSR PROC
;;;91     //---------------------------------------------------------------------------
;;;92     void MIC_ChangeSR(
000000  b5fe              PUSH     {r1-r7,lr}
;;;93     	UINT32 u32SampleRate
;;;94     )
;;;95     {
000002  4606              MOV      r6,r0
;;;96     #define CHK_ADC_DIV(div)		(((div>=8)&&(div<=48))?TRUE:FALSE)
;;;97     	
;;;98     	UINT16 au16OSR[4] = {64, 128, 192, 384};
000004  4917              LDR      r1,|L2.100|
000006  c903              LDM      r1,{r0,r1}
000008  9101              STR      r1,[sp,#4]
00000a  9000              STR      r0,[sp,#0]
;;;99     	UINT8 u8Div, u8OSRIdx = 0;
00000c  2500              MOVS     r5,#0
;;;100    
;;;101    #if (ADC_DOWNSAMPLE_ORDER)
;;;102    	u32SampleRate <<=  ADC_DOWNSAMPLE_ORDER;
;;;103    #endif
;;;104    
;;;105    #if (ADC_FILTER_ENABLE == 2)
;;;106    	BIQ_SET_ADCPATH(BIQ, SystemCoreClock/u32SampleRate, 3); //down x4
;;;107    	BIQ_START_RUN(BIQ) ;
;;;108    #endif	
;;;109    	
;;;110    	do{		
00000e  bf00              NOP      
                  |L2.16|
;;;111    		u8Div = SystemCoreClock/u32SampleRate/au16OSR[u8OSRIdx];
000010  4631              MOV      r1,r6
000012  4815              LDR      r0,|L2.104|
000014  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  4607              MOV      r7,r0
00001c  0068              LSLS     r0,r5,#1
00001e  466a              MOV      r2,sp
000020  5a11              LDRH     r1,[r2,r0]
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       __aeabi_uidivmod
000028  b2c4              UXTB     r4,r0
;;;112    		if (CHK_ADC_DIV(u8Div))
00002a  2c08              CMP      r4,#8
00002c  db03              BLT      |L2.54|
00002e  2c30              CMP      r4,#0x30
000030  dc01              BGT      |L2.54|
000032  2001              MOVS     r0,#1
000034  e000              B        |L2.56|
                  |L2.54|
000036  2000              MOVS     r0,#0
                  |L2.56|
000038  2800              CMP      r0,#0
00003a  d000              BEQ      |L2.62|
;;;113    			break;
00003c  e004              B        |L2.72|
                  |L2.62|
;;;114    	}while(++u8OSRIdx<4);
00003e  1c68              ADDS     r0,r5,#1
000040  b2c0              UXTB     r0,r0
000042  4605              MOV      r5,r0
000044  2804              CMP      r0,#4
000046  dbe3              BLT      |L2.16|
                  |L2.72|
000048  bf00              NOP                            ;113
;;;115    
;;;116    	ADC_SET_OSRATION(ADC, u8OSRIdx);
00004a  4808              LDR      r0,|L2.108|
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  0900              LSRS     r0,r0,#4
000050  0100              LSLS     r0,r0,#4
000052  0729              LSLS     r1,r5,#28
000054  0f09              LSRS     r1,r1,#28
000056  4308              ORRS     r0,r0,r1
000058  4904              LDR      r1,|L2.108|
00005a  60c8              STR      r0,[r1,#0xc]
;;;117    	ADC_SET_SDCLKDIV(ADC, u8Div);
00005c  b2e0              UXTB     r0,r4
00005e  6088              STR      r0,[r1,#8]
;;;118    		
;;;119    }
000060  bdfe              POP      {r1-r7,pc}
;;;120    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      ||.constdata||+0x3c
                  |L2.104|
                          DCD      SystemCoreClock
                  |L2.108|
                          DCD      0x400e0000

                          AREA ||i.MIC_Close||, CODE, READONLY, ALIGN=2

                  MIC_Close PROC
;;;217    //---------------------------------------------------------------------------
;;;218    void MIC_Close(void)
000000  b510              PUSH     {r4,lr}
;;;219    {
;;;220    	ADC_STOP_CONV(ADC);
000002  2001              MOVS     r0,#1
000004  43c0              MVNS     r0,r0
000006  490f              LDR      r1,|L3.68|
000008  6048              STR      r0,[r1,#4]
;;;221    	ADC_DisableInt(ADC_FIFO_INT);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       ADC_DisableInt
;;;222    	
;;;223    	ADC_DISABLE_PGA(ADC);
000010  2000              MOVS     r0,#0
000012  490d              LDR      r1,|L3.72|
000014  6208              STR      r0,[r1,#0x20]
;;;224    	ADC_DISABLE_VMID(ADC);
000016  480c              LDR      r0,|L3.72|
000018  3840              SUBS     r0,r0,#0x40
00001a  6800              LDR      r0,[r0,#0]
00001c  2107              MOVS     r1,#7
00001e  4308              ORRS     r0,r0,r1
000020  4909              LDR      r1,|L3.72|
000022  3940              SUBS     r1,r1,#0x40
000024  6008              STR      r0,[r1,#0]
;;;225    	ADC_DisableMICBias();
000026  f7fffffe          BL       ADC_DisableMICBias
;;;226    	
;;;227    	ADC_DISABLE_SIGNALPOWER(ADC,
00002a  4807              LDR      r0,|L3.72|
00002c  6a40              LDR      r0,[r0,#0x24]
00002e  211e              MOVS     r1,#0x1e
000030  4388              BICS     r0,r0,r1
000032  4905              LDR      r1,|L3.72|
000034  6248              STR      r0,[r1,#0x24]
;;;228    							ADC_SIGCTL_ADCMOD_POWER|
;;;229    							ADC_SIGCTL_IBGEN_POWER|
;;;230    							ADC_SIGCTL_BUFADC_POWER|
;;;231    							ADC_SIGCTL_BUFPGA_POWER);
;;;232    	ADC_Close();
000036  f7fffffe          BL       ADC_Close
;;;233    	CLK_DisableModuleClock(ADC_MODULE);
00003a  4804              LDR      r0,|L3.76|
00003c  f7fffffe          BL       CLK_DisableModuleClock
;;;234    }
000040  bd10              POP      {r4,pc}
;;;235    
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      0x400e0000
                  |L3.72|
                          DCD      0x40080040
                  |L3.76|
                          DCD      0x4003fe1c

                          AREA ||i.MIC_Open||, CODE, READONLY, ALIGN=2

                  MIC_Open PROC
;;;128    //---------------------------------------------------------------------------
;;;129    void MIC_Open(void)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131    	/* Reset IP */
;;;132    	CLK_EnableModuleClock(ADC_MODULE);
000002  482d              LDR      r0,|L4.184|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;133    	CLK_EnableModuleClock(ANA_MODULE);
000008  482c              LDR      r0,|L4.188|
00000a  f7fffffe          BL       CLK_EnableModuleClock
;;;134    	SYS_ResetModule(EADC_RST);
00000e  482c              LDR      r0,|L4.192|
000010  f7fffffe          BL       SYS_ResetModule
;;;135    	
;;;136    	/* Enable Analog block power */
;;;137    	ADC_ENABLE_SIGNALPOWER(ADC,
000014  482b              LDR      r0,|L4.196|
000016  6a40              LDR      r0,[r0,#0x24]
000018  0940              LSRS     r0,r0,#5
00001a  0140              LSLS     r0,r0,#5
00001c  301e              ADDS     r0,r0,#0x1e
00001e  4929              LDR      r1,|L4.196|
000020  6248              STR      r0,[r1,#0x24]
;;;138    	                       ADC_SIGCTL_ADCMOD_POWER|
;;;139    						   ADC_SIGCTL_IBGEN_POWER|
;;;140    	                       ADC_SIGCTL_BUFADC_POWER|
;;;141    	                       ADC_SIGCTL_BUFPGA_POWER);
;;;142    	
;;;143    	/* PGA Setting */
;;;144    	ADC_MUTEON_PGA(ADC, ADC_SIGCTL_MUTE_PGA);
000022  4608              MOV      r0,r1
000024  6a40              LDR      r0,[r0,#0x24]
000026  2120              MOVS     r1,#0x20
000028  4308              ORRS     r0,r0,r1
00002a  4926              LDR      r1,|L4.196|
00002c  6248              STR      r0,[r1,#0x24]
;;;145    	ADC_MUTEOFF_PGA(ADC, ADC_SIGCTL_MUTE_IPBOOST);
00002e  4608              MOV      r0,r1
000030  6a40              LDR      r0,[r0,#0x24]
000032  2140              MOVS     r1,#0x40
000034  4388              BICS     r0,r0,r1
000036  4923              LDR      r1,|L4.196|
000038  6248              STR      r0,[r1,#0x24]
;;;146    	ADC_ENABLE_PGA(ADC, ADC_PGACTL_REFSEL_VMID, ADC_PGACTL_BOSST_GAIN_26DB);
00003a  4608              MOV      r0,r1
00003c  6a00              LDR      r0,[r0,#0x20]
00003e  2109              MOVS     r1,#9
000040  4388              BICS     r0,r0,r1
000042  210e              MOVS     r1,#0xe
000044  4308              ORRS     r0,r0,r1
000046  491f              LDR      r1,|L4.196|
000048  6208              STR      r0,[r1,#0x20]
;;;147    	ADC_SetPGAGaindB(ADC_PGA_GAIN); 
00004a  204b              MOVS     r0,#0x4b
00004c  00c0              LSLS     r0,r0,#3
00004e  f7fffffe          BL       ADC_SetPGAGaindB
;;;148    	
;;;149    	/* MIC circuit configuration */
;;;150    	ADC_ENABLE_VMID(ADC, ADC_VMID_HIRES_DISCONNECT, ADC_VMID_LORES_CONNECT);
000052  2004              MOVS     r0,#4
000054  491b              LDR      r1,|L4.196|
000056  3940              SUBS     r1,r1,#0x40
000058  6008              STR      r0,[r1,#0]
;;;151    	ADC_EnableMICBias(ADC_MICBSEL_90_VCCA);
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       ADC_EnableMICBias
;;;152    	ADC_SetAMUX(ADC_MUXCTL_MIC_PATH, ADC_MUXCTL_POSINSEL_NONE, ADC_MUXCTL_NEGINSEL_NONE);
000060  2200              MOVS     r2,#0
000062  4611              MOV      r1,r2
000064  2001              MOVS     r0,#1
000066  0340              LSLS     r0,r0,#13
000068  f7fffffe          BL       ADC_SetAMUX
;;;153    	
;;;154    	/* Open ADC block */
;;;155    	ADC_Open();
00006c  f7fffffe          BL       ADC_Open
;;;156    	
;;;157    	ADC_SET_FIFOINTLEVEL(ADC, 7);
000070  4815              LDR      r0,|L4.200|
000072  6900              LDR      r0,[r0,#0x10]
000074  08c0              LSRS     r0,r0,#3
000076  00c0              LSLS     r0,r0,#3
000078  1dc0              ADDS     r0,r0,#7
00007a  4913              LDR      r1,|L4.200|
00007c  6108              STR      r0,[r1,#0x10]
;;;158    	ADC_MUTEOFF_PGA(ADC, ADC_SIGCTL_MUTE_PGA);
00007e  4811              LDR      r0,|L4.196|
000080  6a40              LDR      r0,[r0,#0x24]
000082  2120              MOVS     r1,#0x20
000084  4388              BICS     r0,r0,r1
000086  490f              LDR      r1,|L4.196|
000088  6248              STR      r0,[r1,#0x24]
;;;159    
;;;160    	BIQFilter_Setting();
00008a  f7fffffe          BL       BIQFilter_Setting
;;;161    
;;;162    	ADC_STOP_CONV(ADC);
00008e  2001              MOVS     r0,#1
000090  43c0              MVNS     r0,r0
000092  490d              LDR      r1,|L4.200|
000094  6048              STR      r0,[r1,#4]
;;;163    	
;;;164    	
;;;165    #if (ADC_PDMA_ENABLE)
;;;166    	ADC_ENABLE_PDMA(ADC);
000096  4608              MOV      r0,r1
000098  6940              LDR      r0,[r0,#0x14]
00009a  2101              MOVS     r1,#1
00009c  4308              ORRS     r0,r0,r1
00009e  490a              LDR      r1,|L4.200|
0000a0  6148              STR      r0,[r1,#0x14]
0000a2  4608              MOV      r0,r1
0000a4  6900              LDR      r0,[r0,#0x10]
0000a6  0040              LSLS     r0,r0,#1
0000a8  0840              LSRS     r0,r0,#1
0000aa  6108              STR      r0,[r1,#0x10]
;;;167    	PdmaCtrl_Open(ADC_PDMA_CH, PDMA_ADC_SEL);
0000ac  4907              LDR      r1,|L4.204|
0000ae  2000              MOVS     r0,#0
0000b0  f7fffffe          BL       PdmaCtrl_Open
;;;168    #else
;;;169    	NVIC_ClearPendingIRQ(ADC_IRQn);		// Clear pending ADC interrupt although disable interrupt during doing pop sound canceling	
;;;170    	NVIC_EnableIRQ(ADC_IRQn);	
;;;171    #endif
;;;172    
;;;173    }
0000b4  bd10              POP      {r4,pc}
;;;174    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L4.184|
                          DCD      0x4003fe1c
                  |L4.188|
                          DCD      0x4000001e
                  |L4.192|
                          DCD      0x0400001c
                  |L4.196|
                          DCD      0x40080040
                  |L4.200|
                          DCD      0x400e0000
                  |L4.204|
                          DCD      0x06100224

                          AREA ||i.MIC_Start||, CODE, READONLY, ALIGN=2

                  MIC_Start PROC
;;;182    //---------------------------------------------------------------------------
;;;183    void MIC_Start(void)
000000  2001              MOVS     r0,#1
;;;184    {
;;;185    	ADC_START_CONV(ADC);							// start convert
000002  4901              LDR      r1,|L5.8|
000004  6048              STR      r0,[r1,#4]
;;;186    	
;;;187    #if (ADC_PDMA_ENABLE == 0)
;;;188    	ADC_EnableInt(ADC_FIFO_INT);
;;;189    #endif
;;;190    }
000006  4770              BX       lr
;;;191    
                          ENDP

                  |L5.8|
                          DCD      0x400e0000

                          AREA ||i.MIC_Stop||, CODE, READONLY, ALIGN=2

                  MIC_Stop PROC
;;;199    //---------------------------------------------------------------------------
;;;200    void MIC_Stop(void)
000000  2001              MOVS     r0,#1
;;;201    {
;;;202    #if (ADC_PDMA_ENABLE == 0)
;;;203    	ADC_DisableInt(ADC_FIFO_INT);
;;;204    #endif
;;;205    	
;;;206    	ADC_STOP_CONV(ADC);
000002  43c0              MVNS     r0,r0
000004  4901              LDR      r1,|L6.12|
000006  6048              STR      r0,[r1,#4]
;;;207    }
000008  4770              BX       lr
;;;208    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x400e0000

                          AREA ||i.SPK_ChangeSR||, CODE, READONLY, ALIGN=2

                  SPK_ChangeSR PROC
;;;247    //---------------------------------------------------------------------------
;;;248    void SPK_ChangeSR(
000000  b570              PUSH     {r4-r6,lr}
;;;249    	UINT32 u32Channel,
;;;250    	UINT32 u32SampleRate
;;;251    )
;;;252    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;253    #if (APU_UPSAMPLE_ORDER!=0)
;;;254    	u32SampleRate <<= APU_UPSAMPLE_ORDER;
;;;255    #endif
;;;256    
;;;257    #if (APU_FILTER_ENABLE == 2)
;;;258    	BIQ_SET_DPWMPATH(BIQ, SystemCoreClock/u32SampleRate, 3);//up x4
000006  4621              MOV      r1,r4
000008  4809              LDR      r0,|L7.48|
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f7fffffe          BL       __aeabi_uidivmod
000010  04c0              LSLS     r0,r0,#19
000012  08c0              LSRS     r0,r0,#3
000014  2132              MOVS     r1,#0x32
000016  4308              ORRS     r0,r0,r1
000018  4906              LDR      r1,|L7.52|
00001a  6809              LDR      r1,[r1,#0]
00001c  4a06              LDR      r2,|L7.56|
00001e  4011              ANDS     r1,r1,r2
000020  4308              ORRS     r0,r0,r1
000022  4904              LDR      r1,|L7.52|
000024  6008              STR      r0,[r1,#0]
;;;259    #endif	
;;;260    	
;;;261    	DPWM_SetSampleRate(u32SampleRate); //Set sample rate
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       DPWM_SetSampleRate
;;;262    }
00002c  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      SystemCoreClock
                  |L7.52|
                          DCD      0x400b0040
                  |L7.56|
                          DCD      0xe000ff8f

                          AREA ||i.SPK_Close||, CODE, READONLY, ALIGN=2

                  SPK_Close PROC
;;;357    //---------------------------------------------------------------------------
;;;358    void SPK_Close(void)
000000  b510              PUSH     {r4,lr}
;;;359    {
;;;360    
;;;361    #if (APU_PDMA_ENABLE)
;;;362    	DPWM_DISABLE_PDMA(DPWM);
000002  2000              MOVS     r0,#0
000004  490e              LDR      r1,|L8.64|
000006  6088              STR      r0,[r1,#8]
;;;363    	PdmaCtrl_Stop(APU_PDMA_CH);
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       PdmaCtrl_Stop
;;;364    	PdmaCtrl_Close(APU_PDMA_CH);
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       PdmaCtrl_Close
;;;365    #endif
;;;366    	
;;;367    	CLK_DisableModuleClock(DPWM_MODULE);
000014  480b              LDR      r0,|L8.68|
000016  f7fffffe          BL       CLK_DisableModuleClock
;;;368    	
;;;369    	SYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA12MFP_Msk) );
00001a  2005              MOVS     r0,#5
00001c  0700              LSLS     r0,r0,#28
00001e  6b80              LDR      r0,[r0,#0x38]
000020  2103              MOVS     r1,#3
000022  0609              LSLS     r1,r1,#24
000024  4388              BICS     r0,r0,r1
000026  2105              MOVS     r1,#5
000028  0709              LSLS     r1,r1,#28
00002a  6388              STR      r0,[r1,#0x38]
;;;370    	SYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA13MFP_Msk) );
00002c  4608              MOV      r0,r1
00002e  6b80              LDR      r0,[r0,#0x38]
000030  2103              MOVS     r1,#3
000032  0689              LSLS     r1,r1,#26
000034  4388              BICS     r0,r0,r1
000036  2105              MOVS     r1,#5
000038  0709              LSLS     r1,r1,#28
00003a  6388              STR      r0,[r1,#0x38]
;;;371    }
00003c  bd10              POP      {r4,pc}
;;;372    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0x40070000
                  |L8.68|
                          DCD      0x5240000d

                          AREA ||i.SPK_Open||, CODE, READONLY, ALIGN=2

                  SPK_Open PROC
;;;272    //---------------------------------------------------------------------------
;;;273    void SPK_Open(void)
000000  b510              PUSH     {r4,lr}
;;;274    {
;;;275    	/* Reset IP */
;;;276    	CLK_EnableModuleClock(DPWM_MODULE);
000002  4819              LDR      r0,|L9.104|
000004  f7fffffe          BL       CLK_EnableModuleClock
;;;277    	CLK_SetModuleClock(DPWM_MODULE, APU_CLK_SOURCE, MODULE_NoMsk);
000008  2200              MOVS     r2,#0
00000a  2110              MOVS     r1,#0x10
00000c  4816              LDR      r0,|L9.104|
00000e  f7fffffe          BL       CLK_SetModuleClock
;;;278    	SYS_ResetModule(DPWM_RST);
000012  4816              LDR      r0,|L9.108|
000014  f7fffffe          BL       SYS_ResetModule
;;;279    	
;;;280    	DPWM_Open();	 
000018  f7fffffe          BL       DPWM_Open
;;;281    	
;;;282    	DPWM_SET_MODFREQUENCY(DPWM,DPWM_CTL_MODUFRQ0);//Set FREQ_0
00001c  4814              LDR      r0,|L9.112|
00001e  6800              LDR      r0,[r0,#0]
000020  08c0              LSRS     r0,r0,#3
000022  00c0              LSLS     r0,r0,#3
000024  4912              LDR      r1,|L9.112|
000026  6008              STR      r0,[r1,#0]
;;;283    	
;;;284    	BIQFilter_Setting();
000028  f7fffffe          BL       BIQFilter_Setting
;;;285    
;;;286    #if (APU_PDMA_ENABLE)
;;;287    	DPWM_ENABLE_PDMA(DPWM);
00002c  2001              MOVS     r0,#1
00002e  4910              LDR      r1,|L9.112|
000030  6088              STR      r0,[r1,#8]
;;;288    	PdmaCtrl_Open(APU_PDMA_CH, PDMA_APU_SEL);
000032  4910              LDR      r1,|L9.116|
000034  f7fffffe          BL       PdmaCtrl_Open
;;;289    #endif
;;;290    	
;;;291    	 /*---------------------------------------------------------------------------------------------------------*/
;;;292        /* Init I/O Multi-function                                                                                 */
;;;293        /*---------------------------------------------------------------------------------------------------------*/
;;;294        /* Set GPG multi-function pins for SPK+ and SPK- */
;;;295    	SYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA12MFP_Msk) ) | SYS_GPA_MFP_PA12MFP_SPKP;
000038  2005              MOVS     r0,#5
00003a  0700              LSLS     r0,r0,#28
00003c  6b80              LDR      r0,[r0,#0x38]
00003e  2103              MOVS     r1,#3
000040  0609              LSLS     r1,r1,#24
000042  4388              BICS     r0,r0,r1
000044  2101              MOVS     r1,#1
000046  0649              LSLS     r1,r1,#25
000048  1840              ADDS     r0,r0,r1
00004a  2105              MOVS     r1,#5
00004c  0709              LSLS     r1,r1,#28
00004e  6388              STR      r0,[r1,#0x38]
;;;296    	SYS->GPA_MFP  = (SYS->GPA_MFP & (~SYS_GPA_MFP_PA13MFP_Msk) ) | SYS_GPA_MFP_PA13MFP_SPKM;
000050  4608              MOV      r0,r1
000052  6b80              LDR      r0,[r0,#0x38]
000054  2103              MOVS     r1,#3
000056  0689              LSLS     r1,r1,#26
000058  4388              BICS     r0,r0,r1
00005a  2101              MOVS     r1,#1
00005c  06c9              LSLS     r1,r1,#27
00005e  1840              ADDS     r0,r0,r1
000060  2105              MOVS     r1,#5
000062  0709              LSLS     r1,r1,#28
000064  6388              STR      r0,[r1,#0x38]
;;;297    
;;;298    	//SPK_Pause(0);
;;;299    }
000066  bd10              POP      {r4,pc}
;;;300    
                          ENDP

                  |L9.104|
                          DCD      0x5240000d
                  |L9.108|
                          DCD      0x0400000d
                  |L9.112|
                          DCD      0x40070000
                  |L9.116|
                          DCD      0x07100288

                          AREA ||i.SPK_Pause||, CODE, READONLY, ALIGN=1

                  SPK_Pause PROC
;;;331    //---------------------------------------------------------------------------
;;;332    void SPK_Pause(UINT32 u32Channel)
000000  4770              BX       lr
;;;333    {
;;;334    
;;;335    }
;;;336    
                          ENDP


                          AREA ||i.SPK_Resume||, CODE, READONLY, ALIGN=1

                  SPK_Resume PROC
;;;344    //---------------------------------------------------------------------------
;;;345    void SPK_Resume(UINT32 u32Channel)
000000  4770              BX       lr
;;;346    {
;;;347    
;;;348    }
;;;349    
                          ENDP


                          AREA ||i.SPK_Start||, CODE, READONLY, ALIGN=2

                  SPK_Start PROC
;;;300    
;;;301    void SPK_Start(void)
000000  2000              MOVS     r0,#0
;;;302    {
;;;303    	UINT8 u8Count;
;;;304    	for( u8Count = 0; u8Count < 16; u8Count ++)
000002  e004              B        |L12.14|
                  |L12.4|
;;;305    		DPWM->DATA =0;	//Flush 0 (VIRTUAL_BUFF_SIZE samples) to DPWM FIFO 
000004  2100              MOVS     r1,#0
000006  4a06              LDR      r2,|L12.32|
000008  60d1              STR      r1,[r2,#0xc]
00000a  1c41              ADDS     r1,r0,#1              ;304
00000c  b2c8              UXTB     r0,r1                 ;304
                  |L12.14|
00000e  2810              CMP      r0,#0x10              ;304
000010  dbf8              BLT      |L12.4|
;;;306    
;;;307    	DPWM_START_PLAY(DPWM);
000012  4903              LDR      r1,|L12.32|
000014  6809              LDR      r1,[r1,#0]
000016  2240              MOVS     r2,#0x40
000018  4311              ORRS     r1,r1,r2
00001a  4a01              LDR      r2,|L12.32|
00001c  6011              STR      r1,[r2,#0]
;;;308    }
00001e  4770              BX       lr
;;;309    
                          ENDP

                  |L12.32|
                          DCD      0x40070000

                          AREA ||i.SPK_Stop||, CODE, READONLY, ALIGN=2

                  SPK_Stop PROC
;;;317    //---------------------------------------------------------------------------
;;;318    void SPK_Stop(void)
000000  4803              LDR      r0,|L13.16|
;;;319    {
;;;320    	DPWM_STOP_PLAY(DPWM);
000002  6800              LDR      r0,[r0,#0]
000004  2140              MOVS     r1,#0x40
000006  4388              BICS     r0,r0,r1
000008  4901              LDR      r1,|L13.16|
00000a  6008              STR      r0,[r1,#0]
;;;321    }
00000c  4770              BX       lr
;;;322    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40070000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  g_u32BiqCoeff
                          DCD      0x00008676
                          DCD      0x00010cec
                          DCD      0x00008676
                          DCD      0x00007ef6
                          DCD      0x00009ade
                          DCD      0x0000642e
                          DCD      0x0000c85c
                          DCD      0x0000642e
                          DCD      0x00005e9a
                          DCD      0x00003220
                          DCD      0x00005754
                          DCD      0x0000aea8
                          DCD      0x00005754
                          DCD      0x00005276
                          DCD      0x00000ada
00003c  00400080          DCW      0x0040,0x0080
000040  00c00180          DCW      0x00c0,0x0180

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\Framework\\src\\MicSpk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_MicSpk_c_2ef9a6ae____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_MicSpk_c_2ef9a6ae____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_MicSpk_c_2ef9a6ae____REVSH|
#line 132
|__asm___8_MicSpk_c_2ef9a6ae____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
