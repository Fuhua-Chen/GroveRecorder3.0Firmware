; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\keypad.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\keypad.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\keypad.crf ..\..\..\..\Library\IO\src\Keypad.c]
                          THUMB

                          AREA ||i.Keypad_GetTouchEnablePin||, CODE, READONLY, ALIGN=2

                  Keypad_GetTouchEnablePin PROC
;;;497      */
;;;498    void Keypad_GetTouchEnablePin( void )
000000  b530              PUSH     {r4,r5,lr}
;;;499    {
;;;500    	do{
;;;501    		if( (s_sKeypadTouchCtrlHandler.u8ScanIndex++) >= KEYPAD_TOUCH_MAX_KEY_COUNT )
000002  4808              LDR      r0,|L1.36|
000004  2500              MOVS     r5,#0                 ;499
;;;502    			s_sKeypadTouchCtrlHandler.u8ScanIndex = 0;			
;;;503    	}while((s_sKeypadTouchCtrlHandler.u16EnablePin&(1<<s_sKeypadTouchCtrlHandler.u8ScanIndex)) == 0);
000006  8802              LDRH     r2,[r0,#0]
000008  2401              MOVS     r4,#1
                  |L1.10|
00000a  7881              LDRB     r1,[r0,#2]            ;501  ; s_sKeypadTouchCtrlHandler
00000c  1c4b              ADDS     r3,r1,#1              ;501
00000e  7083              STRB     r3,[r0,#2]            ;501
000010  2908              CMP      r1,#8                 ;501
000012  d300              BCC      |L1.22|
000014  7085              STRB     r5,[r0,#2]            ;502
                  |L1.22|
000016  7883              LDRB     r3,[r0,#2]  ; s_sKeypadTouchCtrlHandler
000018  4621              MOV      r1,r4
00001a  4099              LSLS     r1,r1,r3
00001c  420a              TST      r2,r1
00001e  d0f4              BEQ      |L1.10|
;;;504    }
000020  bd30              POP      {r4,r5,pc}
;;;505    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      ||.bss||+0x74

                          AREA ||i.Keypad_InitKey||, CODE, READONLY, ALIGN=2

                  Keypad_InitKey PROC
;;;153      */
;;;154    void Keypad_InitKey(uint16_t u16InPinMaskA,uint16_t u16InPinMaskB,
000000  b5f0              PUSH     {r4-r7,lr}
;;;155                        uint16_t u16OutPinMaskA,uint16_t u16OutPinMaskB,
;;;156                        const S_KEYPAD_KEY_HANDLER* psKeyHandler,uint16_t* pu16KeyPinValueBuf)
;;;157    {
;;;158    	#if( __CHIP_SERIES__ == __ISD9100_SERIES__ || __CHIP_SERIES__ == __ISD9300_SERIES__ )
;;;159    	// Open GPIOA & GPIOB pin's debounce.
;;;160    	GPIO_ENABLE_DEBOUNCE( PA, u16InPinMaskA );
000002  4d16              LDR      r5,|L2.92|
000004  9f05              LDR      r7,[sp,#0x14]
000006  696c              LDR      r4,[r5,#0x14]
000008  4304              ORRS     r4,r4,r0
00000a  616c              STR      r4,[r5,#0x14]
;;;161    	GPIO_ENABLE_DEBOUNCE( PB, u16InPinMaskB );
00000c  4e13              LDR      r6,|L2.92|
00000e  3640              ADDS     r6,r6,#0x40
000010  6974              LDR      r4,[r6,#0x14]
000012  430c              ORRS     r4,r4,r1
000014  6174              STR      r4,[r6,#0x14]
;;;162    	#endif
;;;163    	
;;;164    	s_sKeypadKeyCtrlHandler.u16InPinMaskA = u16InPinMaskA;
000016  4c12              LDR      r4,|L2.96|
000018  8220              STRH     r0,[r4,#0x10]
;;;165    	s_sKeypadKeyCtrlHandler.u16InPinMaskB = u16InPinMaskB;
00001a  8261              STRH     r1,[r4,#0x12]
;;;166    	s_sKeypadKeyCtrlHandler.u16OutPinMaskA = u16OutPinMaskA;
00001c  82a2              STRH     r2,[r4,#0x14]
;;;167    	s_sKeypadKeyCtrlHandler.u16OutPinMaskB = u16OutPinMaskB;
00001e  82e3              STRH     r3,[r4,#0x16]
;;;168    	s_sKeypadKeyCtrlHandler.psKeyHandler = (S_KEYPAD_KEY_HANDLER*)psKeyHandler;
;;;169    	s_sKeypadKeyCtrlHandler.pu16PinValueArray = pu16KeyPinValueBuf;
000020  60a7              STR      r7,[r4,#8]  ; s_sKeypadKeyCtrlHandler
000022  9906              LDR      r1,[sp,#0x18]
;;;170    	
;;;171    	// Get default pin value
;;;172    	s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx = 0;
000024  60e1              STR      r1,[r4,#0xc]  ; s_sKeypadKeyCtrlHandler
000026  2100              MOVS     r1,#0
000028  7761              STRB     r1,[r4,#0x1d]
;;;173    	Keypad_InitKeyMatrixPort(PA,s_sKeypadKeyCtrlHandler.u16InPinMaskA,PA,s_sKeypadKeyCtrlHandler.u16OutPinMaskA);
00002a  4613              MOV      r3,r2
00002c  462a              MOV      r2,r5
00002e  4601              MOV      r1,r0
000030  4610              MOV      r0,r2
000032  f7fffffe          BL       Keypad_InitKeyMatrixPort
;;;174    	Keypad_InitKeyMatrixPort(PA,s_sKeypadKeyCtrlHandler.u16InPinMaskA,PB,s_sKeypadKeyCtrlHandler.u16OutPinMaskB);
000036  8ae3              LDRH     r3,[r4,#0x16]  ; s_sKeypadKeyCtrlHandler
000038  8a21              LDRH     r1,[r4,#0x10]  ; s_sKeypadKeyCtrlHandler
00003a  4632              MOV      r2,r6
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       Keypad_InitKeyMatrixPort
;;;175    	Keypad_InitKeyMatrixPort(PB,s_sKeypadKeyCtrlHandler.u16InPinMaskB,PA,s_sKeypadKeyCtrlHandler.u16OutPinMaskA);
000042  8aa3              LDRH     r3,[r4,#0x14]  ; s_sKeypadKeyCtrlHandler
000044  8a61              LDRH     r1,[r4,#0x12]  ; s_sKeypadKeyCtrlHandler
000046  462a              MOV      r2,r5
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       Keypad_InitKeyMatrixPort
;;;176    	Keypad_InitKeyMatrixPort(PB,s_sKeypadKeyCtrlHandler.u16InPinMaskB,PB,s_sKeypadKeyCtrlHandler.u16OutPinMaskB);
00004e  4632              MOV      r2,r6
000050  8ae3              LDRH     r3,[r4,#0x16]  ; s_sKeypadKeyCtrlHandler
000052  8a61              LDRH     r1,[r4,#0x12]  ; s_sKeypadKeyCtrlHandler
000054  4610              MOV      r0,r2
000056  f7fffffe          BL       Keypad_InitKeyMatrixPort
;;;177    }
00005a  bdf0              POP      {r4-r7,pc}
;;;178    
                          ENDP

                  |L2.92|
                          DCD      0x50004000
                  |L2.96|
                          DCD      ||.bss||

                          AREA ||i.Keypad_InitKeyMatrixPort||, CODE, READONLY, ALIGN=2

                  Keypad_InitKeyMatrixPort PROC
;;;120      */
;;;121    void Keypad_InitKeyMatrixPort(GPIO_T* psInGPIO,uint16_t u16InKeyPinMask,GPIO_T* psOutGPIO,uint16_t u16OutKeyPinMask)
000000  b5f0              PUSH     {r4-r7,lr}
;;;122    {
000002  4686              MOV      lr,r0
;;;123    	uint16_t u16Mask = 1;
000004  2401              MOVS     r4,#1
000006  468c              MOV      r12,r1                ;122
;;;124    
;;;125    	if (u16InKeyPinMask && u16OutKeyPinMask)
000008  0008              MOVS     r0,r1
00000a  d018              BEQ      |L3.62|
00000c  2b00              CMP      r3,#0
00000e  d016              BEQ      |L3.62|
;;;126    	{
;;;127    		while( u16Mask > 0 )
;;;128    		{
;;;129    			if (u16OutKeyPinMask & u16Mask)
;;;130    			{			
;;;131    				// Set tested output port pin to 0, keep other output pin to 1, keep other pins as orignal
;;;132    				GPIO_SET_OUT_DATA(psOutGPIO,(GPIO_GET_OUT_DATA(psOutGPIO)&~u16Mask));
;;;133    				// Get input pins value of the tested output pin
;;;134    				s_sKeypadKeyCtrlHandler.pu16PinValueArray[s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx++] = GPIO_GET_IN_DATA(psInGPIO)&u16InKeyPinMask;
000010  490b              LDR      r1,|L3.64|
000012  68ce              LDR      r6,[r1,#0xc]
                  |L3.20|
000014  4223              TST      r3,r4                 ;129
000016  d00e              BEQ      |L3.54|
000018  6895              LDR      r5,[r2,#8]            ;132
00001a  43a5              BICS     r5,r5,r4              ;132
00001c  6095              STR      r5,[r2,#8]            ;132
00001e  4670              MOV      r0,lr
000020  6907              LDR      r7,[r0,#0x10]
000022  4660              MOV      r0,r12
000024  7f4d              LDRB     r5,[r1,#0x1d]  ; s_sKeypadKeyCtrlHandler
000026  4007              ANDS     r7,r7,r0
000028  0068              LSLS     r0,r5,#1
00002a  5237              STRH     r7,[r6,r0]
00002c  1c6d              ADDS     r5,r5,#1
00002e  774d              STRB     r5,[r1,#0x1d]
;;;135    				// Reset output pin value to high, but keep other pin as original
;;;136    				GPIO_SET_OUT_DATA(psOutGPIO,(GPIO_GET_OUT_DATA(psOutGPIO)|u16Mask));
000030  6890              LDR      r0,[r2,#8]
000032  4320              ORRS     r0,r0,r4
000034  6090              STR      r0,[r2,#8]
                  |L3.54|
;;;137    			}
;;;138    			u16Mask <<= 1;
000036  0060              LSLS     r0,r4,#1
000038  0404              LSLS     r4,r0,#16
00003a  0c24              LSRS     r4,r4,#16
00003c  d1ea              BNE      |L3.20|
                  |L3.62|
;;;139    		}
;;;140    	}
;;;141    }
00003e  bdf0              POP      {r4-r7,pc}
;;;142    
                          ENDP

                  |L3.64|
                          DCD      ||.bss||

                          AREA ||i.Keypad_InitKeypad||, CODE, READONLY, ALIGN=2

                  Keypad_InitKeypad PROC
;;;101      */
;;;102    void Keypad_InitKeypad( uint16_t u16DebounceCount, uint16_t u16PressingCount )
000000  4b03              LDR      r3,|L4.16|
;;;103    {
;;;104    	// Config debounce variable.
;;;105    	#if(  __CHIP_SERIES__ == __ISD9100_SERIES__ || __CHIP_SERIES__ == __ISD9300_SERIES__ )
;;;106    	GPIO_SET_DEBOUNCE_TIME(GPIO_DBCTL_DBCLKSRC_IRC10K, 6);
000002  2236              MOVS     r2,#0x36
000004  601a              STR      r2,[r3,#0]
;;;107    	#endif
;;;108    	
;;;109    	g_u16DebounceCount = u16DebounceCount;
000006  4a03              LDR      r2,|L4.20|
000008  80d0              STRH     r0,[r2,#6]
;;;110    	g_u16PressingCount = u16PressingCount;				
00000a  8111              STRH     r1,[r2,#8]
;;;111    }
00000c  4770              BX       lr
;;;112    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x50004180
                  |L4.20|
                          DCD      ||.data||

                          AREA ||i.Keypad_InitTgr||, CODE, READONLY, ALIGN=2

                  Keypad_InitTgr PROC
;;;347      */
;;;348    void Keypad_InitTgr(uint16_t u16PinMaskA,uint16_t u16PinMaskB,const S_KEYPAD_TGR_HANDLER* psTgrHandler)
000000  b530              PUSH     {r4,r5,lr}
;;;349    {
;;;350    	#if( __CHIP_SERIES__ == __ISD9100_SERIES__ || __CHIP_SERIES__ == __ISD9300_SERIES__ )
;;;351    	// Open GPIOA & GPIOB pin's debounce.
;;;352    	GPIO_ENABLE_DEBOUNCE( PA, u16PinMaskA );
000002  4c0a              LDR      r4,|L5.44|
000004  6963              LDR      r3,[r4,#0x14]
000006  4303              ORRS     r3,r3,r0
000008  6163              STR      r3,[r4,#0x14]
;;;353    	GPIO_ENABLE_DEBOUNCE( PB, u16PinMaskB );
00000a  4d08              LDR      r5,|L5.44|
00000c  3540              ADDS     r5,r5,#0x40
00000e  696b              LDR      r3,[r5,#0x14]
000010  430b              ORRS     r3,r3,r1
000012  616b              STR      r3,[r5,#0x14]
;;;354    	#endif
;;;355    	
;;;356    	s_sKeypadTgrCtrlHandler.u16PinMaskA = u16PinMaskA;
000014  4b06              LDR      r3,|L5.48|
000016  8118              STRH     r0,[r3,#8]
;;;357    	s_sKeypadTgrCtrlHandler.u16PinMaskB = u16PinMaskB;
000018  8159              STRH     r1,[r3,#0xa]
;;;358    	s_sKeypadTgrCtrlHandler.u16PinValueA = GPIO_GET_IN_DATA(PA)&u16PinMaskA;
00001a  6924              LDR      r4,[r4,#0x10]
00001c  4004              ANDS     r4,r4,r0
00001e  819c              STRH     r4,[r3,#0xc]
;;;359    	s_sKeypadTgrCtrlHandler.u16PinValueB = GPIO_GET_IN_DATA(PB)&u16PinMaskB;
000020  6928              LDR      r0,[r5,#0x10]
000022  4008              ANDS     r0,r0,r1
000024  81d8              STRH     r0,[r3,#0xe]
;;;360    	s_sKeypadTgrCtrlHandler.psTgrHandler = (S_KEYPAD_TGR_HANDLER*)psTgrHandler;
000026  605a              STR      r2,[r3,#4]  ; s_sKeypadTgrCtrlHandler
;;;361    }
000028  bd30              POP      {r4,r5,pc}
;;;362    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x50004000
                  |L5.48|
                          DCD      ||.bss||+0x20

                          AREA ||i.Keypad_InitTouch||, CODE, READONLY, ALIGN=2

                  Keypad_InitTouch PROC
;;;650      */
;;;651    void Keypad_InitTouch( uint16_t u16Pin, const S_KEYPAD_TOUCH_THRESHOLD* psThreshold, const S_KEYPAD_TOUCH_HANDLER* psTouchHandler, uint16_t* pu16TouchPinValueBuf )
000000  b570              PUSH     {r4-r6,lr}
;;;652    {
;;;653    	memset( &s_sKeypadTouchCtrlHandler, '\0', sizeof(S_KEYPAD_TOUCH_HANDLER) );
000002  4c14              LDR      r4,|L6.84|
000004  2500              MOVS     r5,#0
000006  6365              STR      r5,[r4,#0x34]  ; s_sKeypadTouchCtrlHandler
000008  63a5              STR      r5,[r4,#0x38]  ; s_sKeypadTouchCtrlHandler
;;;654    	// config enable pin.
;;;655    	if( (s_sKeypadTouchCtrlHandler.u16EnablePin = u16Pin) == 0 )
00000a  63e5              STR      r5,[r4,#0x3c]  ; s_sKeypadTouchCtrlHandler
00000c  3474              ADDS     r4,r4,#0x74
00000e  8020              STRH     r0,[r4,#0]
000010  2800              CMP      r0,#0
000012  d01d              BEQ      |L6.80|
;;;656    		return;
;;;657    	// config touch key handler.
;;;658    	s_sKeypadTouchCtrlHandler.psTouchHandler = (S_KEYPAD_TOUCH_HANDLER*)psTouchHandler;
000014  4620              MOV      r0,r4
000016  3840              SUBS     r0,r0,#0x40
;;;659    	// config touch key pressing counter.
;;;660    	s_sKeypadTouchCtrlHandler.pu16PinValueArray = pu16TouchPinValueBuf;
;;;661    	// config touch threshold.
;;;662    	s_sKeypadTouchCtrlHandler.psThreshold = (S_KEYPAD_TOUCH_THRESHOLD*)psThreshold;
;;;663    	// initiate scan index for first count.
;;;664    	s_sKeypadTouchCtrlHandler.u8ScanIndex = KEYPAD_TOUCH_MAX_KEY_COUNT;
000018  6383              STR      r3,[r0,#0x38]  ; s_sKeypadTouchCtrlHandler
00001a  6302              STR      r2,[r0,#0x30]  ; s_sKeypadTouchCtrlHandler
00001c  6341              STR      r1,[r0,#0x34]  ; s_sKeypadTouchCtrlHandler
00001e  2008              MOVS     r0,#8
000020  70a0              STRB     r0,[r4,#2]
;;;665    	// process to get touch next pin.
;;;666    	Keypad_GetTouchEnablePin();
000022  f7fffffe          BL       Keypad_GetTouchEnablePin
;;;667    	// depend on chip, ISD9100 analog compare gpio (GPB0~GPB7) = 8
;;;668    	GPIO_SetMode( PB, s_sKeypadTouchCtrlHandler.u16EnablePin, GPIO_MODE_INPUT ); 
000026  8821              LDRH     r1,[r4,#0]  ; s_sKeypadTouchCtrlHandler
000028  2200              MOVS     r2,#0
00002a  480b              LDR      r0,|L6.88|
00002c  f7fffffe          BL       GPIO_SetMode
;;;669    	// enable gpio current source
;;;670    	CAPSENSE_ENABLE_CURRENT_SOURCE_PIN(	s_sKeypadTouchCtrlHandler.u16EnablePin );
000030  480a              LDR      r0,|L6.92|
000032  6881              LDR      r1,[r0,#8]
000034  8822              LDRH     r2,[r4,#0]  ; s_sKeypadTouchCtrlHandler
000036  4311              ORRS     r1,r1,r2
000038  6081              STR      r1,[r0,#8]
;;;671    	// select source value for capture sense
;;;672    	CapSense_SelectCurrentSourceValue(CAPSENSE_CURCTL0_VALSEL_1000NA);
00003a  1580              ASRS     r0,r0,#22
00003c  f7fffffe          BL       CapSense_SelectCurrentSourceValue
;;;673    	// set control configuration(cycle count & low time)
;;;674        CapSense_SetCycleCounts( 4, CAPSENSE_CTRL_LOWTIME_8CYCLES );
000040  2102              MOVS     r1,#2
000042  2004              MOVS     r0,#4
000044  f7fffffe          BL       CapSense_SetCycleCounts
;;;675    	// calibration touch pad value
;;;676    	Keypad_TouchCalibration();
000048  f7fffffe          BL       Keypad_TouchCalibration
;;;677    	// reset counter & interrupt control for preper scanning
;;;678    	Keypad_TouchStartIRQ();
00004c  f7fffffe          BL       Keypad_TouchStartIRQ
                  |L6.80|
;;;679    }
000050  bd70              POP      {r4-r6,pc}
;;;680    
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      ||.bss||
                  |L6.88|
                          DCD      0x50004040
                  |L6.92|
                          DCD      0x40080000

                          AREA ||i.Keypad_KeyDecDebounceCounter||, CODE, READONLY, ALIGN=2

                  Keypad_KeyDecDebounceCounter PROC
;;;330      */
;;;331    uint8_t Keypad_KeyDecDebounceCounter(void)
000000  4807              LDR      r0,|L7.32|
;;;332    {
;;;333    	if (s_sKeypadKeyCtrlHandler.psInGPIO != NULL && s_u16KeyDebounceCounter>0 )
000002  6800              LDR      r0,[r0,#0]  ; s_sKeypadKeyCtrlHandler
000004  2800              CMP      r0,#0
000006  d008              BEQ      |L7.26|
000008  4806              LDR      r0,|L7.36|
00000a  8841              LDRH     r1,[r0,#2]  ; s_u16KeyDebounceCounter
00000c  2900              CMP      r1,#0
00000e  d004              BEQ      |L7.26|
;;;334    	{
;;;335    		s_u16KeyDebounceCounter--;
000010  8841              LDRH     r1,[r0,#2]  ; s_u16KeyDebounceCounter
000012  1e49              SUBS     r1,r1,#1
000014  8041              STRH     r1,[r0,#2]
;;;336    		return 1;
000016  2001              MOVS     r0,#1
;;;337    	}
;;;338    	return 0;
;;;339    }
000018  4770              BX       lr
                  |L7.26|
00001a  2000              MOVS     r0,#0                 ;338
00001c  4770              BX       lr
;;;340    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      ||.bss||
                  |L7.36|
                          DCD      ||.data||

                          AREA ||i.Keypad_KeyMapHandler||, CODE, READONLY, ALIGN=2

                  Keypad_KeyMapHandler PROC
;;;258      */
;;;259    uint8_t Keypad_KeyMapHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;260    {
;;;261    	uint8_t u8InPort = (s_sKeypadKeyCtrlHandler.psInGPIO == PA)? 0 : 1;
000002  4c1e              LDR      r4,|L8.124|
000004  481e              LDR      r0,|L8.128|
000006  6821              LDR      r1,[r4,#0]  ; s_sKeypadKeyCtrlHandler
000008  4281              CMP      r1,r0
00000a  d001              BEQ      |L8.16|
00000c  2601              MOVS     r6,#1
00000e  e000              B        |L8.18|
                  |L8.16|
000010  2600              MOVS     r6,#0
                  |L8.18|
;;;262    	uint8_t u8OutPort = (s_sKeypadKeyCtrlHandler.psOutGPIO == PA)? 0 : 1;
000012  6861              LDR      r1,[r4,#4]  ; s_sKeypadKeyCtrlHandler
000014  4281              CMP      r1,r0
000016  d001              BEQ      |L8.28|
000018  2501              MOVS     r5,#1
00001a  e000              B        |L8.30|
                  |L8.28|
00001c  2500              MOVS     r5,#0
                  |L8.30|
00001e  4917              LDR      r1,|L8.124|
;;;263    	uint8_t u8i;
;;;264    	
;;;265    	for (u8i=0 ; s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_pfnKey_Callback != NULL ; u8i++)
000020  2000              MOVS     r0,#0
;;;266    	{
;;;267    		if (s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_u8Port_I == u8InPort                                 &&
000022  6889              LDR      r1,[r1,#8]
000024  e024              B        |L8.112|
                  |L8.38|
000026  4613              MOV      r3,r2
000028  330c              ADDS     r3,r3,#0xc
00002a  5ccb              LDRB     r3,[r1,r3]
00002c  42b3              CMP      r3,r6
00002e  d11d              BNE      |L8.108|
;;;268    			s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_u16Pin_I == s_sKeypadKeyCtrlHandler.u16PinValueDiff  &&
000030  4613              MOV      r3,r2
000032  3308              ADDS     r3,r3,#8
000034  5acb              LDRH     r3,[r1,r3]
000036  8b67              LDRH     r7,[r4,#0x1a]  ; s_sKeypadKeyCtrlHandler
000038  42bb              CMP      r3,r7
00003a  d117              BNE      |L8.108|
;;;269    			s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_u8Port_O == u8OutPort                                &&
00003c  4613              MOV      r3,r2
00003e  330d              ADDS     r3,r3,#0xd
000040  5ccb              LDRB     r3,[r1,r3]
000042  42ab              CMP      r3,r5
000044  d112              BNE      |L8.108|
;;;270    			s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_u16Pin_O == s_sKeypadKeyCtrlHandler.u16OutPinDebMask &&
000046  4613              MOV      r3,r2
000048  330a              ADDS     r3,r3,#0xa
00004a  5acb              LDRH     r3,[r1,r3]
00004c  8b27              LDRH     r7,[r4,#0x18]  ; s_sKeypadKeyCtrlHandler
00004e  42bb              CMP      r3,r7
000050  d10c              BNE      |L8.108|
;;;271    			s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_u8Mode == s_sKeypadKeyCtrlHandler.u8KeyMode          )
000052  4613              MOV      r3,r2
000054  330e              ADDS     r3,r3,#0xe
000056  5ccb              LDRB     r3,[r1,r3]
000058  7f27              LDRB     r7,[r4,#0x1c]  ; s_sKeypadKeyCtrlHandler
00005a  42bb              CMP      r3,r7
00005c  d106              BNE      |L8.108|
;;;272    		{
;;;273    			s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_pfnKey_Callback(s_sKeypadKeyCtrlHandler.psKeyHandler[u8i].m_u32Param);
00005e  0100              LSLS     r0,r0,#4
000060  1d00              ADDS     r0,r0,#4
000062  5808              LDR      r0,[r1,r0]
000064  5889              LDR      r1,[r1,r2]
000066  4788              BLX      r1
;;;274    			return 0;
000068  2000              MOVS     r0,#0
;;;275    		}		
;;;276    	}
;;;277    	return 1;
;;;278    }
00006a  bdf8              POP      {r3-r7,pc}
                  |L8.108|
00006c  1c40              ADDS     r0,r0,#1
00006e  b2c0              UXTB     r0,r0                 ;265
                  |L8.112|
000070  0102              LSLS     r2,r0,#4              ;265
000072  588b              LDR      r3,[r1,r2]            ;265
000074  2b00              CMP      r3,#0                 ;265
000076  d1d6              BNE      |L8.38|
000078  2001              MOVS     r0,#1                 ;277
00007a  bdf8              POP      {r3-r7,pc}
;;;279    
                          ENDP

                  |L8.124|
                          DCD      ||.bss||
                  |L8.128|
                          DCD      0x50004000

                          AREA ||i.Keypad_KeyTouchPressCounter||, CODE, READONLY, ALIGN=2

                  Keypad_KeyTouchPressCounter PROC
;;;713      */
;;;714    void Keypad_KeyTouchPressCounter( void )
000000  b510              PUSH     {r4,lr}
;;;715    {
;;;716    	uint8_t u8i;
;;;717    	
;;;718    	for (u8i=0 ; s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_pfnTouch_Callback != NULL ; u8i++)
000002  2000              MOVS     r0,#0
;;;719    	{
;;;720    		if( s_sKeypadTouchCtrlHandler.pu16PinValueArray[u8i]>0 )
000004  4c08              LDR      r4,|L9.40|
000006  e008              B        |L9.26|
                  |L9.8|
000008  6ba1              LDR      r1,[r4,#0x38]  ; s_sKeypadTouchCtrlHandler
00000a  0042              LSLS     r2,r0,#1
00000c  5a8b              LDRH     r3,[r1,r2]
00000e  2b00              CMP      r3,#0
000010  d001              BEQ      |L9.22|
000012  1c5b              ADDS     r3,r3,#1
;;;721    			s_sKeypadTouchCtrlHandler.pu16PinValueArray[u8i]++;
000014  528b              STRH     r3,[r1,r2]
                  |L9.22|
000016  1c40              ADDS     r0,r0,#1
000018  b2c0              UXTB     r0,r0                 ;718
                  |L9.26|
00001a  210c              MOVS     r1,#0xc               ;718
00001c  6b22              LDR      r2,[r4,#0x30]         ;718  ; s_sKeypadTouchCtrlHandler
00001e  4341              MULS     r1,r0,r1              ;718
000020  5851              LDR      r1,[r2,r1]            ;718
000022  2900              CMP      r1,#0                 ;718
000024  d1f0              BNE      |L9.8|
;;;722    	}
;;;723    }
000026  bd10              POP      {r4,pc}
                          ENDP

                  |L9.40|
                          DCD      ||.bss||+0x34

                          AREA ||i.Keypad_ResetKey||, CODE, READONLY, ALIGN=2

                  Keypad_ResetKey PROC
;;;181      */
;;;182    void Keypad_ResetKey(void)
000000  4904              LDR      r1,|L10.20|
;;;183    {
;;;184    	s_sKeypadKeyCtrlHandler.psInGPIO = NULL;
000002  2000              MOVS     r0,#0
;;;185    	s_sKeypadKeyCtrlHandler.psOutGPIO = NULL;
000004  6008              STR      r0,[r1,#0]  ; s_sKeypadKeyCtrlHandler
;;;186    	s_sKeypadKeyCtrlHandler.u16OutPinDebMask = 0; 
000006  6048              STR      r0,[r1,#4]  ; s_sKeypadKeyCtrlHandler
000008  8308              STRH     r0,[r1,#0x18]
;;;187    	s_sKeypadKeyCtrlHandler.u16PinValueDiff = 0;
00000a  8348              STRH     r0,[r1,#0x1a]
;;;188    	s_u16KeyDebounceCounter = 0;
00000c  4902              LDR      r1,|L10.24|
00000e  8048              STRH     r0,[r1,#2]
;;;189    }
000010  4770              BX       lr
;;;190    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      ||.bss||
                  |L10.24|
                          DCD      ||.data||

                          AREA ||i.Keypad_ResetTgr||, CODE, READONLY, ALIGN=2

                  Keypad_ResetTgr PROC
;;;365      */
;;;366    void Keypad_ResetTgr(void)
000000  4903              LDR      r1,|L11.16|
;;;367    {
;;;368    	s_sKeypadTgrCtrlHandler.psGPIO = NULL;
000002  2000              MOVS     r0,#0
;;;369    	s_sKeypadTgrCtrlHandler.u16PinValueDiff = 0;
000004  6008              STR      r0,[r1,#0]  ; s_sKeypadTgrCtrlHandler
000006  8208              STRH     r0,[r1,#0x10]
;;;370    	s_u16TgrDebounceCounter = 0;
000008  4902              LDR      r1,|L11.20|
00000a  8008              STRH     r0,[r1,#0]
;;;371    }
00000c  4770              BX       lr
;;;372    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      ||.bss||+0x20
                  |L11.20|
                          DCD      ||.data||

                          AREA ||i.Keypad_ScanKey||, CODE, READONLY, ALIGN=2

                  Keypad_ScanKey PROC
;;;289      */
;;;290    uint8_t Keypad_ScanKey(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;291    {
;;;292    	uint8_t u8MapResult = 0;
;;;293    	
;;;294    	s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx = 0;
000002  4c1c              LDR      r4,|L12.116|
000004  2500              MOVS     r5,#0
;;;295    	Keypad_ScanKeyPort(PA, s_sKeypadKeyCtrlHandler.u16InPinMaskA, PA, s_sKeypadKeyCtrlHandler.u16OutPinMaskA);
000006  4e1c              LDR      r6,|L12.120|
000008  7765              STRB     r5,[r4,#0x1d]         ;294
00000a  4632              MOV      r2,r6
00000c  8aa3              LDRH     r3,[r4,#0x14]  ; s_sKeypadKeyCtrlHandler
00000e  8a21              LDRH     r1,[r4,#0x10]  ; s_sKeypadKeyCtrlHandler
000010  4610              MOV      r0,r2
000012  f7fffffe          BL       Keypad_ScanKeyPort
;;;296    	Keypad_ScanKeyPort(PA, s_sKeypadKeyCtrlHandler.u16InPinMaskA, PB, s_sKeypadKeyCtrlHandler.u16OutPinMaskB);
000016  4f18              LDR      r7,|L12.120|
000018  8ae3              LDRH     r3,[r4,#0x16]  ; s_sKeypadKeyCtrlHandler
00001a  3740              ADDS     r7,r7,#0x40
00001c  8a21              LDRH     r1,[r4,#0x10]  ; s_sKeypadKeyCtrlHandler
00001e  463a              MOV      r2,r7
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       Keypad_ScanKeyPort
;;;297    	Keypad_ScanKeyPort(PB, s_sKeypadKeyCtrlHandler.u16InPinMaskB, PA, s_sKeypadKeyCtrlHandler.u16OutPinMaskA);
000026  8aa3              LDRH     r3,[r4,#0x14]  ; s_sKeypadKeyCtrlHandler
000028  8a61              LDRH     r1,[r4,#0x12]  ; s_sKeypadKeyCtrlHandler
00002a  4632              MOV      r2,r6
00002c  4638              MOV      r0,r7
00002e  f7fffffe          BL       Keypad_ScanKeyPort
;;;298    	Keypad_ScanKeyPort(PB, s_sKeypadKeyCtrlHandler.u16InPinMaskB, PB, s_sKeypadKeyCtrlHandler.u16OutPinMaskB);
000032  463a              MOV      r2,r7
000034  8ae3              LDRH     r3,[r4,#0x16]  ; s_sKeypadKeyCtrlHandler
000036  8a61              LDRH     r1,[r4,#0x12]  ; s_sKeypadKeyCtrlHandler
000038  4610              MOV      r0,r2
00003a  f7fffffe          BL       Keypad_ScanKeyPort
;;;299    	
;;;300    	if (s_sKeypadKeyCtrlHandler.psInGPIO != NULL && s_u16KeyDebounceCounter == 0)
00003e  6820              LDR      r0,[r4,#0]  ; s_sKeypadKeyCtrlHandler
000040  2800              CMP      r0,#0
000042  d003              BEQ      |L12.76|
000044  4e0d              LDR      r6,|L12.124|
000046  8870              LDRH     r0,[r6,#2]  ; s_u16KeyDebounceCounter
000048  2800              CMP      r0,#0
00004a  d001              BEQ      |L12.80|
                  |L12.76|
;;;301    	{	
;;;302    		// Debounce time up, call callback function
;;;303    		u8MapResult = Keypad_KeyMapHandler();
;;;304    		
;;;305    		switch(s_sKeypadKeyCtrlHandler.u8KeyMode)
;;;306    		{
;;;307    			// Falling trigger, start debounce for pressing
;;;308    			case KEYPAD_FALLING:
;;;309    			s_sKeypadKeyCtrlHandler.u8KeyMode = KEYPAD_PRESSING;
;;;310    			s_u16KeyDebounceCounter = g_u16PressingCount;
;;;311    			break;
;;;312    			// Rising trigger. reset debounce 	
;;;313    			case KEYPAD_RISING:
;;;314    			s_sKeypadKeyCtrlHandler.psInGPIO = NULL;
;;;315    			break;
;;;316    			// Pressing trigger. set pressing counter.
;;;317    			case KEYPAD_PRESSING:
;;;318    			s_u16KeyDebounceCounter = g_u16PressingCount;
;;;319    			break;		
;;;320    		}
;;;321    		return u8MapResult;
;;;322    	}
;;;323    	return 0;
00004c  2000              MOVS     r0,#0
                  |L12.78|
;;;324    }		
00004e  bdf8              POP      {r3-r7,pc}
                  |L12.80|
000050  f7fffffe          BL       Keypad_KeyMapHandler
000054  7f21              LDRB     r1,[r4,#0x1c]         ;305  ; s_sKeypadKeyCtrlHandler
000056  2900              CMP      r1,#0                 ;305
000058  d004              BEQ      |L12.100|
00005a  2901              CMP      r1,#1                 ;305
00005c  d007              BEQ      |L12.110|
00005e  2902              CMP      r1,#2                 ;305
000060  d1f5              BNE      |L12.78|
000062  e001              B        |L12.104|
                  |L12.100|
000064  2102              MOVS     r1,#2                 ;309
000066  7721              STRB     r1,[r4,#0x1c]         ;309
                  |L12.104|
000068  8931              LDRH     r1,[r6,#8]            ;318  ; g_u16PressingCount
00006a  8071              STRH     r1,[r6,#2]            ;318
00006c  bdf8              POP      {r3-r7,pc}
                  |L12.110|
00006e  6025              STR      r5,[r4,#0]            ;314  ; s_sKeypadKeyCtrlHandler
000070  bdf8              POP      {r3-r7,pc}
;;;325    
                          ENDP

000072  0000              DCW      0x0000
                  |L12.116|
                          DCD      ||.bss||
                  |L12.120|
                          DCD      0x50004000
                  |L12.124|
                          DCD      ||.data||

                          AREA ||i.Keypad_ScanKeyPort||, CODE, READONLY, ALIGN=2

                  Keypad_ScanKeyPort PROC
;;;199      */
;;;200    void Keypad_ScanKeyPort(GPIO_T* psInGPIO,uint16_t u16InPinMask,GPIO_T* psOutGPIO,uint16_t u16OutPinMask)
000000  b5ff              PUSH     {r0-r7,lr}
;;;201    {
000002  4684              MOV      r12,r0
;;;202    	uint16_t u16Mask = 1,u16CurPinValue,u16Diff;
;;;203    	
;;;204    	if(u16OutPinMask && u16InPinMask)
000004  9803              LDR      r0,[sp,#0xc]
000006  2101              MOVS     r1,#1                 ;202
000008  2800              CMP      r0,#0
00000a  d049              BEQ      |L13.160|
00000c  9801              LDR      r0,[sp,#4]
00000e  2800              CMP      r0,#0
000010  d046              BEQ      |L13.160|
;;;205    	{
;;;206    		while( u16Mask > 0 )
;;;207    		{
;;;208    			if (u16OutPinMask & u16Mask)
;;;209    			{		
;;;210    				// Set tested output port pin to 0, keep other output pin to 1, keep other pins as orignal
;;;211    				GPIO_SET_OUT_DATA(psOutGPIO,(GPIO_GET_OUT_DATA(psOutGPIO)&~u16Mask));
;;;212    				// Get input pins value of the tested output pin
;;;213    				u16CurPinValue = GPIO_GET_IN_DATA(psInGPIO)&u16InPinMask;
;;;214    				// Diff with previous pin value
;;;215    				u16Diff = u16CurPinValue ^ s_sKeypadKeyCtrlHandler.pu16PinValueArray[s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx];
000012  4824              LDR      r0,|L13.164|
000014  68c6              LDR      r6,[r0,#0xc]
                  |L13.22|
000016  9803              LDR      r0,[sp,#0xc]          ;208
000018  4208              TST      r0,r1                 ;208
00001a  d03d              BEQ      |L13.152|
00001c  6890              LDR      r0,[r2,#8]            ;211
00001e  4388              BICS     r0,r0,r1              ;211
000020  6090              STR      r0,[r2,#8]            ;211
000022  4660              MOV      r0,r12                ;213
000024  6904              LDR      r4,[r0,#0x10]         ;213
000026  4f1f              LDR      r7,|L13.164|
000028  9801              LDR      r0,[sp,#4]            ;213
00002a  7f7d              LDRB     r5,[r7,#0x1d]  ; s_sKeypadKeyCtrlHandler
00002c  4004              ANDS     r4,r4,r0              ;213
00002e  0068              LSLS     r0,r5,#1
000030  4686              MOV      lr,r0
000032  5a33              LDRH     r3,[r6,r0]
;;;216    				// Reset output pin value to high, but keep other pin as original
;;;217    				GPIO_SET_OUT_DATA(psOutGPIO,(GPIO_GET_OUT_DATA(psOutGPIO)|u16Mask));
000034  6890              LDR      r0,[r2,#8]
000036  4063              EORS     r3,r3,r4              ;215
000038  4308              ORRS     r0,r0,r1
00003a  6090              STR      r0,[r2,#8]
;;;218    				// Key is not changed, return
;;;219    				if (u16Diff == 0)
00003c  2b00              CMP      r3,#0
00003e  d014              BEQ      |L13.106|
;;;220    				{	
;;;221    					s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx++;
;;;222    					u16Mask <<= 1;
;;;223    					continue ;
;;;224    				}	
;;;225    				// Key changed, check in debounce state.
;;;226    				if ( s_sKeypadKeyCtrlHandler.u8KeyMode != KEYPAD_PRESSING &&
000040  4638              MOV      r0,r7
000042  7f00              LDRB     r0,[r0,#0x1c]  ; s_sKeypadKeyCtrlHandler
000044  2802              CMP      r0,#2
000046  d013              BEQ      |L13.112|
;;;227    					 s_sKeypadKeyCtrlHandler.psInGPIO == psInGPIO         &&
000048  4638              MOV      r0,r7
00004a  6800              LDR      r0,[r0,#0]  ; s_sKeypadKeyCtrlHandler
00004c  4560              CMP      r0,r12
00004e  d10f              BNE      |L13.112|
;;;228    				     s_sKeypadKeyCtrlHandler.psOutGPIO == psOutGPIO       &&
000050  6878              LDR      r0,[r7,#4]  ; s_sKeypadKeyCtrlHandler
000052  4290              CMP      r0,r2
000054  d10c              BNE      |L13.112|
;;;229    				     s_sKeypadKeyCtrlHandler.u16OutPinDebMask == u16Mask  &&
000056  8b38              LDRH     r0,[r7,#0x18]  ; s_sKeypadKeyCtrlHandler
000058  4288              CMP      r0,r1
00005a  d109              BNE      |L13.112|
;;;230    				     s_sKeypadKeyCtrlHandler.u16PinValueDiff == u16Diff   )
00005c  8b78              LDRH     r0,[r7,#0x1a]  ; s_sKeypadKeyCtrlHandler
00005e  4298              CMP      r0,r3
000060  d106              BNE      |L13.112|
;;;231    				{	
;;;232    					// Same Key changed during Debounce time is counting. 
;;;233    					// It may be a noise. Clear Debounce status.
;;;234    					s_sKeypadKeyCtrlHandler.psInGPIO = NULL;
000062  2300              MOVS     r3,#0
000064  603b              STR      r3,[r7,#0]  ; s_sKeypadKeyCtrlHandler
000066  4673              MOV      r3,lr
;;;235    					s_sKeypadKeyCtrlHandler.pu16PinValueArray[s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx++] = u16CurPinValue;
000068  52f4              STRH     r4,[r6,r3]
                  |L13.106|
00006a  1c6d              ADDS     r5,r5,#1
00006c  777d              STRB     r5,[r7,#0x1d]         ;221
00006e  e013              B        |L13.152|
                  |L13.112|
;;;236    					u16Mask <<= 1;
;;;237    					continue ;
;;;238    				}
;;;239    				// start Debounce
;;;240    				s_sKeypadKeyCtrlHandler.psInGPIO = psInGPIO;
000070  480c              LDR      r0,|L13.164|
000072  4667              MOV      r7,r12
;;;241    				s_sKeypadKeyCtrlHandler.psOutGPIO = psOutGPIO;
;;;242    				s_sKeypadKeyCtrlHandler.u16OutPinDebMask = u16Mask; 
000074  6007              STR      r7,[r0,#0]  ; s_sKeypadKeyCtrlHandler
000076  6042              STR      r2,[r0,#4]  ; s_sKeypadKeyCtrlHandler
000078  8301              STRH     r1,[r0,#0x18]
00007a  4677              MOV      r7,lr
;;;243    				s_sKeypadKeyCtrlHandler.pu16PinValueArray[s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx] = u16CurPinValue;
00007c  53f4              STRH     r4,[r6,r7]
;;;244    				s_sKeypadKeyCtrlHandler.u16PinValueDiff = u16Diff;
;;;245    				s_u16KeyDebounceCounter = g_u16DebounceCount;
00007e  4f0a              LDR      r7,|L13.168|
000080  8343              STRH     r3,[r0,#0x1a]         ;244
000082  88f8              LDRH     r0,[r7,#6]  ; g_u16DebounceCount
000084  8078              STRH     r0,[r7,#2]
;;;246    				s_sKeypadKeyCtrlHandler.u8KeyMode = (u16Diff & u16CurPinValue) ? KEYPAD_RISING : KEYPAD_FALLING;
000086  4223              TST      r3,r4
000088  d001              BEQ      |L13.142|
00008a  2001              MOVS     r0,#1
00008c  e000              B        |L13.144|
                  |L13.142|
00008e  2000              MOVS     r0,#0
                  |L13.144|
000090  4b04              LDR      r3,|L13.164|
000092  1c6d              ADDS     r5,r5,#1
000094  7718              STRB     r0,[r3,#0x1c]
;;;247    				s_sKeypadKeyCtrlHandler.u8KeyPinValueIdx++;
000096  775d              STRB     r5,[r3,#0x1d]
                  |L13.152|
;;;248    			}
;;;249    			u16Mask <<= 1;
000098  0048              LSLS     r0,r1,#1
00009a  0401              LSLS     r1,r0,#16
00009c  0c09              LSRS     r1,r1,#16
00009e  d1ba              BNE      |L13.22|
                  |L13.160|
;;;250    		}
;;;251    	}
;;;252    }
0000a0  bdff              POP      {r0-r7,pc}
;;;253    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L13.164|
                          DCD      ||.bss||
                  |L13.168|
                          DCD      ||.data||

                          AREA ||i.Keypad_ScanTgr||, CODE, READONLY, ALIGN=2

                  Keypad_ScanTgr PROC
;;;444      */
;;;445    uint8_t Keypad_ScanTgr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;446    {
;;;447    	uint8_t u8MapResult = 0;
;;;448    	
;;;449    	Keypad_ScanTgrPort(PA, s_sKeypadTgrCtrlHandler.u16PinMaskA, &s_sKeypadTgrCtrlHandler.u16PinValueA);
000002  4d14              LDR      r5,|L14.84|
000004  4814              LDR      r0,|L14.88|
000006  462a              MOV      r2,r5
000008  8929              LDRH     r1,[r5,#8]  ; s_sKeypadTgrCtrlHandler
00000a  320c              ADDS     r2,r2,#0xc
00000c  f7fffffe          BL       Keypad_ScanTgrPort
;;;450    	Keypad_ScanTgrPort(PB, s_sKeypadTgrCtrlHandler.u16PinMaskB, &s_sKeypadTgrCtrlHandler.u16PinValueB);
000010  4811              LDR      r0,|L14.88|
000012  462a              MOV      r2,r5
000014  8969              LDRH     r1,[r5,#0xa]  ; s_sKeypadTgrCtrlHandler
000016  320e              ADDS     r2,r2,#0xe
000018  3040              ADDS     r0,r0,#0x40
00001a  f7fffffe          BL       Keypad_ScanTgrPort
;;;451    	
;;;452    	if (s_sKeypadTgrCtrlHandler.psGPIO != NULL && s_u16TgrDebounceCounter == 0)
00001e  6828              LDR      r0,[r5,#0]  ; s_sKeypadTgrCtrlHandler
000020  2800              CMP      r0,#0
000022  d003              BEQ      |L14.44|
000024  4c0d              LDR      r4,|L14.92|
000026  8820              LDRH     r0,[r4,#0]  ; s_u16TgrDebounceCounter
000028  2800              CMP      r0,#0
00002a  d001              BEQ      |L14.48|
                  |L14.44|
;;;453    	{
;;;454    		// Debounce time up
;;;455    		u8MapResult = Keypad_TgrMapHandler();
;;;456    		
;;;457    		switch(s_sKeypadTgrCtrlHandler.u8TgrMode)
;;;458    		{
;;;459    			// Falling trigger, start debounce for pressing
;;;460    			case KEYPAD_FALLING:
;;;461    			s_sKeypadTgrCtrlHandler.u8TgrMode = KEYPAD_PRESSING;
;;;462    			s_u16TgrDebounceCounter = g_u16PressingCount;
;;;463    			break;
;;;464    			// Rising trigger. reset debounce 	
;;;465    			case KEYPAD_RISING:
;;;466    			s_sKeypadTgrCtrlHandler.psGPIO = NULL;
;;;467    			break;
;;;468    			// Pressing trigger. set pressing counter.
;;;469    			case KEYPAD_PRESSING:
;;;470    			s_u16TgrDebounceCounter = g_u16PressingCount;
;;;471    			break;				
;;;472    		}
;;;473    		return u8MapResult;
;;;474    	}
;;;475    	return 1;
00002c  2001              MOVS     r0,#1
                  |L14.46|
;;;476    }		
00002e  bd70              POP      {r4-r6,pc}
                  |L14.48|
000030  f7fffffe          BL       Keypad_TgrMapHandler
000034  7ca9              LDRB     r1,[r5,#0x12]         ;457  ; s_sKeypadTgrCtrlHandler
000036  2900              CMP      r1,#0                 ;457
000038  d004              BEQ      |L14.68|
00003a  2901              CMP      r1,#1                 ;457
00003c  d007              BEQ      |L14.78|
00003e  2902              CMP      r1,#2                 ;457
000040  d1f5              BNE      |L14.46|
000042  e001              B        |L14.72|
                  |L14.68|
000044  2102              MOVS     r1,#2                 ;461
000046  74a9              STRB     r1,[r5,#0x12]         ;461
                  |L14.72|
000048  8921              LDRH     r1,[r4,#8]            ;470  ; g_u16PressingCount
00004a  8021              STRH     r1,[r4,#0]            ;470
00004c  bd70              POP      {r4-r6,pc}
                  |L14.78|
00004e  2100              MOVS     r1,#0                 ;466
000050  6029              STR      r1,[r5,#0]            ;466  ; s_sKeypadTgrCtrlHandler
000052  bd70              POP      {r4-r6,pc}
;;;477    
                          ENDP

                  |L14.84|
                          DCD      ||.bss||+0x20
                  |L14.88|
                          DCD      0x50004000
                  |L14.92|
                          DCD      ||.data||

                          AREA ||i.Keypad_ScanTgrPort||, CODE, READONLY, ALIGN=2

                  Keypad_ScanTgrPort PROC
;;;379      */
;;;380    void Keypad_ScanTgrPort(GPIO_T* pGPIO,uint16_t u16PinMask,uint16_t* pu16PinValue)
000000  b530              PUSH     {r4,r5,lr}
;;;381    {
;;;382    	uint16_t u16CurPinValue, u16Diff;
;;;383    	// Check parameter
;;;384    	if (u16PinMask == 0 || pGPIO == NULL ) 
000002  2900              CMP      r1,#0
000004  d013              BEQ      |L15.46|
000006  2800              CMP      r0,#0
000008  d011              BEQ      |L15.46|
;;;385    		return;
;;;386    	// Read current pin value
;;;387    	u16CurPinValue = GPIO_GET_IN_DATA(pGPIO)&u16PinMask;
00000a  6903              LDR      r3,[r0,#0x10]
00000c  400b              ANDS     r3,r3,r1
;;;388    	// Compare with previous pin value
;;;389    	u16Diff = u16CurPinValue ^ *pu16PinValue;
00000e  8811              LDRH     r1,[r2,#0]
000010  4059              EORS     r1,r1,r3
;;;390    	// Tgr key isn't changed.
;;;391    	if (u16Diff == 0)
000012  d00c              BEQ      |L15.46|
;;;392    		return ;
;;;393    	// Trigger pin is in Debounce duration, or into starting debounce state.
;;;394    	if ( s_sKeypadTgrCtrlHandler.psGPIO == pGPIO              && 
000014  4c0d              LDR      r4,|L15.76|
000016  6825              LDR      r5,[r4,#0]  ; s_sKeypadTgrCtrlHandler
000018  4285              CMP      r5,r0
00001a  d109              BNE      |L15.48|
;;;395    		 s_sKeypadTgrCtrlHandler.u8TgrMode != KEYPAD_PRESSING &&
00001c  7ca5              LDRB     r5,[r4,#0x12]  ; s_sKeypadTgrCtrlHandler
00001e  2d02              CMP      r5,#2
000020  d006              BEQ      |L15.48|
;;;396    	     u16Diff == s_sKeypadTgrCtrlHandler.u16PinValueDiff   )
000022  8a25              LDRH     r5,[r4,#0x10]  ; s_sKeypadTgrCtrlHandler
000024  428d              CMP      r5,r1
000026  d103              BNE      |L15.48|
;;;397    	{	
;;;398            // same tgr pin changed. It may be a noise. Clear Debounce status.
;;;399    		s_sKeypadTgrCtrlHandler.psGPIO = NULL;
000028  2000              MOVS     r0,#0
;;;400    		*pu16PinValue = u16CurPinValue;
00002a  6020              STR      r0,[r4,#0]  ; s_sKeypadTgrCtrlHandler
00002c  8013              STRH     r3,[r2,#0]
                  |L15.46|
;;;401    	}
;;;402    	else
;;;403    	{
;;;404    	    s_sKeypadTgrCtrlHandler.psGPIO = pGPIO;
;;;405    	    *pu16PinValue = u16CurPinValue;
;;;406    	    s_sKeypadTgrCtrlHandler.u16PinValueDiff = u16Diff;
;;;407    	    s_u16TgrDebounceCounter = g_u16DebounceCount;
;;;408    	    s_sKeypadTgrCtrlHandler.u8TgrMode = (s_sKeypadTgrCtrlHandler.u16PinValueDiff & *pu16PinValue) ? KEYPAD_RISING : KEYPAD_FALLING;
;;;409    	}
;;;410    }
00002e  bd30              POP      {r4,r5,pc}
                  |L15.48|
000030  6020              STR      r0,[r4,#0]            ;405  ; s_sKeypadTgrCtrlHandler
000032  8013              STRH     r3,[r2,#0]            ;405
000034  4806              LDR      r0,|L15.80|
000036  8221              STRH     r1,[r4,#0x10]         ;406
000038  88c3              LDRH     r3,[r0,#6]            ;407  ; g_u16DebounceCount
00003a  8003              STRH     r3,[r0,#0]            ;407
00003c  8810              LDRH     r0,[r2,#0]            ;408
00003e  4201              TST      r1,r0                 ;408
000040  d001              BEQ      |L15.70|
000042  2001              MOVS     r0,#1                 ;408
000044  e000              B        |L15.72|
                  |L15.70|
000046  2000              MOVS     r0,#0                 ;408
                  |L15.72|
000048  74a0              STRB     r0,[r4,#0x12]         ;408
00004a  bd30              POP      {r4,r5,pc}
;;;411    
                          ENDP

                  |L15.76|
                          DCD      ||.bss||+0x20
                  |L15.80|
                          DCD      ||.data||

                          AREA ||i.Keypad_ScanTouch||, CODE, READONLY, ALIGN=2

                  Keypad_ScanTouch PROC
;;;686      */
;;;687    uint8_t Keypad_ScanTouch(void)
000000  b510              PUSH     {r4,lr}
;;;688    {
;;;689    	if ( s_u8CapSenseIRQFlag )
000002  4c0c              LDR      r4,|L16.52|
000004  7920              LDRB     r0,[r4,#4]  ; s_u8CapSenseIRQFlag
000006  2800              CMP      r0,#0
000008  d011              BEQ      |L16.46|
;;;690    	{
;;;691    		// Capture state.
;;;692    		Keypad_TouchCaptureState();
00000a  f7fffffe          BL       Keypad_TouchCaptureState
;;;693    		// Cal touch result. 
;;;694    		Keypad_TouchMapHandler();
00000e  f7fffffe          BL       Keypad_TouchMapHandler
;;;695    		// Get next enable touch pin.
;;;696    		Keypad_GetTouchEnablePin();
000012  f7fffffe          BL       Keypad_GetTouchEnablePin
;;;697    		// Set next enable touch pin into register.
;;;698    		ACMP->POSSEL = s_sKeypadTouchCtrlHandler.u8ScanIndex<<ACMP_POSSEL_POSSEL_Pos;
000016  4808              LDR      r0,|L16.56|
000018  4908              LDR      r1,|L16.60|
00001a  7880              LDRB     r0,[r0,#2]  ; s_sKeypadTouchCtrlHandler
00001c  60c8              STR      r0,[r1,#0xc]
;;;699    		// Clear irq flag.
;;;700    		s_u8CapSenseIRQFlag=0;
00001e  2000              MOVS     r0,#0
000020  7120              STRB     r0,[r4,#4]
;;;701    		// Start to capture touch pin.
;;;702    		Keypad_TouchStartIRQ();
000022  f7fffffe          BL       Keypad_TouchStartIRQ
;;;703    		// Update touch status.
;;;704    		s_sKeypadTouchCtrlHandler.u16LastPadStatus = s_sKeypadTouchCtrlHandler.u16PadStatus;
000026  4804              LDR      r0,|L16.56|
000028  3840              SUBS     r0,r0,#0x40
00002a  8f81              LDRH     r1,[r0,#0x3c]  ; s_sKeypadTouchCtrlHandler
00002c  87c1              STRH     r1,[r0,#0x3e]
                  |L16.46|
;;;705    	}
;;;706    	return 1;
00002e  2001              MOVS     r0,#1
;;;707    }
000030  bd10              POP      {r4,pc}
;;;708    
                          ENDP

000032  0000              DCW      0x0000
                  |L16.52|
                          DCD      ||.data||
                  |L16.56|
                          DCD      ||.bss||+0x74
                  |L16.60|
                          DCD      0x400d0000

                          AREA ||i.Keypad_TgrDecDebounceCounter||, CODE, READONLY, ALIGN=2

                  Keypad_TgrDecDebounceCounter PROC
;;;482      */
;;;483    uint8_t Keypad_TgrDecDebounceCounter(void)
000000  4807              LDR      r0,|L17.32|
;;;484    {
;;;485    	if (s_sKeypadTgrCtrlHandler.psGPIO != NULL && s_u16TgrDebounceCounter > 0)
000002  6800              LDR      r0,[r0,#0]  ; s_sKeypadTgrCtrlHandler
000004  2800              CMP      r0,#0
000006  d008              BEQ      |L17.26|
000008  4806              LDR      r0,|L17.36|
00000a  8801              LDRH     r1,[r0,#0]  ; s_u16TgrDebounceCounter
00000c  2900              CMP      r1,#0
00000e  d004              BEQ      |L17.26|
;;;486    	{
;;;487    		s_u16TgrDebounceCounter--;
000010  8801              LDRH     r1,[r0,#0]  ; s_u16TgrDebounceCounter
000012  1e49              SUBS     r1,r1,#1
000014  8001              STRH     r1,[r0,#0]
;;;488    		return 1;
000016  2001              MOVS     r0,#1
;;;489    	}
;;;490    	return 0;
;;;491    }
000018  4770              BX       lr
                  |L17.26|
00001a  2000              MOVS     r0,#0                 ;490
00001c  4770              BX       lr
;;;492    
                          ENDP

00001e  0000              DCW      0x0000
                  |L17.32|
                          DCD      ||.bss||+0x20
                  |L17.36|
                          DCD      ||.data||

                          AREA ||i.Keypad_TgrMapHandler||, CODE, READONLY, ALIGN=2

                  Keypad_TgrMapHandler PROC
;;;416      */
;;;417    uint8_t Keypad_TgrMapHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;418    {
;;;419    	uint8_t u8Port = (s_sKeypadTgrCtrlHandler.psGPIO == PA)? 0 : 1;
000002  4a17              LDR      r2,|L18.96|
000004  4917              LDR      r1,|L18.100|
000006  6810              LDR      r0,[r2,#0]  ; s_sKeypadTgrCtrlHandler
000008  4288              CMP      r0,r1
00000a  d001              BEQ      |L18.16|
00000c  2501              MOVS     r5,#1
00000e  e000              B        |L18.18|
                  |L18.16|
000010  2500              MOVS     r5,#0
                  |L18.18|
000012  4913              LDR      r1,|L18.96|
;;;420    	uint8_t u8i;
;;;421    	
;;;422    	for (u8i=0 ; s_sKeypadTgrCtrlHandler.psTgrHandler[u8i].m_pfnTgr_Callback != NULL ; u8i++)
000014  2000              MOVS     r0,#0
;;;423    	{
;;;424    		if (s_sKeypadTgrCtrlHandler.psTgrHandler[u8i].m_u8Port == u8Port                                  &&
000016  6849              LDR      r1,[r1,#4]
;;;425    			s_sKeypadTgrCtrlHandler.psTgrHandler[u8i].m_u16Pin == s_sKeypadTgrCtrlHandler.u16PinValueDiff &&
000018  8a14              LDRH     r4,[r2,#0x10]
;;;426    			s_sKeypadTgrCtrlHandler.psTgrHandler[u8i].m_u8Mode == s_sKeypadTgrCtrlHandler.u8TgrMode       )
00001a  7c93              LDRB     r3,[r2,#0x12]
00001c  e018              B        |L18.80|
                  |L18.30|
00001e  4616              MOV      r6,r2                 ;424
000020  360a              ADDS     r6,r6,#0xa            ;424
000022  5d8e              LDRB     r6,[r1,r6]            ;424
000024  42ae              CMP      r6,r5                 ;424
000026  d111              BNE      |L18.76|
000028  4616              MOV      r6,r2                 ;425
00002a  3608              ADDS     r6,r6,#8              ;425
00002c  5b8e              LDRH     r6,[r1,r6]            ;425
00002e  42a6              CMP      r6,r4                 ;425
000030  d10c              BNE      |L18.76|
000032  4616              MOV      r6,r2
000034  360b              ADDS     r6,r6,#0xb
000036  5d8e              LDRB     r6,[r1,r6]
000038  429e              CMP      r6,r3
00003a  d107              BNE      |L18.76|
;;;427    		{
;;;428    			s_sKeypadTgrCtrlHandler.psTgrHandler[u8i].m_pfnTgr_Callback(s_sKeypadTgrCtrlHandler.psTgrHandler[u8i].m_u32Param);
00003c  230c              MOVS     r3,#0xc
00003e  4358              MULS     r0,r3,r0
000040  1d00              ADDS     r0,r0,#4
000042  5808              LDR      r0,[r1,r0]
000044  5889              LDR      r1,[r1,r2]
000046  4788              BLX      r1
;;;429    			return 1;
000048  2001              MOVS     r0,#1
;;;430    		}		
;;;431    	}
;;;432    	return 0;
;;;433    }
00004a  bd70              POP      {r4-r6,pc}
                  |L18.76|
00004c  1c40              ADDS     r0,r0,#1
00004e  b2c0              UXTB     r0,r0                 ;422
                  |L18.80|
000050  220c              MOVS     r2,#0xc               ;422
000052  4342              MULS     r2,r0,r2              ;422
000054  588e              LDR      r6,[r1,r2]            ;422
000056  2e00              CMP      r6,#0                 ;422
000058  d1e1              BNE      |L18.30|
00005a  2000              MOVS     r0,#0                 ;432
00005c  bd70              POP      {r4-r6,pc}
;;;434    
                          ENDP

00005e  0000              DCW      0x0000
                  |L18.96|
                          DCD      ||.bss||+0x20
                  |L18.100|
                          DCD      0x50004000

                          AREA ||i.Keypad_TouchCalibration||, CODE, READONLY, ALIGN=2

                  Keypad_TouchCalibration PROC
;;;607      */
;;;608    void Keypad_TouchCalibration(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;609    {
;;;610    	uint8_t u8i, u8j;
;;;611    	uint32_t u32TmpCounter;
;;;612    	
;;;613    	for( u8i=0; u8i<KEYPAD_TOUCH_MAX_KEY_COUNT; u8i++)
;;;614        {
;;;615    		if( s_sKeypadTouchCtrlHandler.u16EnablePin&(1<<u8i) )
000002  481a              LDR      r0,|L19.108|
;;;616    		{
;;;617    			ACMP->POSSEL = (s_sKeypadTouchCtrlHandler.u8ScanIndex)<<ACMP_POSSEL_POSSEL_Pos;
;;;618    			ACMP->CTL0 &= (~ACMP_CTL0_NEGSEL_Msk);
;;;619    			ACMP->CTL0 |= ACMP_CTL0_ACMPEN_Msk;
;;;620    			u32TmpCounter=0;
;;;621    			
;;;622    			for( u8j=0; u8j<KEYPAD_TOUCH_CAL_AVERAGE_COUNT; u8j++)
;;;623    			{
;;;624    				Keypad_TouchStartIRQ();
;;;625    				while ( s_u8CapSenseIRQFlag==0 );
000004  4f1a              LDR      r7,|L19.112|
000006  2400              MOVS     r4,#0                 ;613
000008  9000              STR      r0,[sp,#0]
                  |L19.10|
00000a  9800              LDR      r0,[sp,#0]            ;615
00000c  2201              MOVS     r2,#1                 ;615
00000e  8801              LDRH     r1,[r0,#0]            ;615  ; s_sKeypadTouchCtrlHandler
000010  4610              MOV      r0,r2                 ;615
000012  40a0              LSLS     r0,r0,r4              ;615
000014  4201              TST      r1,r0                 ;615
000016  d024              BEQ      |L19.98|
000018  9800              LDR      r0,[sp,#0]            ;617
00001a  7881              LDRB     r1,[r0,#2]            ;617  ; s_sKeypadTouchCtrlHandler
00001c  4815              LDR      r0,|L19.116|
00001e  60c1              STR      r1,[r0,#0xc]          ;617
000020  6801              LDR      r1,[r0,#0]            ;618
000022  2310              MOVS     r3,#0x10              ;618
000024  4399              BICS     r1,r1,r3              ;618
000026  6001              STR      r1,[r0,#0]            ;618
000028  6801              LDR      r1,[r0,#0]            ;619
00002a  4311              ORRS     r1,r1,r2              ;619
00002c  6001              STR      r1,[r0,#0]            ;619
00002e  2600              MOVS     r6,#0                 ;620
000030  4635              MOV      r5,r6                 ;622
                  |L19.50|
000032  f7fffffe          BL       Keypad_TouchStartIRQ
                  |L19.54|
000036  7938              LDRB     r0,[r7,#4]  ; s_u8CapSenseIRQFlag
000038  2800              CMP      r0,#0
00003a  d0fc              BEQ      |L19.54|
;;;626    				u32TmpCounter += CapSense_GetCounter();
00003c  f7fffffe          BL       CapSense_GetCounter
000040  1986              ADDS     r6,r0,r6
;;;627    				s_u8CapSenseIRQFlag = 0;
000042  2000              MOVS     r0,#0
000044  7138              STRB     r0,[r7,#4]
000046  1c6d              ADDS     r5,r5,#1
000048  b2ed              UXTB     r5,r5                 ;622
00004a  2d10              CMP      r5,#0x10              ;622
00004c  d3f1              BCC      |L19.50|
;;;628    			}
;;;629    			s_sKeypadTouchCtrlHandler.sKeyValue[u8i].i16CurrentValue = u32TmpCounter/KEYPAD_TOUCH_CAL_AVERAGE_COUNT;
00004e  4b07              LDR      r3,|L19.108|
000050  2206              MOVS     r2,#6
000052  1131              ASRS     r1,r6,#4
000054  4362              MULS     r2,r4,r2
000056  3b40              SUBS     r3,r3,#0x40
000058  18d0              ADDS     r0,r2,r3
00005a  8041              STRH     r1,[r0,#2]
;;;630    			s_sKeypadTouchCtrlHandler.sKeyValue[u8i].i16LowerValue = s_sKeypadTouchCtrlHandler.sKeyValue[u8i].i16CurrentValue;
00005c  5299              STRH     r1,[r3,r2]
;;;631    			s_sKeypadTouchCtrlHandler.sKeyValue[u8i].u8TempCounter = 0;
00005e  2100              MOVS     r1,#0
000060  7141              STRB     r1,[r0,#5]
                  |L19.98|
000062  1c64              ADDS     r4,r4,#1
000064  b2e4              UXTB     r4,r4                 ;613
000066  2c08              CMP      r4,#8                 ;613
000068  d3cf              BCC      |L19.10|
;;;632    		}
;;;633    	}	
;;;634    }
00006a  bdf8              POP      {r3-r7,pc}
;;;635    
                          ENDP

                  |L19.108|
                          DCD      ||.bss||+0x74
                  |L19.112|
                          DCD      ||.data||
                  |L19.116|
                          DCD      0x400d0000

                          AREA ||i.Keypad_TouchCapSense||, CODE, READONLY, ALIGN=2

                  Keypad_TouchCapSense PROC
;;;640      */
;;;641    void Keypad_TouchCapSense(void)
000000  4901              LDR      r1,|L20.8|
;;;642    {
;;;643    	s_u8CapSenseIRQFlag = 1;
000002  2001              MOVS     r0,#1
000004  7108              STRB     r0,[r1,#4]
;;;644    }
000006  4770              BX       lr
;;;645    
                          ENDP

                  |L20.8|
                          DCD      ||.data||

                          AREA ||i.Keypad_TouchCaptureState||, CODE, READONLY, ALIGN=2

                  Keypad_TouchCaptureState PROC
;;;550      */
;;;551    void Keypad_TouchCaptureState(void)
000000  b570              PUSH     {r4-r6,lr}
;;;552    {
;;;553    	S_KEYPAD_TOUCH_KEY_HANDLE* psKeyHandler = &s_sKeypadTouchCtrlHandler.sKeyValue[s_sKeypadTouchCtrlHandler.u8ScanIndex];
000002  4d2a              LDR      r5,|L21.172|
000004  2106              MOVS     r1,#6
000006  78a8              LDRB     r0,[r5,#2]  ; s_sKeypadTouchCtrlHandler
000008  462e              MOV      r6,r5
00000a  4348              MULS     r0,r1,r0
00000c  3e40              SUBS     r6,r6,#0x40
00000e  1984              ADDS     r4,r0,r6
;;;554    
;;;555    	psKeyHandler->i16CurrentValue = CapSense_GetCounter();
000010  f7fffffe          BL       CapSense_GetCounter
000014  b200              SXTH     r0,r0
000016  8060              STRH     r0,[r4,#2]
;;;556    		
;;;557    	/* Pad Key in Pressing state */
;;;558    	if ((psKeyHandler->i16CurrentValue - psKeyHandler->i16LowerValue) > s_sKeypadTouchCtrlHandler.psThreshold->m_u16Press)
000018  2100              MOVS     r1,#0
00001a  5e61              LDRSH    r1,[r4,r1]
00001c  1a42              SUBS     r2,r0,r1
00001e  6b70              LDR      r0,[r6,#0x34]  ; s_sKeypadTouchCtrlHandler
;;;559    	{
;;;560    		(psKeyHandler->u8Counter&KEYPAD_TOUCH_COUNTER_STATE)? (psKeyHandler->u8Counter++):(psKeyHandler->u8Counter|=KEYPAD_TOUCH_COUNTER_STATE);
;;;561    		if(( (s_sKeypadTouchCtrlHandler.u16PadStatus&(1<<s_sKeypadTouchCtrlHandler.u8ScanIndex))==0 )&&(psKeyHandler->u8Counter>KEYPAD_TOUCH_GRAND_COUNT))
000020  2101              MOVS     r1,#1
000022  8803              LDRH     r3,[r0,#0]            ;558
000024  429a              CMP      r2,r3                 ;558
000026  dd16              BLE      |L21.86|
000028  7920              LDRB     r0,[r4,#4]            ;560
00002a  0602              LSLS     r2,r0,#24             ;560
00002c  d501              BPL      |L21.50|
00002e  1c40              ADDS     r0,r0,#1              ;560
000030  e001              B        |L21.54|
                  |L21.50|
000032  2280              MOVS     r2,#0x80              ;560
000034  4310              ORRS     r0,r0,r2              ;560
                  |L21.54|
000036  7120              STRB     r0,[r4,#4]            ;560
000038  78aa              LDRB     r2,[r5,#2]  ; s_sKeypadTouchCtrlHandler
00003a  8fb0              LDRH     r0,[r6,#0x3c]  ; s_sKeypadTouchCtrlHandler
00003c  4091              LSLS     r1,r1,r2
00003e  4208              TST      r0,r1
000040  d108              BNE      |L21.84|
000042  7922              LDRB     r2,[r4,#4]
000044  2a02              CMP      r2,#2
000046  d905              BLS      |L21.84|
;;;562    		{
;;;563    			s_sKeypadTouchCtrlHandler.u16PadStatus |= (1<<s_sKeypadTouchCtrlHandler.u8ScanIndex);
000048  4308              ORRS     r0,r0,r1
00004a  87b0              STRH     r0,[r6,#0x3c]
;;;564    			psKeyHandler->u8Counter &= KEYPAD_TOUCH_COUNTER_STATE; 
00004c  7920              LDRB     r0,[r4,#4]
00004e  09c0              LSRS     r0,r0,#7
000050  01c0              LSLS     r0,r0,#7
000052  7120              STRB     r0,[r4,#4]
                  |L21.84|
;;;565    		}
;;;566    
;;;567    	}
;;;568    	/* Pad Key in Releasing state */
;;;569    	else if ((psKeyHandler->i16CurrentValue - psKeyHandler->i16LowerValue) < s_sKeypadTouchCtrlHandler.psThreshold->m_u16Release)
;;;570    	{
;;;571    		(psKeyHandler->u8Counter&KEYPAD_TOUCH_COUNTER_STATE)? (psKeyHandler->u8Counter&=~KEYPAD_TOUCH_COUNTER_STATE):(psKeyHandler->u8Counter++);
;;;572    		if( ( (s_sKeypadTouchCtrlHandler.u16PadStatus&(1<<s_sKeypadTouchCtrlHandler.u8ScanIndex))!=0 ) && (psKeyHandler->u8Counter>KEYPAD_TOUCH_GRAND_COUNT))
;;;573    		{
;;;574    			s_sKeypadTouchCtrlHandler.u16PadStatus &= ~(1<<s_sKeypadTouchCtrlHandler.u8ScanIndex);
;;;575    			psKeyHandler->u8Counter&=KEYPAD_TOUCH_COUNTER_STATE;
;;;576    		}
;;;577    		if((psKeyHandler->i16LowerValue - psKeyHandler->i16CurrentValue)> KEYPAD_TOUCH_LOW_STEP)
;;;578    		{
;;;579    			psKeyHandler->u8TempCounter++;
;;;580    			if( psKeyHandler->u8TempCounter>KEYPAD_TOUCH_GRAND_COUNT)
;;;581    			{
;;;582    				psKeyHandler->i16LowerValue -= KEYPAD_TOUCH_LOW_STEP;
;;;583    				psKeyHandler->u8TempCounter=0;
;;;584    			}
;;;585    		}
;;;586    		else
;;;587    			psKeyHandler->u8TempCounter=0;
;;;588    	}
;;;589    }
000054  bd70              POP      {r4-r6,pc}
                  |L21.86|
000056  8840              LDRH     r0,[r0,#2]            ;569
000058  4282              CMP      r2,r0                 ;569
00005a  dafb              BGE      |L21.84|
00005c  7920              LDRB     r0,[r4,#4]            ;571
00005e  0602              LSLS     r2,r0,#24             ;571
000060  d502              BPL      |L21.104|
000062  0640              LSLS     r0,r0,#25             ;571
000064  0e40              LSRS     r0,r0,#25             ;571
000066  e000              B        |L21.106|
                  |L21.104|
000068  1c40              ADDS     r0,r0,#1              ;571
                  |L21.106|
00006a  7120              STRB     r0,[r4,#4]            ;571
00006c  78aa              LDRB     r2,[r5,#2]            ;572  ; s_sKeypadTouchCtrlHandler
00006e  8fb0              LDRH     r0,[r6,#0x3c]         ;572  ; s_sKeypadTouchCtrlHandler
000070  4091              LSLS     r1,r1,r2              ;572
000072  4208              TST      r0,r1                 ;572
000074  d008              BEQ      |L21.136|
000076  7922              LDRB     r2,[r4,#4]            ;572
000078  2a02              CMP      r2,#2                 ;572
00007a  d905              BLS      |L21.136|
00007c  4388              BICS     r0,r0,r1              ;574
00007e  87b0              STRH     r0,[r6,#0x3c]         ;574
000080  7920              LDRB     r0,[r4,#4]            ;575
000082  09c0              LSRS     r0,r0,#7              ;575
000084  01c0              LSLS     r0,r0,#7              ;575
000086  7120              STRB     r0,[r4,#4]            ;575
                  |L21.136|
000088  2000              MOVS     r0,#0                 ;577
00008a  2102              MOVS     r1,#2                 ;577
00008c  5e20              LDRSH    r0,[r4,r0]            ;577
00008e  5e61              LDRSH    r1,[r4,r1]            ;577
000090  2200              MOVS     r2,#0                 ;577
000092  1a41              SUBS     r1,r0,r1              ;577
000094  291e              CMP      r1,#0x1e              ;577
000096  dd07              BLE      |L21.168|
000098  7961              LDRB     r1,[r4,#5]            ;579
00009a  1c49              ADDS     r1,r1,#1              ;579
00009c  b2c9              UXTB     r1,r1                 ;579
00009e  7161              STRB     r1,[r4,#5]            ;579
0000a0  2902              CMP      r1,#2                 ;580
0000a2  d9d7              BLS      |L21.84|
0000a4  381e              SUBS     r0,r0,#0x1e           ;580
0000a6  8020              STRH     r0,[r4,#0]            ;582
                  |L21.168|
0000a8  7162              STRB     r2,[r4,#5]            ;587
0000aa  bd70              POP      {r4-r6,pc}
;;;590    
                          ENDP

                  |L21.172|
                          DCD      ||.bss||+0x74

                          AREA ||i.Keypad_TouchMapHandler||, CODE, READONLY, ALIGN=2

                  Keypad_TouchMapHandler PROC
;;;510      */
;;;511    uint8_t Keypad_TouchMapHandler(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;512    {
;;;513    	uint8_t u8i;
;;;514    
;;;515    	for (u8i=0 ; s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_pfnTouch_Callback != NULL ; u8i++)
000002  2500              MOVS     r5,#0
;;;516    	{
;;;517    		if( ( s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u8Mode == KEYPAD_RISING 																						&& 
000004  4f28              LDR      r7,|L22.168|
000006  e032              B        |L22.110|
                  |L22.8|
000008  4622              MOV      r2,r4
00000a  320a              ADDS     r2,r2,#0xa
00000c  5c82              LDRB     r2,[r0,r2]
00000e  2a01              CMP      r2,#1
000010  d004              BEQ      |L22.28|
;;;518    			  (s_sKeypadTouchCtrlHandler.u16PadStatus&s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin) == 0 															&&
;;;519    			  (s_sKeypadTouchCtrlHandler.u16LastPadStatus&s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin) == s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin ) 	||
;;;520    			( s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u8Mode == KEYPAD_FALLING 																						&&
000012  2a00              CMP      r2,#0
000014  d00a              BEQ      |L22.44|
;;;521    			  (s_sKeypadTouchCtrlHandler.u16LastPadStatus&s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin) == 0 															&&
;;;522    			  (s_sKeypadTouchCtrlHandler.u16PadStatus&s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin) == s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin )   )
;;;523    			s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_pfnTouch_Callback(s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u32Param);
;;;524    		else if ( s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u8Mode == KEYPAD_PRESSING )
000016  2a02              CMP      r2,#2
000018  d015              BEQ      |L22.70|
00001a  e026              B        |L22.106|
                  |L22.28|
00001c  4622              MOV      r2,r4                 ;518
00001e  3208              ADDS     r2,r2,#8              ;518
000020  5a82              LDRH     r2,[r0,r2]            ;518
000022  8fbb              LDRH     r3,[r7,#0x3c]         ;518  ; s_sKeypadTouchCtrlHandler
000024  421a              TST      r2,r3                 ;518
000026  d120              BNE      |L22.106|
000028  8ffb              LDRH     r3,[r7,#0x3e]         ;519  ; s_sKeypadTouchCtrlHandler
00002a  e006              B        |L22.58|
                  |L22.44|
00002c  4622              MOV      r2,r4                 ;521
00002e  3208              ADDS     r2,r2,#8              ;521
000030  5a82              LDRH     r2,[r0,r2]            ;521
000032  8ffb              LDRH     r3,[r7,#0x3e]         ;521  ; s_sKeypadTouchCtrlHandler
000034  421a              TST      r2,r3                 ;521
000036  d118              BNE      |L22.106|
000038  8fbb              LDRH     r3,[r7,#0x3c]         ;522  ; s_sKeypadTouchCtrlHandler
                  |L22.58|
00003a  439a              BICS     r2,r2,r3              ;522
00003c  d115              BNE      |L22.106|
00003e  1d24              ADDS     r4,r4,#4              ;522
000040  5900              LDR      r0,[r0,r4]            ;523
000042  4788              BLX      r1                    ;523
000044  e011              B        |L22.106|
                  |L22.70|
;;;525    		{
;;;526    			if( ( s_sKeypadTouchCtrlHandler.u16LastPadStatus&s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin) == s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin 	&&
000046  4622              MOV      r2,r4
000048  3208              ADDS     r2,r2,#8
00004a  5a82              LDRH     r2,[r0,r2]
00004c  8ffe              LDRH     r6,[r7,#0x3e]  ; s_sKeypadTouchCtrlHandler
00004e  4613              MOV      r3,r2
000050  43b3              BICS     r3,r3,r6
000052  d103              BNE      |L22.92|
;;;527    				( s_sKeypadTouchCtrlHandler.u16PadStatus&s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin) == s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin		)
000054  8fbe              LDRH     r6,[r7,#0x3c]  ; s_sKeypadTouchCtrlHandler
000056  4613              MOV      r3,r2
000058  43b3              BICS     r3,r3,r6
00005a  d011              BEQ      |L22.128|
                  |L22.92|
;;;528    			{
;;;529    				if( s_sKeypadTouchCtrlHandler.pu16PinValueArray[u8i] == 0 )
;;;530    					s_sKeypadTouchCtrlHandler.pu16PinValueArray[u8i]++;
;;;531    				else 
;;;532    				{
;;;533    					if( s_sKeypadTouchCtrlHandler.pu16PinValueArray[u8i] >= g_u16PressingCount )
;;;534    					{
;;;535    						s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_pfnTouch_Callback(s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u32Param);
;;;536    						s_sKeypadTouchCtrlHandler.pu16PinValueArray[u8i] = 0;
;;;537    					}
;;;538    				}			
;;;539    			}
;;;540    			else if( (s_sKeypadTouchCtrlHandler.u16PadStatus&s_sKeypadTouchCtrlHandler.psTouchHandler[u8i].m_u16Pin) == 0 )
00005c  8fb8              LDRH     r0,[r7,#0x3c]  ; s_sKeypadTouchCtrlHandler
00005e  4202              TST      r2,r0
000060  d103              BNE      |L22.106|
;;;541    				s_sKeypadTouchCtrlHandler.pu16PinValueArray[u8i] = 0;
000062  2000              MOVS     r0,#0
000064  6bb9              LDR      r1,[r7,#0x38]  ; s_sKeypadTouchCtrlHandler
000066  006a              LSLS     r2,r5,#1
000068  5288              STRH     r0,[r1,r2]
                  |L22.106|
00006a  1c6d              ADDS     r5,r5,#1
00006c  b2ed              UXTB     r5,r5                 ;515
                  |L22.110|
00006e  462c              MOV      r4,r5                 ;515
000070  210c              MOVS     r1,#0xc               ;515
000072  6b38              LDR      r0,[r7,#0x30]         ;515  ; s_sKeypadTouchCtrlHandler
000074  434c              MULS     r4,r1,r4              ;515
000076  5901              LDR      r1,[r0,r4]            ;515
000078  2900              CMP      r1,#0                 ;515
00007a  d1c5              BNE      |L22.8|
;;;542    		}
;;;543    	}
;;;544    	return 1;
00007c  2001              MOVS     r0,#1
;;;545    }
00007e  bdf8              POP      {r3-r7,pc}
                  |L22.128|
000080  6bbb              LDR      r3,[r7,#0x38]         ;529  ; s_sKeypadTouchCtrlHandler
000082  006e              LSLS     r6,r5,#1              ;529
000084  5b9a              LDRH     r2,[r3,r6]            ;529
000086  2a00              CMP      r2,#0                 ;529
000088  d00a              BEQ      |L22.160|
00008a  4b08              LDR      r3,|L22.172|
00008c  891b              LDRH     r3,[r3,#8]            ;533  ; g_u16PressingCount
00008e  429a              CMP      r2,r3                 ;533
000090  d3eb              BCC      |L22.106|
000092  1d24              ADDS     r4,r4,#4              ;533
000094  5900              LDR      r0,[r0,r4]            ;535
000096  4788              BLX      r1                    ;535
000098  6bb9              LDR      r1,[r7,#0x38]         ;536  ; s_sKeypadTouchCtrlHandler
00009a  2000              MOVS     r0,#0                 ;536
00009c  5388              STRH     r0,[r1,r6]            ;536
00009e  e7e4              B        |L22.106|
                  |L22.160|
0000a0  2001              MOVS     r0,#1                 ;530
0000a2  5398              STRH     r0,[r3,r6]            ;530
0000a4  e7e1              B        |L22.106|
;;;546    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L22.168|
                          DCD      ||.bss||+0x34
                  |L22.172|
                          DCD      ||.data||

                          AREA ||i.Keypad_TouchStartIRQ||, CODE, READONLY, ALIGN=2

                  Keypad_TouchStartIRQ PROC
;;;595      */
;;;596    void Keypad_TouchStartIRQ(void)
000000  b510              PUSH     {r4,lr}
;;;597    {
;;;598    	CapSense_ResetCounter();
000002  f7fffffe          BL       CapSense_ResetCounter
;;;599    	CAPSENSE_ENABLE_INTERRUPT();
000006  4805              LDR      r0,|L23.28|
000008  68c1              LDR      r1,[r0,#0xc]
00000a  05c2              LSLS     r2,r0,#23
00000c  4311              ORRS     r1,r1,r2
00000e  60c1              STR      r1,[r0,#0xc]
;;;600    	CAPSENSE_ENABLE();
000010  68c1              LDR      r1,[r0,#0xc]
000012  0602              LSLS     r2,r0,#24
000014  4311              ORRS     r1,r1,r2
000016  60c1              STR      r1,[r0,#0xc]
;;;601    }
000018  bd10              POP      {r4,pc}
;;;602    
                          ENDP

00001a  0000              DCW      0x0000
                  |L23.28|
                          DCD      0x40080080

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_sKeypadKeyCtrlHandler
                          %        32
                  s_sKeypadTgrCtrlHandler
                          %        20
                  s_sKeypadTouchCtrlHandler
                          %        68

                          AREA ||.data||, DATA, ALIGN=1

                  s_u16TgrDebounceCounter
000000  0000              DCB      0x00,0x00
                  s_u16KeyDebounceCounter
000002  0000              DCB      0x00,0x00
                  s_u8CapSenseIRQFlag
000004  0000              DCB      0x00,0x00
                  g_u16DebounceCount
000006  0000              DCB      0x00,0x00
                  g_u16PressingCount
000008  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\IO\\src\\Keypad.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_Keypad_c_8a32908d____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_Keypad_c_8a32908d____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_Keypad_c_8a32908d____REVSH|
#line 132
|__asm___8_Keypad_c_8a32908d____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
