; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\object\main.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\object\main.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I. -I..\..\..\..\Library\Device\Nuvoton\ISD9100\Include -I..\..\..\..\Library\Framework\inc -I..\..\..\..\Library\IO\inc -I..\..\..\..\Library\Audio\inc -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\Storage\inc -I..\..\..\..\Library\CMSIS\Include -I..\ -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -D__ISD9100__ --omf_browse=.\object\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SPIFlash_Initiate||, CODE, READONLY, ALIGN=2

                  SPIFlash_Initiate PROC
;;;56     
;;;57     UINT8 SPIFlash_Initiate(void)
000000  b538              PUSH     {r3-r5,lr}
;;;58     { 
;;;59     	UINT16 ui16Temp;
;;;60     	UINT32 ui32Temp;
;;;61     	UINT32 u32Count;
;;;62     
;;;63     	// SPI0: GPA1=SSB00, GPA2=SCLK0, GPA3=MISO0, GPA4=MOSI0 
;;;64     	SYS->GPA_MFP  = 
000002  2005              MOVS     r0,#5
000004  0700              LSLS     r0,r0,#28
000006  6b80              LDR      r0,[r0,#0x38]
000008  0a00              LSRS     r0,r0,#8
00000a  0200              LSLS     r0,r0,#8
00000c  3055              ADDS     r0,r0,#0x55
00000e  2105              MOVS     r1,#5
000010  0709              LSLS     r1,r1,#28
000012  6388              STR      r0,[r1,#0x38]
;;;65     		(SYS->GPA_MFP & (~(SYS_GPA_MFP_PA0MFP_Msk|SYS_GPA_MFP_PA1MFP_Msk|SYS_GPA_MFP_PA2MFP_Msk|SYS_GPA_MFP_PA3MFP_Msk)) )
;;;66     		| (SYS_GPA_MFP_PA0MFP_SPI_MOSI0|SYS_GPA_MFP_PA1MFP_SPI_SCLK|SYS_GPA_MFP_PA2MFP_SPI_SSB0|SYS_GPA_MFP_PA3MFP_SPI_MISO0);	
;;;67     	
;;;68     	// Reset IP module
;;;69     	CLK_EnableModuleClock(SPI0_MODULE);
000014  4817              LDR      r0,|L1.116|
000016  f7fffffe          BL       CLK_EnableModuleClock
;;;70     	SYS_ResetModule(SPI0_RST);
00001a  4817              LDR      r0,|L1.120|
00001c  f7fffffe          BL       SYS_ResetModule
;;;71     	SPIFlash_Open(SPI0, SPI_SS0, SPI0_CLOCK, &g_sSpiFlash );
000020  4b16              LDR      r3,|L1.124|
000022  4a17              LDR      r2,|L1.128|
000024  2101              MOVS     r1,#1
000026  4817              LDR      r0,|L1.132|
000028  f7fffffe          BL       SPIFlash_Open
;;;72     
;;;73     	// Make SPI flash leave power down mode if some where or some time had made it entring power down mode
;;;74     	SPIFlash_PowerDown(&g_sSpiFlash, FALSE);
00002c  2100              MOVS     r1,#0
00002e  4813              LDR      r0,|L1.124|
000030  f7fffffe          BL       SPIFlash_PowerDown
;;;75     	
;;;76     	// Check SPI flash is ready for accessing
;;;77     	u32Count = ui32Temp = 0;
000034  2000              MOVS     r0,#0
000036  4605              MOV      r5,r0
000038  4604              MOV      r4,r0
;;;78     	while(u32Count!=100)
00003a  e00e              B        |L1.90|
                  |L1.60|
;;;79     	{
;;;80     		SPIFlash_Read(&g_sSpiFlash, 0, (PUINT8) &ui16Temp, 2);
00003c  2302              MOVS     r3,#2
00003e  466a              MOV      r2,sp
000040  2100              MOVS     r1,#0
000042  480e              LDR      r0,|L1.124|
000044  f7fffffe          BL       SPIFlash_Read
;;;81     		if ( ui32Temp != (UINT32)ui16Temp )
000048  4668              MOV      r0,sp
00004a  8800              LDRH     r0,[r0,#0]
00004c  4285              CMP      r5,r0
00004e  d003              BEQ      |L1.88|
;;;82     		{
;;;83     			ui32Temp = (UINT32)ui16Temp;
000050  4668              MOV      r0,sp
000052  8805              LDRH     r5,[r0,#0]
;;;84     			u32Count = 0;
000054  2400              MOVS     r4,#0
000056  e000              B        |L1.90|
                  |L1.88|
;;;85     		}
;;;86     		else
;;;87     			u32Count++;
000058  1c64              ADDS     r4,r4,#1
                  |L1.90|
00005a  2c64              CMP      r4,#0x64              ;78
00005c  d1ee              BNE      |L1.60|
;;;88     	}
;;;89     
;;;90     	// The following code can be remove to save code if the flash size is not necessary for this application
;;;91     	SPIFlash_GetChipInfo(&g_sSpiFlash);
00005e  4807              LDR      r0,|L1.124|
000060  f7fffffe          BL       SPIFlash_GetChipInfo
;;;92     	if (g_sSpiFlash.u32FlashSize == 0)
000064  4805              LDR      r0,|L1.124|
000066  6840              LDR      r0,[r0,#4]  ; g_sSpiFlash
000068  2800              CMP      r0,#0
00006a  d100              BNE      |L1.110|
                  |L1.108|
;;;93     		return 0;
;;;94     	
;;;95     	// The above code can be remove to save code if the flash size is not necessary for this application
;;;96     	return 1;
;;;97     }
00006c  bd38              POP      {r3-r5,pc}
                  |L1.110|
00006e  2001              MOVS     r0,#1                 ;96
000070  e7fc              B        |L1.108|
;;;98     
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x4000000c
                  |L1.120|
                          DCD      0x0400000c
                  |L1.124|
                          DCD      g_sSpiFlash
                  |L1.128|
                          DCD      0x00b71b00
                  |L1.132|
                          DCD      0x40030000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;101    //---------------------------------------------------------------------------------------------------------
;;;102    INT32 main()
000000  481a              LDR      r0,|L2.108|
;;;103    {
;;;104    										
;;;105    	SYSCLK_INITIATE();				// Configure CPU clock source and operation clock frequency.
000002  f7fffffe          BL       SysClk_InitiateRC
;;;106    									// The configuration functions are in "SysClkConfig.h"
;;;107    	
;;;108    	CLK_EnableLDO(CLK_LDOSEL_3_3V);	// Enable ISD9100 interl 3.3 LDO.
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       CLK_EnableLDO
;;;109    	
;;;110    	if (! SPIFlash_Initiate())		// Initiate SPI interface and checking flows for accessing SPI flash.
00000c  f7fffffe          BL       SPIFlash_Initiate
000010  2800              CMP      r0,#0
000012  d101              BNE      |L2.24|
;;;111    		while(1); 					// loop here for easy debug
000014  bf00              NOP      
                  |L2.22|
000016  e7fe              B        |L2.22|
                  |L2.24|
;;;112    
;;;113    	OUTPUTPIN_INITIATE();			// Initiate output pin configuration.
000018  f7fffffe          BL       OutputPin_Initiate
;;;114    									// The output pins configurations are defined in "ConfigIO.h".
;;;115    	
;;;116    	KEYPAD_INITIATE();				// Initiate keypad configurations including direct trigger key and matrix key
00001c  f7fffffe          BL       InputKey_Initiate
;;;117    									// The keypad configurations are defined in "ConfigIO.h".
;;;118    	
;;;119    	ULTRAIO_INITIATE();				// Initiate ultraio output configurations.
;;;120    									// The ultraio output pin configurations are defined in "ConfigUltraIO.h"
;;;121    	
;;;122    	PDMA_INITIATE();				// Initiate PDMA.
000020  f7fffffe          BL       PdmaCtrl_Init
;;;123    									// After initiation, the PDMA engine clock NVIC are enabled.
;;;124    									// Use PdmaCtrl_Open() to set PDMA service channel for desired IP.
;;;125    									// Use PdmaCtrl_Start() to trigger PDMA operation.
;;;126    									// Reference "PdmaCtrl.h" for PDMA related APIs.
;;;127    									// PDMA_INITIATE() must be call before SPK_INITIATE() and MIC_INITIATE(), if open MIC or speaker.
;;;128    	
;;;129    	SPK_INITIATE();					// Initiate speaker including pop-sound canceling.
000024  f7fffffe          BL       SPK_Open
;;;130    									// After initiation, the APU is paused.
;;;131    									// Use SPK_Resume(0) to start APU operation.
;;;132    									// Reference "MicSpk.h" for speaker related APIs.
;;;133    
;;;134    	MIC_INITIATE();					// Initiate MIC.
000028  f7fffffe          BL       MIC_Open
;;;135    									// After initiation, the ADC is paused.
;;;136    									// Use ADC_Resume() to start ADC operation.
;;;137    									// Reference "MicSpk.h" for MIC related APIs.
;;;138    	
;;;139    																	
;;;140    	App_Initiate();					// Initiate application for audio decode.
00002c  f7fffffe          BL       App_Initiate
;;;141    	
;;;142    	while (1)
000030  e01a              B        |L2.104|
                  |L2.50|
;;;143    	{
;;;144    		if ( g_u8AppCtrl&APPCTRL_RECORD )
000032  480f              LDR      r0,|L2.112|
000034  7800              LDRB     r0,[r0,#0]  ; g_u8AppCtrl
000036  2104              MOVS     r1,#4
000038  4008              ANDS     r0,r0,r1
00003a  2800              CMP      r0,#0
00003c  d006              BEQ      |L2.76|
;;;145    		{
;;;146    			if ( App_ProcessRec() == FALSE )
00003e  f7fffffe          BL       App_ProcessRec
000042  2800              CMP      r0,#0
000044  d10e              BNE      |L2.100|
;;;147    				App_StopRec();
000046  f7fffffe          BL       App_StopRec
00004a  e00b              B        |L2.100|
                  |L2.76|
;;;148    		}
;;;149    		else if ( g_u8AppCtrl&APPCTRL_PLAY )
00004c  4808              LDR      r0,|L2.112|
00004e  7800              LDRB     r0,[r0,#0]  ; g_u8AppCtrl
000050  2108              MOVS     r1,#8
000052  4008              ANDS     r0,r0,r1
000054  2800              CMP      r0,#0
000056  d005              BEQ      |L2.100|
;;;150    		{
;;;151    			if ( App_ProcessPlay() == FALSE )
000058  f7fffffe          BL       App_ProcessPlay
00005c  2800              CMP      r0,#0
00005e  d101              BNE      |L2.100|
;;;152    				App_StopPlay();
000060  f7fffffe          BL       App_StopPlay
                  |L2.100|
;;;153    		}
;;;154    
;;;155    		TRIGGER_KEY_CHECK();		// Check and execute direct trigger key actions defined in "InputKeyActions.c"
000064  f7fffffe          BL       Keypad_ScanTgr
                  |L2.104|
000068  e7e3              B        |L2.50|
;;;156    									// Default trigger key handler is "Default_KeyHandler()"
;;;157    									// The trigger key configurations are defined in "ConfigIO.h".
;;;158    
;;;159    	}
;;;160    }
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      0x02dc6c00
                  |L2.112|
                          DCD      g_u8AppCtrl

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_sSpiFlash
                          %        12
                  g_sApp
                          %        3244

                          AREA ||.data||, DATA, ALIGN=0

                  g_u8AppCtrl
000000  00                DCB      0x00
                  g_adcVR2volume
000001  00                DCB      0x00
                  playEndStatus
000002  01                DCB      0x01
                  recEndStatus
000003  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e02da19b____REV16|
#line 118 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_e02da19b____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e02da19b____REVSH|
#line 132
|__asm___6_main_c_e02da19b____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
